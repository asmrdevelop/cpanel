#!/usr/local/cpanel/3rdparty/bin/perl

# cpanel - scripts/quotacheck                      Copyright 2022 cPanel, L.L.C.
#                                                           All rights reserved.
# copyright@cpanel.net                                         http://cpanel.net
# This code is subject to the cPanel license. Unauthorized copying is prohibited

package scripts::quotacheck;

use strict;
use warnings;

use Cpanel::Config::LoadCpConf           ();
use Cpanel::Debug                        ();
use Cpanel::AccessIds::ReducedPrivileges ();

exit main(@ARGV) unless caller;

my $debug;
my $cpconf_ref;
my $force_disk_emails = 0;    # devel aid, MUST be 0 for production

sub main {
    my (@args) = @_;

    $debug = @args && grep( /debug/, @args ) ? 1 : 0;

    $cpconf_ref = Cpanel::Config::LoadCpConf::loadcpconf_not_copy();
    if ( exists $cpconf_ref->{'skipdiskcheck'} && $cpconf_ref->{'skipdiskcheck'} eq '1' && exists $cpconf_ref->{'skipboxcheck'} && $cpconf_ref->{'skipboxcheck'} eq '1' ) {
        Cpanel::Debug::log_info('Quota checks and notifications disabled for mail accounts and disk usage per Tweak Settings.');
        return 0;
    }

    require Cpanel::IONice;
    if ( Cpanel::IONice::ionice( 'best-effort', exists $cpconf_ref->{'ionice_quotacheck'} ? $cpconf_ref->{'ionice_quotacheck'} : 6 ) ) {
        print "[quotacheck] Setting I/O priority to reduce system load: " . Cpanel::IONice::get_ionice() . "\n";
    }

    require Cpanel::OSSys;
    Cpanel::OSSys::nice(10);

    require Cpanel::Hostname;
    require Cpanel::ContactInfo;
    require Cpanel::Config::LoadUserDomains;
    require Cpanel::Email::DiskUsage;
    require Cpanel::Config::LoadCpUserFile;
    require Cpanel::Config::HasCpUserFile;
    require Cpanel::Config::LoadConfig;
    require Cpanel::Config::FlushConfig;
    require Cpanel::PwCache::Helpers;
    require Cpanel::PwCache::Build;

    Cpanel::PwCache::Helpers::no_uid_cache();    #uid cache only needed if we are going to make lots of getpwuid calls
    Cpanel::PwCache::Build::init_passwdless_pwcache();

    require Cpanel::Unix::PID::Tiny;

    my $pidfile = '/var/run/quotacheck.pid';
    my $upid    = Cpanel::Unix::PID::Tiny->new();

    if ( !$upid->pid_file($pidfile) ) {
        my $pid = $upid->get_pid_from_pidfile($pidfile);
        print "Another instance of quotacheck appears to be running at PID '$pid'.\n";
        return 0;
    }

    my $quotawarnedfile = '/var/cpanel/quotawarned';
    my $hostname        = Cpanel::Hostname::gethostname();

    my %ALL_ACCOUNTS;
    my %TRUE_USER_DOMAINS;
    Cpanel::Config::LoadUserDomains::loadtrueuserdomains( \%TRUE_USER_DOMAINS, 1 );

    my $do_disk_check = ( !exists $cpconf_ref->{'skipdiskcheck'} || $cpconf_ref->{'skipdiskcheck'} ne '1' ) ? 1 : 0;

    my ( $user_info, %CPD ) = load_user_info( \%TRUE_USER_DOMAINS );

    my ( $warned_ref, $rCONTACT_INFO, $rUSED, $rLIMIT, $quota_version, $inodes_used, $inodes_limit );
    require Cpanel::SysQuota;
    $TRUE_USER_DOMAINS{'root'} = '(system)';                # required because we check root for notification fallback
    $user_info->{'root'}{'cpuser'} = { 'DOMAINS' => [] };
    ( $rUSED, $rLIMIT, $quota_version, $inodes_used, $inodes_limit ) = Cpanel::SysQuota::analyzerepquotadata();
    print "Fetching contact info...." if $debug;
    $rCONTACT_INFO = Cpanel::ContactInfo::fetch_contactinfo( \%TRUE_USER_DOMAINS, \%CPD, 1, 1 );
    print "Done\n" if $debug;
    $warned_ref = Cpanel::Config::LoadConfig::loadConfig( $quotawarnedfile, -1, ':' );
    delete $warned_ref->{''};                               # remove empty entries

    foreach my $user ( sort keys %TRUE_USER_DOMAINS ) {
        print "Checking user $user\n" if $debug;
        my $domain  = $TRUE_USER_DOMAINS{$user};
        my $homedir = $user_info->{$user}{'homedir'};
        my $cpuser  = $user_info->{$user}{'cpuser'};

        {
            no warnings 'once';
            $Cpanel::homedir = $homedir;    #for email disk usage
        }

        my @warned_email_users;

        Cpanel::Debug::log_warn("contact info could not be loaded for: $user") if ( !exists $rCONTACT_INFO->{$user} );

        my $should_notify_this_user_about_mailbox_quota = should_notify_user( $rCONTACT_INFO->{$user} );
        #
        # Here we check to see if each mailbox is approching its disk space limits
        #
        foreach my $domain ( exists $user_info->{$user}{'domains'} ? @{ $user_info->{$user}{'domains'} } : () ) {
            print "\tDomain: $domain\n" if $debug;

            next if ( !$homedir || !$domain || !-e "$homedir/etc/$domain/quota" || -z _ );

            if ( -B _ ) {    # binary file check
                Cpanel::Debug::log_warn("WARNING $homedir/etc/$domain/quota is a binary file. Expected standard mail quota format.");
                next;
            }
            print "\t\thas quota file\n" if $debug;

            process_domain(
                user               => $user,
                domain             => $domain,
                homedir            => $homedir,
                cpuser             => $cpuser,
                should_notify_user => $should_notify_this_user_about_mailbox_quota,
                warned_email_users => \@warned_email_users,
                warned_ref         => $warned_ref,
                ALL_ACCOUNTS       => \%ALL_ACCOUNTS,
            );
        }

        #
        # Email the main account for each user if they have email users who are near or reaching quota
        #
        if (@warned_email_users) {
            dispatchmessagetomainacct( $user, [ sort @warned_email_users ] );
        }

        #
        # Here we check to see if they are approching their disk space limits
        #
        if ($do_disk_check) {
            process_disk_check(
                user          => $user,
                domain        => $domain,
                homedir       => $homedir,
                cpuser        => $cpuser,
                warned_ref    => $warned_ref,
                inodes_used   => $inodes_used,
                inodes_limit  => $inodes_limit,
                rCONTACT_INFO => $rCONTACT_INFO,
                rLIMIT        => $rLIMIT,
                rUSED         => $rUSED,
                ALL_ACCOUNTS  => \%ALL_ACCOUNTS,
            );
        }
    }

    delete @{$warned_ref}{ grep { !exists $ALL_ACCOUNTS{$_} } keys %{$warned_ref} };    # remove accounts that no longer exist or are not being check

    Cpanel::Config::FlushConfig::flushConfig( $quotawarnedfile, $warned_ref, ':' );

    return 0;
}

# End of main routine.

sub load_user_info {
    my ($TRUE_USER_DOMAINS) = @_;
    print "Loading user info...." if $debug;
    my $pwcache_ref = Cpanel::PwCache::Build::fetch_pwcache();
    my $user_info   = {
        map {
            my $cpuser = Cpanel::Config::LoadCpUserFile::loadcpuserfile( $_->[0] );
            (
                $cpuser
                ? (
                    $_->[0] => {
                        homedir => $_->[7],
                        cpuser  => $cpuser,
                        domains => [
                            $cpuser->{'DOMAIN'},
                            (
                                ref $cpuser->{'DOMAINS'} eq 'ARRAY'
                                ? @{ $cpuser->{'DOMAINS'} }
                                : ()
                            )
                        ]
                    }
                  )
                : ()
            )
        } grep { exists $TRUE_USER_DOMAINS->{ $_->[0] } && Cpanel::Config::HasCpUserFile::has_cpuser_file( $_->[0] ) } @$pwcache_ref
    };
    my %CPD = ( map { $_ => $user_info->{$_}{'cpuser'} } keys %$user_info );
    print "Done\n" if $debug;
    return ( $user_info, %CPD );
}

sub should_notify_user {
    my ($user_contact) = @_;

    # Tweak Setting skipboxcheck disables all mail box quota warnings. The cPanel
    # user setting 'notify_email_quota_limit' is set on a per user basis and on
    # unless specifically disabled
    return ( ( exists $cpconf_ref->{'skipboxcheck'} && $cpconf_ref->{'skipboxcheck'} ne '1' ) && ( !exists $user_contact->{'notify_email_quota_limit'} || $user_contact->{'notify_email_quota_limit'} ne '0' ) ) ? 1 : 0;
}

sub is_at_threshold {
    my ( $percent, $check_type, $type ) = @_;
    my $var = "emailusers_${check_type}_${type}_percent";
    return 0 unless $cpconf_ref->{$var};    # unless defined and non-zero
    return $percent >= $cpconf_ref->{$var};
}

sub _int {
    my ($val) = @_;
    return defined $val && $val ? int $val : 0;
}

sub process_disk_check {
    my (%args) = @_;
    my ( $user, $domain, $homedir, $cpuser, $warned_ref, $inodes_used, $inodes_limit, $rCONTACT_INFO, $rLIMIT, $rUSED, $ALL_ACCOUNTS ) = @args{qw/user domain homedir cpuser warned_ref inodes_used inodes_limit rCONTACT_INFO rLIMIT rUSED ALL_ACCOUNTS/};

    my $owner = $cpuser->{'OWNER'};
    my $used  = _int( $rUSED->{$user} );
    my $limit = _int( $rLIMIT->{$user} );

    my $user_inodes_used  = _int( $inodes_used->{$user} );
    my $user_inodes_limit = _int( $inodes_limit->{$user} );

    my $mpercent        = $limit             ? sprintf( "%.2f", ( ( $used / $limit ) * 100 ) )                         : 0;
    my $inodes_mpercent = $user_inodes_limit ? sprintf( "%.2f", ( ( $user_inodes_used / $user_inodes_limit ) * 100 ) ) : 0;
    $ALL_ACCOUNTS->{$user} = undef;

    print "\tDisk Info for $user: BLOCKS USED: $used BLOCKS LIMIT: $limit ($mpercent\%) INODES USED: $user_inodes_used INODES LIMIT: $user_inodes_limit ($inodes_mpercent\%)\n\n" if $debug;

    require Cpanel::Hooks;
    my $has_hook = Cpanel::Hooks::hooks_exist_for_category('DiskQuota') || Cpanel::Debug::debug_hooks_value();

    my $did_warning = 0;
    foreach my $type (qw{full critical warn}) {
        if (   $force_disk_emails
            || is_at_threshold( $mpercent,        'diskusage', $type )
            || is_at_threshold( $inodes_mpercent, 'diskusage', $type ) ) {

            if ($has_hook) {
                my ( $result, $message ) = Cpanel::Hooks::hook(
                    {
                        'category' => 'DiskQuota',
                        'event'    => $type,
                        'stage'    => 'pre',
                    },
                    {
                        'details' => {
                            'cpuser'       => $cpuser,
                            'contact_info' => $rCONTACT_INFO->{$user},
                            'inodes_used'  => _int( $inodes_used->{$user} ),
                            'inodes_limit' => _int( $inodes_limit->{$user} ),
                            'blocks_limit' => _int( $rLIMIT->{$user} ),
                            'blocks_used'  => _int( $rUSED->{$user} ),
                        }
                    },
                );

                Cpanel::Debug::log_info("DiskQuota hook failed during quotacheck for $cpuser: $message") if !$result && $message;
            }

            if ( $force_disk_emails || ( !exists $warned_ref->{$user} || $warned_ref->{$user} ne $type ) ) {
                my $notify = $force_disk_emails || !defined $rCONTACT_INFO->{$owner}->{'notify_disk_limit'} || $rCONTACT_INFO->{$owner}->{'notify_disk_limit'} ne '0';

                # The below block contacts the owner (reseller or root) of the account
                # to let them know that the user is about to exceed their disk space
                if ( $force_disk_emails || ( $cpconf_ref->{ 'emailusers_diskusage_' . $type . '_contact_admin' } ) ) {
                    if ( $force_disk_emails || $owner ne $user ) {
                        if ($notify) {
                            dispatchdisk( $owner, $type, $limit, $used, $mpercent, $user, $domain, $user_inodes_limit, $user_inodes_used, $inodes_mpercent );
                        }
                    }
                    else {
                        if ($notify) {
                            dispatchdisk( 'root', $type, $limit, $used, $mpercent, $user, $domain, $user_inodes_limit, $user_inodes_used, $inodes_mpercent );
                        }
                    }
                }
                if ($notify) {
                    dispatchdisk_user( $user, $type, $limit, $used, $mpercent, $domain, $user_inodes_limit, $user_inodes_used, $inodes_mpercent );
                }
            }
            print "\t\tWarning: $type\n" if $debug;
            $warned_ref->{$user} = $type;
            $did_warning = 1;
            last;
        }
    }
    delete $warned_ref->{$user} if !$did_warning;
    return;
}

sub process_domain {
    my (%args) = @_;
    my ( $user, $domain, $homedir, $should_notify, $ALL_ACCOUNTS ) = @args{qw/user domain homedir should_notify_user ALL_ACCOUNTS/};

    my %domain_quota;
    if ( open my $quota_fh, '<', "$homedir/etc/$domain/quota" ) {
        my $buffer;
        read( $quota_fh, $buffer, 4194304 );    #max 4meg
        %domain_quota = (
            map {
                my $d = [ split( /:/, $_ ) ];
                $d->[0] =~ s{/}{}g;
                ( $d->[0] && $d->[1] && $d->[0] !~ tr/\0// && $d->[1] !~ /unlimited/i )
                  ? ( $d->[0], int $d->[1] )
                  : ()
            } grep { /.+:.+/ } split( /\n/, $buffer )
        );
        close $quota_fh;
    }
    else {
        Cpanel::Debug::log_warn("Unable to open $homedir/etc/$domain/quota: $!");
        next;
    }

    foreach my $mailbox_user ( keys %domain_quota ) {
        next if ( !$should_notify || !-e "$homedir/mail/$domain/$mailbox_user" );
        my $quota = $domain_quota{$mailbox_user};

        $ALL_ACCOUNTS->{ $mailbox_user . '@' . $domain } = undef;
        process_mailbox_user(
            %args,
            mailbox_user => $mailbox_user,
            quota        => $quota,
        );

    }
    return;
}

sub process_mailbox_user {
    my (%args) = @_;
    my ( $user, $mailbox_user, $domain, $cpuser, $homedir, $quota, $warned_email_users, $warned_ref ) = @args{qw/user mailbox_user domain cpuser homedir quota warned_email_users warned_ref/};

    # Determine mail box size
    # Run get_disk_used as the user
    my ( $size, $percent, $error_during_get_disk_used );
    Cpanel::AccessIds::ReducedPrivileges::call_as_user(
        $user,
        sub {
            local $@;
            eval {
                $size    = Cpanel::Email::DiskUsage::get_disk_used( $mailbox_user, $domain, $homedir ) || 0;
                $percent = ( $quota == 0 ) ? 0 : sprintf( "%.2f", ( ( $size / $quota ) * 100 ) );
            };

            if ($@) {
                $error_during_get_disk_used = $@;
                warn;
            }
            print "\t\tMail User: $mailbox_user QUOTA: $quota SIZE: $size $percent%\n" if $debug;
        }
    );

    next if $error_during_get_disk_used;

    my $did_warning = 0;
    foreach my $type ( 'full', 'critical', 'warn' ) {

        if ( is_at_threshold( $percent, 'mailbox', $type ) ) {
            if ( !exists $warned_ref->{ $mailbox_user . '@' . $domain }
                || $warned_ref->{ $mailbox_user . '@' . $domain } ne $type ) {
                push @$warned_email_users, $mailbox_user . '@' . $domain;
                if ( $type eq 'full' ) {
                    dispatchbox_mainacct( $mailbox_user . '@' . $domain, $user, $type, $quota, $size, $percent, $cpuser->{'RS'}, $domain );
                }
                else {
                    dispatchbox( $mailbox_user . '@' . $domain, $user, $type, $quota, $size, $percent );
                }
            }
            print "\t\t\tWarning: $type\n" if $debug;
            $warned_ref->{ $mailbox_user . '@' . $domain } = $type;
            $did_warning = 1;
            last;
        }

    }
    delete $warned_ref->{ $mailbox_user . '@' . $domain } if !$did_warning;
    return;
}

#
# To test this code:
# 1.) Create a user ‘notifyme’ with domain ‘notifyme.tld’
# 2.) log into cPanel as notifyme and set the contact email for notifyme to something other than your root user’s contact address (I created another user and set that user’s email address as notifyme’s address).
# 3.) Uncomment the following lines, one by one, to /scripts/quotacheck at line 274. After adding each line run /scripts/quotacheck then remove the line and add the next
#
#dispatchdisk( 'notifyme', 'critical', 1024, .9*1024, 90, 'notifyme', 'notifyme.tld' );
#dispatchdisk( 'root', 'critical', 1024, .9*1024, 90, 'notifyme', 'notifyme.tld' );
#dispatchdisk_user( 'notifyme', 'critical', 1024, .9*1024, 90, 'notifyme.tld' );
#dispatchmessagetomainacct( 'notifyme', [ 'any@email.tld', 'all@emails.tld', 'moar@emails.tld' ] );
#dispatchbox( 'other@notifyme.tld', 'notifyme', 'critical', 1024*2, .9*1024*2, 90 );
#dispatchbox_mainacct( 'other@notifyme.tld', 'notifyme', 'critical', 1024*2, .9*1024*2, 90, 'x3', 'notifyme.tld' );
#
#

sub dispatchbox_mainacct {    ##no critic qw( RequireArgUnpacking )
    return if $debug;
    my ( $box, $icontact_user, $status, $limit, $used, $percentused, $theme, $domain ) = @_;
    $box =~ s/\n//g;

    require Cpanel::Encoder::URI;
    require Cpanel::iContact::Class::Quota::MailboxWarning;
    my $mailbox_user = ( split( /\@/, $box ) )[0];

    require Cpanel::Notify::Deferred;
    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::MailboxWarning',
        'application'      => 'Quota::MailboxWarning',
        'constructor_args' => [
            'to'                                => $icontact_user,
            'box'                               => $box,
            'diskused'                          => $used,
            'disklimit'                         => $limit,
            'status'                            => $status,
            'adjusturl'                         => 'https://mail.' . $domain . ':2083/frontend/' . $theme . '/mail/editquota.html?email=' . Cpanel::Encoder::URI::uri_encode_str($mailbox_user) . '&domain=' . Cpanel::Encoder::URI::uri_encode_str($domain) . '&redirectdomain=' . Cpanel::Encoder::URI::uri_encode_str($domain),
            'percentused'                       => $percentused,
            'username'                          => $icontact_user,
            'notification_targets_user_account' => 1,
        ]
    );

    print "MailBox ($box) [$status]\n";

    return;
}

sub dispatchbox {    ##no critic qw( RequireArgUnpacking )
    return if $debug;
    my ( $box, $icontact_user, $status, $limit, $used, $percentused ) = @_;
    $box =~ s/\n//g;

    require Cpanel::iContact::Class::Quota::MailboxWarning;

    my %notifyopts = (
        'box'         => $box,
        'diskused'    => $used,
        'disklimit'   => $limit,
        'status'      => $status,
        'percentused' => $percentused,
    );

    require Cpanel::Notify::Deferred;
    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::MailboxWarning',
        'application'      => 'Quota::MailboxWarning',
        'constructor_args' => [
            %notifyopts,
            'to'                                => $icontact_user,
            'username'                          => $icontact_user,
            'notification_targets_user_account' => 1,
        ]
    );

    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::MailboxWarning',
        'application'      => 'Quota::MailboxWarning',
        'constructor_args' => [
            %notifyopts,
            'to'                                => $box,
            'username'                          => $icontact_user,
            'notification_targets_user_account' => 1,
        ]
    );

    print "MailBox ($box) [$status]\n";

    return;
}

sub dispatchmessagetomainacct {    ##no critic qw( RequireArgUnpacking )
    return if $debug;
    my ( $icontact_user, $user_list_ar ) = @_;

    require Cpanel::iContact::Class::Quota::List;

    require Cpanel::Notify::Deferred;
    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::List',
        'application'      => 'Quota::List',
        'constructor_args' => [
            'to'                                => $icontact_user,
            'username'                          => $icontact_user,
            'user'                              => $icontact_user,
            'mail_account_list'                 => $user_list_ar,
            'notification_targets_user_account' => 1,
        ]
    );

    return;
}

sub dispatchdisk_user {    ##no critic qw( RequireArgUnpacking )
    return if $debug;
    my ( $icontact_user, $status, $limit, $used, $percentused, $domain, $user_inodes_limit, $user_inodes_used, $inodes_mpercent ) = @_;

    require Cpanel::iContact::Class::Quota::DiskWarning;

    require Cpanel::Notify::Deferred;
    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::DiskWarning',
        'application'      => 'Quota::DiskWarning',
        'constructor_args' => [
            'to'                                => $icontact_user,
            'username'                          => $icontact_user,
            'user'                              => $icontact_user,
            'user_domain'                       => $domain,
            'status'                            => $status,
            'diskused'                          => sprintf( "%.2f", $used / 1024 ),
            'disklimit'                         => sprintf( "%.2f", $limit / 1024 ),
            'inodesused'                        => $user_inodes_used,
            'inodeslimit'                       => $user_inodes_limit,
            'inodespercentused'                 => $inodes_mpercent,
            'percentused'                       => $percentused,
            'sent_to_owner'                     => 0,
            'notification_targets_user_account' => 1,
        ]
    );

    return;
}

sub dispatchdisk {    ##no critic qw( RequireArgUnpacking )
    return if $debug;
    my ( $icontact_user, $status, $limit, $used, $percentused, $user, $domain, $user_inodes_limit, $user_inodes_used, $inodes_mpercent ) = @_;

    require Cpanel::iContact::Class::Quota::DiskWarning;

    require Cpanel::Notify::Deferred;
    Cpanel::Notify::Deferred::notify(
        'class'            => 'Quota::DiskWarning',
        'application'      => 'Quota::DiskWarning',
        'constructor_args' => [
            $icontact_user eq 'root' ? () : ( 'to' => $icontact_user, 'username' => $icontact_user ),
            'user'              => $user,
            'user_domain'       => $domain,
            'status'            => $status,
            'diskused'          => sprintf( "%.2f", $used / 1024 ),
            'disklimit'         => sprintf( "%.2f", $limit / 1024 ),
            'percentused'       => $percentused,
            'inodesused'        => $user_inodes_used,
            'inodeslimit'       => $user_inodes_limit,
            'inodespercentused' => $inodes_mpercent,
            'sent_to_owner'     => 1,
        ]
    );

    return;
}
