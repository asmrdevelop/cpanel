
# cpanel - Cpanel/Upload.pm                        Copyright 2022 cPanel, L.L.C.
#                                                           All rights reserved.
# copyright@cpanel.net                                         http://cpanel.net
# This code is subject to the cPanel license. Unauthorized copying is prohibited

package Cpanel::Upload;

use strict;
use warnings;

use Cpanel::Imports;

use Cpanel                  ();
use Cpanel::ClamScan        ();
use Cpanel::Exception       ();
use Cpanel::Form            ();
use Cpanel::PwCache         ();
use Cpanel::Background::Log ();

=head1 MODULE

C<Cpanel::Upload>

=head1 DESCRIPTION

C<Cpanel::Upload> provides helper methods for processing a standard UAPI file
upload collection.

=head1 SYNOPSIS

  use Cpanel::Upload();

  my $log = Cpanel::Upload::process_files(sub {
    my %args = @_;
    my $ok;
    my $file = "/home/cpusr/public_html/$args{file)";
    if (!-e $file) {
        if(!rename $args{temp_file}, $file) {
            return (0, 'rename-failed', $!)
        }
        return 1
    }
    else {
        return (0, 'overwrite', "Can not overwrite existing $file.");
    }
  });

  if (my @errors = $log->has_entries_of_type('error')) {
    print "ERRORS:\n";
    foreach my $line (@errors) {
        print $line . "\n";
    }
  } else {
    foreach my $line ($log->get_entries()) {
        print $line . "\n";
    }
  }

=head1 FUNCTIONS

=head2 process_files(FILES, CALLBACK, ARGS)

=head3 ARGUMENTS

=over

=item FILES - array ref

If undef or an empty array, the function will look for the files in the $Cpanel::FORM
global. Each element of the array should be the full path to a file on the filesystem.

=item CALLBACK - code ref

Callback that is expected to process each file in the upload. The callback
should have the following signature:

  CALLBACK(%ARGS)

where the ARGS has the following properties:

=over

=item file - string

Name of the file from the original source.

=item temp_file - string

Temporary location on disk where the uploaded file content is stored.

=item log - Cpanel::Background::Log

Logging tool to keep track of information about the uploads as they progress.
The callback code can use this to add meaningful milestones in the processing
of the upload (errors, warnings, info, debug messages)

=item args - Custom arguments as passed in the ARGS parameter.

=back

The callback should return an list of 3 items:

  (OK, PROBLEM, DESCRIPTION)

where these are defined as:

=over

=item OK - Boolean

1 when the file was processed correctly, 0 otherwise.

=item PROBLEM - string

Optional. Fixed string for each type of problem. Do not localize.

=item DESCRIPTION - string

Optional. More detailed string or error message. Possibly localized.

=back

The callback can also throw errors on failures.  The callback must return 1 on success.

=item ARGS - hashref

Optional arguments that get passed to the callback. There are some special ones that get
consumed by the process_files() function as well:

=over

=item log - Cpanel::Background::Log

Optional, if provided, this log object will be used instead of the one generated by
process_files().

=item path - string

Optional, if provided, this is the path to the log file the Cpanel::Background::Log
object will use.

=back

=back

=head3 RETURNS

Cpanel::Background::Log

=cut

sub process_files {
    my ( $callback, $files, $args ) = @_;
    die Cpanel::Exception::create( 'MissingParameter', [ name => 'callback' ] )
      if !$callback;
    die Cpanel::Exception::create( 'InvalidParameter', 'The “[_1]” parameter is not a subroutine.', ['callback'] )
      if ref $callback ne 'CODE';

    $args = {} if !$args;

    my $path = $args->{path};
    if ( !$path ) {
        my $homedir = _get_homedir();
        $path = "$homedir/.cpanel/logs/uploads";
    }

    my $log = delete $args->{log} // Cpanel::Background::Log->new( { path => $path } );

    my $uploads;
    if ( $files && ref $files eq 'ARRAY' ) {
        $uploads = [ map { { filename => $_, temppath => $_ } } @$files ];
    }
    else {
        no warnings 'once';
        $uploads = Cpanel::Form::get_uploaded_files_ar();
    }

    die Cpanel::Exception::create( 'MissingParameter', [ name => 'file' ] )
      if !$uploads || ref $uploads ne 'ARRAY' || scalar @$uploads == 0;

    foreach my $upload (@$uploads) {

        my $original_file_name = _get_filename_from_path_os_agnostic( $upload->{filename} );

        # Get the name of the temporary file where the
        # FORM processor placed the uploaded file.
        my $temp_file_path = $upload->{temppath};
        $temp_file_path =~ s{\n}{}g;

        $log->data( 'file', $original_file_name );

        if ( !-e $temp_file_path ) {
            $log->error( 'no-file', { description => locale()->maketext( 'The system could not locate the file: [_1]', $original_file_name ) } );
        }
        elsif ( !-f $temp_file_path ) {
            $log->error( 'no-file', { description => locale()->maketext( 'The path provided is not a file: [_1]', $original_file_name ) } );
        }
        else {
            # Check if the uploaded file contains a virus
            my $has_virus = Cpanel::ClamScan::ClamScan_scan($temp_file_path);
            if ( $has_virus && $has_virus ne 'OK' && ( $has_virus !~ m/access file/i && $has_virus !~ m/no such/i ) ) {

                logger()->info("Virus detected in upload $temp_file_path by user $Cpanel::user ($original_file_name): $has_virus");
                $log->error( 'virus', { description => locale()->maketext( 'Virus detected in upload “[_1]”.', $original_file_name ) } );
            }
            else {
                $log->info( 'no-virus', { description => locale()->maketext( 'No virus detected in upload “[_1]”.', $original_file_name ) } );

                my ( $ok, $problem, $message ) = eval { $callback->( temp_file => $temp_file_path, file => $original_file_name, args => $args, log => $log ) };
                if ( my $exception = $@ ) {
                    my $message = Cpanel::Exception::get_string_no_id($exception);
                    $log->error( 'exception', { description => $message } );
                }
                elsif ( !$ok ) {
                    $log->error( $problem, { ( $message ? ( description => $message ) : () ) } );
                }
                else {
                    $log->info( 'processed', { ( $message ? ( description => $message ) : () ) } );
                }
            }
        }
    }

    $log->remove_data('file');
    $log->close() unless $args->{log};

    return $log;
}

=head2 _get_filename_from_path_os_agnostic(PATH)

Gets the file name from a path.  Will work for DOS, WINDOWS, LINUX, UNIX and MAC paths
since we are allowing either / or \ separators.  Assumes that the last item in the path
is a file name.

=head3 ARGUMENTS

=over

=item PATH - string

Path to process

=back

=head3 RETURNS

string - the file name.

=cut

sub _get_filename_from_path_os_agnostic {
    my $path       = shift;
    my @path_parts = split( m{[\\/]}, $path );
    return $path_parts[-1];
}

=head2 _get_homedir [PRIVATE]

Helper method to get the current user's home directory.

=head3 RETURNS

string - the current user's home path

=cut

sub _get_homedir {
    return $Cpanel::homedir // Cpanel::PwCache::gethomedir($>);
}

1;
