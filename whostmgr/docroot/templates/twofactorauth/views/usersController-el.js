//~~GENERATED~~
//-------------------------------------------------------------
// Source:    /usr/local/cpanel/whostmgr/docroot/templates/twofactorauth/views/usersController.js
// Generated: /usr/local/cpanel/whostmgr/docroot/templates/twofactorauth/views/usersController-el.js
// Module:    /templates/twofactorauth/views/usersController-el
// Locale:    el
// This file is generated by the cpanel localization system
// using the bin/_build_translated_js_hash_files.pl script.
//-------------------------------------------------------------
// !!! Do not hand edit this file !!!
//-------------------------------------------------------------
(function() {
    // The raw lexicon.
    var newLex = {"Displaying [numf,_1] to [numf,_2] out of [quant,_3,item,items]":"Displaying [numf,_1] to [numf,_2] out of [quant,_3,item,items]","The system failed to remove two-factor authentication for [quant,_1,user,users].":"The system failed to remove two-factor authentication for [quant,_1,user,users].","The system failed to remove two-factor authentication for “[_1]”.":"The system failed to remove two-factor authentication for “[_1]”.","The system successfully removed two-factor authentication for [quant,_1,user,users].":"The system successfully removed two-factor authentication for [quant,_1,user,users].","The system successfully removed two-factor authentication for all users.":"The system successfully removed two-factor authentication for all users.","The system successfully removed two-factor authentication for “[_1]”.":"The system successfully removed two-factor authentication for “[_1]”."};

    if (!this.LEXICON) {
        this.LEXICON = {};
    }

    for(var item in newLex) {
        if(newLex.hasOwnProperty(item)) {
            var value = newLex[item];
            if (typeof(value) === "string" && value !== "") {
                // Only add it if there is a value.
                this.LEXICON[item] = value;
            }
        }
    }
})();
//~~END-GENERATED~~
