{"version":3,"file":"src_app_components_eula_eula_interceptor_ts-src_app_components_eula_eula_module_ts-src_app_co-925341.js","mappings":"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","sources":["./src/app/components/eula/eula.guard.ts","./src/app/components/eula/eula.interceptor.ts","./src/app/components/eula/eula.component.html","./src/app/components/eula/eula.component.ts","./src/app/components/eula/eula.module.ts","./src/app/components/settings/features-management/default-features/default-features.component.html","./src/app/components/settings/features-management/default-features/default-features.component.ts","./src/app/components/settings/features-management/domains.component.ts","./src/app/components/settings/features-management/features-management.module.ts","./src/app/components/settings/features-management/legacy/legacy.component.html","./src/app/components/settings/features-management/legacy/legacy.component.ts","./src/app/components/settings/features-management/native/native.component.html","./src/app/components/settings/features-management/native/native.component.ts","./src/app/components/settings/features-management/wrapper/wrapper.component.html","./src/app/components/settings/features-management/wrapper/wrapper.component.ts","./src/app/components/settings/notifications/accordion.directive.ts","./src/app/components/settings/notifications/settings-notification.component.html","./src/app/components/settings/notifications/settings-notification.component.ts","./src/app/components/settings/notifications/route.ts","./src/app/components/settings/notifications/settings-notification.module.ts","./src/app/components/support/route.ts","./src/app/services/features-management.ts","./src/app/utils/blocked-ui-message/blocked-ui-message.component.ts","./src/app/utils/blocked-ui-message/blocked-ui-message.module.ts","./src/app/utils/config/antivirus-config.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    Router,\n    RouterStateSnapshot,\n} from '@angular/router';\nimport { EulaService } from './eula.service';\n\n@Injectable()\nexport class EulaGuard implements CanActivate {\n    constructor(\n        public eulaService: EulaService,\n        public router: Router,\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (!this.eulaService.licenseState.eula.value.isFailed()) {\n            this.router.navigate(['/']);\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n    HttpResponse,\n} from '@angular/common/http';\nimport { of,  EMPTY, Observable, switchMap } from 'rxjs';\nimport { EulaService } from 'app/components/eula/eula.service';\nimport { AuthState } from 'app/services/auth-state';\nimport { AgentResponse, ResponseDataExceptItems } from '@imunify360-api/misc';\nimport { postOnly } from 'app/interceptors/utils';\n\n\n@Injectable()\nexport class EulaInterceptor implements HttpInterceptor {\n    constructor(\n        private injector: Injector,\n        private authState: AuthState,\n    ) {}\n\n    @postOnly\n    intercept(req: HttpRequest<AgentResponse<ResponseDataExceptItems>>, next: HttpHandler):\n        Observable<HttpEvent<AgentResponse<ResponseDataExceptItems>>> {\n        return next.handle(req).pipe(\n            switchMap((event) => {\n                if (this.authState.isAdmin.value && event instanceof HttpResponse) {\n                    const body: AgentResponse<ResponseDataExceptItems> = event.body;\n                    if (body.data) {\n                        const eulaStatus = body.data.eula;\n                        if (eulaStatus !== undefined\n                            && !this.injector.get(EulaService).checkEulaStatus(eulaStatus)) {\n                            return EMPTY;\n                        }\n                    }\n                }\n                return of(event);\n            }),\n        );\n    }\n}\n","<div class=\"i360-eula-root\">\n    <ng-container *ngIf=\"(eulaStatus && (authState.isAdmin|async)); else agreementIsDecline\">\n        <div class=\"eula-license \">\n            <div class=\"container-fluid\">\n                <div i360Loader>\n                    <div class=\"eula-title\">\n                        <h3>{{licenseState.eula.value.message}}</h3>\n                        <p>\n                            {{ 'eula.acceptUpdated' | translate : (licenseState.license|async) }}\n                        </p>\n                    </div>\n                    <div class=\"eula-agreement i360-scrollbar\">\n                        {{licenseState.eula.value.text}}\n                    </div>\n                    <div class=\"eula-submit\">\n                        <button mat-raised-button\n                                (click)=\"eulaStatus = false;\">\n                            {{ 'eula.decline' | translate }}\n                        </button>\n                        <button mat-raised-button\n                                id=\"eula-accept-button\"\n                                color=\"primary\"\n                                (click)=\"accept()\">\n                            {{ 'eula.accept' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <ng-template #agreementIsDecline>\n        <div class=\"eula-decline\">\n            <blocked-ui-message [title]=\"'eula.sorry' | translate\">\n                <p translate [translateParams]=\"(licenseState.license|async)\">eula.acceptOrUninstall</p>\n                <button mat-raised-button\n                        (click)=\"eulaStatus = true\">\n                    {{ 'eula.back' | translate }}\n                </button>\n            </blocked-ui-message>\n        </div>\n    </ng-template>\n</div>\n","import { Component, ViewChild } from '@angular/core';\nimport { LoaderDirective } from 'app/utils/loader/loader.directive';\nimport { EulaService } from './eula.service';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport { AuthState } from 'app/services/auth-state';\nimport { LicenseState } from 'app/services/license-state';\n\n@Component({\n    selector: 'eula',\n    templateUrl: './eula.component.html',\n    styleUrls: ['./eula.component.scss'],\n})\n\nexport class EulaComponent {\n    @ViewChild(LoaderDirective, {static: true}) loader: LoaderDirective;\n    eulaStatus: boolean = true;\n    constructor(\n        public eulaService: EulaService,\n        public authState: AuthState,\n        public licenseState: LicenseState,\n    ) {}\n    @useLoader\n    public async accept() {\n        await this.eulaService.accept();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EulaComponent } from './eula.component';\nimport { I360TranslateModule } from 'app/utils/translate/translate.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { I360LoaderModule } from 'app/utils/loader/loader.module';\nimport {\n    I360BlockedUiMessageModule,\n} from 'app/utils/blocked-ui-message/blocked-ui-message.module';\nimport { Route, RouterModule } from '@angular/router';\nimport { EulaGuard } from './eula.guard';\n\nexport const EULA_ROUTE: Route = {\n    path: 'eula',\n    loadChildren: () => import('../eula/eula.module').then(m => m.I360EulaModule),\n    canActivate: [EulaGuard],\n};\n\n@NgModule({\n    imports: [\n        RouterModule.forChild([{\n            path: '',\n            pathMatch: 'full',\n            component: EulaComponent,\n        }]),\n        CommonModule,\n        I360TranslateModule,\n        MatButtonModule,\n        MatIconModule,\n        I360LoaderModule,\n        I360BlockedUiMessageModule,\n    ],\n    declarations: [EulaComponent],\n    exports: [EulaComponent],\n})\nexport class I360EulaModule {}\n","<div [i360-request]=\"featuresManagementService.getFeaturesManagementDefaults\"\n     (loaded)=\"counts = $event\">\n\n    <div class=\"i360-default-feature proactive\"\n         *ngIf=\"(featuresManagementService.allowed|async)?.proactive\">\n        <div>\n            <div class=\"i360-feature-title\">\n                {{ 'settings.featuresManagement.proactive' | translate }}\n            </div>\n            <div i360-description>\n                {{ 'settings.featuresManagement.headerDescription' | translate }}\n            </div>\n        </div>\n        <mat-slide-toggle\n                [checked]=\"counts.proactive\"\n                (change)=\"changeDefaultFeature({feature: 'proactive'}, $event.source)\">\n        </mat-slide-toggle>\n    </div>\n\n    <div class=\"i360-default-feature\"\n         *ngIf=\"(featuresManagementService.allowed|async)?.av\">\n        <div>\n            <div class=\"i360-feature-title\">\n                {{ 'settings.featuresManagement.cleanup' | translate }}\n            </div>\n            <div i360-description>\n                {{ 'settings.featuresManagement.headerDescription' | translate }}\n            </div>\n        </div>\n        <mat-slide-toggle\n                [checked]=\"counts.av\"\n                (change)=\"changeDefaultFeature({feature: 'av'}, $event.source)\">\n        </mat-slide-toggle>\n    </div>\n\n\n    <!--Waiting for new changes-->\n    <!--<div class=\"i360-default-feature\">-->\n        <!--<div>-->\n            <!--<div class=\"i360-feature-title\">-->\n                <!--{{ 'settings.featuresManagement.webshield' | translate }}-->\n            <!--</div>-->\n            <!--<div i360-description>-->\n                <!--{{ 'settings.featuresManagement.headerDescription' | translate }}-->\n            <!--</div>-->\n        <!--</div>-->\n        <!--<mat-slide-toggle-->\n                <!--[checked]=\"counts.webshield\"-->\n                <!--(change)=\"changeDefaultFeature(-->\n    <!--{feature: 'webshield'}, $event.source)\">-->\n        <!--</mat-slide-toggle>-->\n    <!--</div>-->\n    <!--</div>-->\n</div>\n","import { Component, ViewChild } from '@angular/core';\nimport { FeaturesManagementService } from 'app/services/features-management';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport { FeaturesStatus } from '@imunify360-api/features-management';\nimport { RequestDirective } from 'app/utils/table/request/request.directive';\nimport { ModalService } from 'app/utils/modals/modal.service';\nimport { NotificationsService } from 'app/services/notifications';\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\nimport { firstValueFrom, switchMap, tap } from 'rxjs';\n\n@Component({\n    selector: 'default-features',\n    templateUrl: './default-features.component.html',\n    styleUrls: ['./default-features.component.scss'],\n})\n\nexport class DefaultFeaturesComponent {\n    counts: FeaturesStatus = {\n        proactive: false,\n        av: false,\n    };\n    @ViewChild(RequestDirective, {static: true}) request: RequestDirective;\n\n    constructor(public featuresManagementService: FeaturesManagementService,\n                private modalService: ModalService,\n                private notifications: NotificationsService) {\n    }\n\n    public async changeDefaultFeature(data: { feature: string },\n                                      source: MatSlideToggle) {\n        await setTimeout(() => {\n            source.checked = !source.checked;\n        }, 1);\n        const action = source.checked ? 'enable' : 'disable';\n        if (!await this.modalService.confirm(`${action}-${data.feature}-default`,\n                [])) {\n            return;\n        }\n\n        await this.editFeature(action, data.feature);\n    }\n\n    @useLoader\n    private async editFeature(action: 'enable' | 'disable', feature: string): Promise<void> {\n        await firstValueFrom(this.featuresManagementService.editDefaultFeature({\n            action,\n            feature,\n        }).pipe(\n            tap(() => {\n                this.notifications.success(\n                    `notifications.editUserFeatures.notifications.success`,\n                    null,\n                    {feature, action},\n                );\n            }),\n            switchMap(() => this.request.load()),\n        ), { defaultValue: undefined });\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'i360-domains',\n    template: `\n        <ng-container>\n            <div class=\"i360-domains\">\n                <span *ngFor=\"let item of items.slice(0, allDomains ? undefined : maxShownDomains)\">\n                    {{ item }}\n                </span>\n            </div>\n            <div>\n                <a *ngIf=\"items.length > maxShownDomains && !allDomains\"\n                   (click)=\"allDomains = !allDomains\"\n                   class=\"i360-domains-button\">\n                        {{ 'settings.featuresManagement.showDomains'\n                            | translate: { size: items.length } }}\n                </a>\n                <a *ngIf=\"items.length > maxShownDomains && allDomains\"\n                   (click)=\"allDomains = !allDomains\"\n                   class=\"i360-domains-button\">\n                    {{ 'settings.featuresManagement.hideDomains' | translate }}\n                </a>\n            </div>\n        </ng-container>\n    `,\n    styles: [`\n        .i360-domains {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: flex-start;\n            align-content: center;\n        }\n        .i360-domains>span {\n            margin: 5px 5px 5px 0;\n            padding-right: 10px;\n        }\n    `],\n})\nexport class DomainsComponent {\n    @Input() items: string[];\n    allDomains = false;\n    maxShownDomains = 3;\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { FeaturesManagementLegacyComponent } from './legacy/legacy.component';\nimport { FeaturesManagementNativeComponent } from './native/native.component';\nimport { FeaturesManagementWrapperComponent } from './wrapper/wrapper.component';\nimport { DomainsComponent } from './domains.component';\nimport { DefaultFeaturesComponent } from './default-features/default-features.component';\nimport { CommonModule } from '@angular/common';\nimport { I360TableModule } from 'app/utils/table/table.module';\nimport { I360LoaderModule } from 'app/utils/loader/loader.module';\nimport { I360ValidationModule } from 'app/utils/validator/validation.module';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { I360TranslateModule } from 'app/utils/translate/translate.module';\nimport { I360DescriptionModule } from 'app/utils/description/description.module';\nimport { I360WarningMessageModule } from 'app/utils/warning-message/warning-message.module';\nimport { MatIconModule } from '@angular/material/icon';\nimport { I360ModalModule } from 'app/utils/modals/modal.module';\n\nconst publicDirectives = [\n    FeaturesManagementLegacyComponent,\n    FeaturesManagementNativeComponent,\n    FeaturesManagementWrapperComponent,\n    DomainsComponent,\n    DefaultFeaturesComponent,\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        I360TableModule,\n        I360LoaderModule,\n        I360ValidationModule,\n        MatSlideToggleModule,\n        I360TranslateModule,\n        I360DescriptionModule,\n        I360WarningMessageModule,\n        MatIconModule,\n        I360ModalModule,\n    ],\n    declarations: [\n        ...publicDirectives,\n    ],\n    exports: [\n        ...publicDirectives,\n    ],\n})\nexport class I360FeaturesManagementModule {}\n","<div>\n    <i360-header *ngIf=\"(licenseState.license|async).product < Product.imunify360\"\n            [subheader]=\"(licenseState.license|async).product === Product.imunify360\n            ? ''\n            : ('settings.featuresManagement.description' | translate:(licenseState.license|async)) + '\\n' + ('settings.featuresManagement.descriptionNote' | translate)\">\n        {{ 'settings.menu.featuresManagement' | translate}}\n    </i360-header>\n    <i360-message #message\n                  [theme]=\"message.Theme.blue\"\n                  icon=\"icon-bell-in-circle\"\n                  *ngIf=\"(featuresManagementService.native|async)?.supported\">\n        <span>\n            {{'settings.featuresManagement.newFeaturesManagement.supportedText' | translate}}\n        </span>\n        &nbsp; <!--browser consume spaces around links-->\n        <a class=\"i360-dashboard-link\" (click)=\"enableNative()\">\n            {{ 'notifications.details' | translate }}\n        </a>\n    </i360-message>\n    <div class=\"canvas\">\n        <default-features></default-features>\n    </div>\n\n    <div> <!-- wrapped for loader -->\n        <i360-data-view [i360-request]=\"featuresManagementService.getFeaturesManagement\">\n            <i360-widget i360-paginator [simplePagination]=\"true\"></i360-widget>\n            <i360-widget i360-limit></i360-widget>\n            <i360-widget i360-search></i360-widget>\n            <i360-table i360-main-view i360-sortable [defaultValue]=\"['user-']\">\n                <i360-checkbox-column labelField=\"name\" #checkboxColumn></i360-checkbox-column>\n                <i360-column>\n                    <i360-sort-header field=\"user\">\n                        {{ 'settings.featuresManagement.name' | translate }}\n                    </i360-sort-header>\n                    <span *i360HostTemplate=\"let item\">{{item.name}}</span>\n                </i360-column>\n                <i360-column headerText=\"settings.featuresManagement.domains\">\n                    <i360-domains *i360HostTemplate=\"let item\" [items]=\"item.domains\">\n                    </i360-domains>\n                </i360-column>\n\n                <i360-slide-column\n                        headerText=\"{{ 'settings.featuresManagement.proactive' | translate }}\"\n                        *ngIf=\"(featuresManagementService.allowed|async)?.proactive\"\n                        bodyField=\"proactive\"\n                        (statusChange)=\"changeFeature($event)\">\n                    <i360-sort-header field=\"proactive\">\n                        {{ 'settings.featuresManagement.proactive' | translate }}\n                    </i360-sort-header>\n                </i360-slide-column>\n\n                <i360-slide-column headerText=\"{{ 'settings.featuresManagement.cleanup' | translate }}\"\n                                   *ngIf=\"(featuresManagementService.allowed|async)?.av\"\n                                   bodyField=\"av\"\n                                   (statusChange)=\"changeFeature($event)\">\n                    <i360-sort-header field=\"av\">\n                        {{ 'settings.featuresManagement.cleanup' | translate }}\n                    </i360-sort-header>\n                </i360-slide-column>\n            </i360-table>\n        </i360-data-view>\n    </div>\n</div>\n\n<ng-template let-data #newFeaturesManagementModal>\n    <i360-modal-content\n            i360-dialog-template\n            confirmText=\"utils.modals.confirm.confirms.new-features-management\">\n        <ng-container modal-title>{{ 'utils.modals.confirm.titles.new-features-management' | translate }}</ng-container>\n        <ng-container modal-body>\n            <p>{{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-1' | translate: {packageName: packageName} }}</p>\n            <p>\n                <b>{{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-2' | translate: {packageName: packageName} | translateCut: 0 }}</b> <br>\n                {{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-2' | translate: {packageName: packageName} | translateCut: 1 }}\n            </p>\n            <p>\n                {{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-3' | translate: {packageName: packageName} | translateCut: 0 }} <br>\n                <b>{{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-3' | translate: {packageName: packageName} | translateCut: 1 }}</b> <br>\n                <b>{{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-3' | translate: {packageName: packageName} | translateCut: 2 }}</b>\n            </p>\n            <p> {{ 'settings.featuresManagement.newFeaturesManagement.modalText.modalText-4' | translate }} </p>\n        </ng-container>\n    </i360-modal-content>\n</ng-template>\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { AppState } from 'app/core/app.service';\nimport { FeaturesManagementService } from 'app/services/features-management';\nimport {\n    FeaturesManagementItem,\n} from '@imunify360-api/features-management';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport { RequestDirective } from 'app/utils/table/request/request.directive';\nimport { ModalService } from 'app/utils/modals/modal.service';\nimport { firstValueFrom, switchMap, tap, catchError, of } from 'rxjs';\nimport { LicenseState } from 'app/services/license-state';\nimport { Product } from '@imunify360-api/license';\nimport { GroupNotificationsService } from 'app/services/group-notifications';\n\n@Component({\n    selector: 'features-management-legacy',\n    styleUrls: ['./legacy.component.scss'],\n    templateUrl: './legacy.component.html',\n})\n\nexport class FeaturesManagementLegacyComponent {\n    Product = Product;\n    packageName = IMUNIFY_PACKAGE;\n    @ViewChild(RequestDirective, {static: true}) request: RequestDirective;\n    @ViewChild('newFeaturesManagementModal', {static: true})\n    public newFeaturesManagementModal: TemplateRef<any>;\n\n    constructor(public appState: AppState,\n                public licenseState: LicenseState,\n                public featuresManagementService: FeaturesManagementService,\n                private modalService: ModalService,\n                private groupNotifications: GroupNotificationsService) {}\n\n    @useLoader\n    public async enableNative() {\n        if (!await this.modalService.open(this.newFeaturesManagementModal)) {\n            return;\n        }\n        await firstValueFrom(\n            this.featuresManagementService.enableNative().pipe(\n                switchMap(() => this.featuresManagementService.getNativeStatus()),\n                catchError(() => of(null)),\n            ),\n            { defaultValue: undefined }\n        );\n    }\n\n    @useLoader\n    public async changeFeature(data: {\n        state: boolean,\n        status: string,\n        items: FeaturesManagementItem[],\n    }) {\n        const action = !data.state ? 'enable' : 'disable';\n        const userList = data.items\n            .filter(x => x[`${data.status}`] === data.state)\n            .map(x => x.name);\n        if (!await this.modalService.confirm(`${action}-${data.status}`, userList)) {\n            return;\n        }\n        await firstValueFrom(this.featuresManagementService.editUserFeatures({\n            action: action,\n            feature: data.status,\n            items: userList,\n        }).pipe(\n            tap((result) => {\n                this.groupNotifications.forAction('edit-user-features', result.data.items, {\n                    feature: data.status,\n                    action,\n                });\n            }),\n            switchMap(() => this.request.load()),\n        ), { defaultValue: undefined });\n    }\n}\n","<div class=\"i360-features-management-disabled\">\n    <mat-icon svgIcon=\"new-features-management\"></mat-icon>\n    <div class=\"description\">\n        <p class=\"description-title\">\n            {{ t + (isMyImunify? 'myImunify.title' : 'packageExtensions.title') | translate: {packageName: packageName} }}\n        </p>\n        <p *ngIf=\"isMyImunify\">\n            {{ t + 'myImunify.description' | translate | translateCut: 0 }}\n            <a href=\"https://docs.imunify360.com/myimunify/#configuring-the-billing-system-whmcs-side\" target=\"_blank\">\n                {{ t + 'myImunify.description' | translate | translateCut: 1 }}\n            </a>\n            {{ t + 'myImunify.description' | translate | translateCut: 2 }}\n        </p>\n        <p *ngIf=\"!isMyImunify\">\n            {{ t + 'packageExtensions.description' | translate }}\n            {{ t + 'descriptionRest' | translate  | translateCut: 0 }}\n            <a href=\"../../../scripts/editpkg2\" target=\"_blank\">\n                {{ t + 'descriptionRest' | translate  | translateCut: 1 }}\n            </a>\n            {{ t + 'descriptionRest' | translate  | translateCut: 2 }}\n            <a href=\"../../../scripts4/listaccts\" target=\"_blank\">\n                {{ t + 'descriptionRest' | translate  | translateCut: 3 }}\n            </a>\n            {{ t + 'descriptionRest' | translate  | translateCut: 4 }}\n            <a href=\"https://documentation.cpanel.net/display/DD/Guide+to+Package+Extensions+-+Data+Behavior+and+Changes\" target=\"_blank\">\n                {{ t + 'descriptionRest' | translate  | translateCut: 5 }}\n            </a>\n            {{ t + 'descriptionRest' | translate  | translateCut: 6 }}\n        </p>\n        <p *ngIf=\"(licenseState.license|async)?.product !== Product.imunify360\">\n            {{ 'settings.featuresManagement.descriptionNote' | translate }}\n        </p>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Product } from '@imunify360-api/license';\nimport { LicenseState } from 'app/services/license-state';\n\n\n@Component({\n    selector: 'features-management-native',\n    styleUrls: ['./native.component.scss'],\n    templateUrl: './native.component.html',\n})\nexport class FeaturesManagementNativeComponent {\n    Product = Product;\n    packageName = IMUNIFY_PACKAGE;\n    t = 'settings.featuresManagement.newFeaturesManagement.featuresManagementDisabled.';\n    @Input() isMyImunify: boolean;\n\n    constructor(\n        public licenseState: LicenseState,\n    ) {}\n}\n","<div i360Loader>\n    <ng-container *ngIf=\"featuresManagementService.native | async as nativeStatus\">\n        <features-management-native\n            [isMyImunify]=\"(config.changes|async)?.MY_IMUNIFY.enable\"\n            *ngIf=\"(nativeStatus.enabled || (config.changes|async)?.MY_IMUNIFY.enable) else legacy\">\n        </features-management-native>\n        <ng-template #legacy>\n            <features-management-legacy></features-management-legacy>\n        </ng-template>\n    </ng-container>\n</div>\n","import { Component } from '@angular/core';\nimport { FeaturesManagementService } from 'app/services/features-management';\nimport { I360Config } from 'app/utils/config/config';\n\n@Component({\n    selector: 'features-management',\n    templateUrl: './wrapper.component.html',\n})\n\nexport class FeaturesManagementWrapperComponent {\n    constructor(\n        public featuresManagementService: FeaturesManagementService,\n        public config: I360Config,\n    ) {}\n}\n","import {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    ElementRef,\n    OnDestroy,\n} from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\n\n\n@Directive({\n    selector: '[i360-accordion]',\n    host: {\n        '[class.i360-accordioned]': 'true',\n        '[class.i360-expended]': 'expended',\n    },\n})\nexport class AccordionDirective implements AfterContentInit, OnDestroy {\n    onToggle = Subscription.EMPTY;\n    expended = false;\n    @ContentChild('trigger', {static: true}) trigger: ElementRef;\n\n    ngAfterContentInit(): void {\n        this.onToggle = fromEvent(this.trigger.nativeElement, 'click')\n            .subscribe(() => {\n                this.expended = !this.expended;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.onToggle.unsubscribe();\n    }\n}\n","<form class=\"card-container settings-container\"\n      [formGroup]=\"form\"\n      (i360Submit)=\"submit()\"\n>\n    <div class=\"canvas i360-visible-save-button\" i360Loader>\n        <div class=\"input_group\" formGroupName=\"admin\" *ngIf=\"is360Package\">\n            <i360-settings-field\n                inputTitle=\"{{ 'settings.notification.emails.label' | translate }}\"\n                description=\"{{ 'settings.notification.emails.description' | translate }}\">\n                <cl-text-input>\n                    <textarea matInput\n                              cdkTextareaAutosize\n                              cdkAutosizeMinRows=\"3\"\n                              cdkAutosizeMaxRows=\"7\"\n                              formControlName=\"default_emails\"\n                              commaSeparatedInput>\n                    </textarea>\n                </cl-text-input>\n            </i360-settings-field>\n            <i360-settings-field\n                inputTitle=\"{{ 'settings.notification.from.label' | translate }}\"\n                description=\"{{ 'settings.notification.from.description' | translate }}\">\n                <cl-text-input>\n                        <input\n                            matInput\n                            formControlName=\"notify_from_email\"\n                        >\n                </cl-text-input>\n            </i360-settings-field>\n        </div>\n        <ng-container formGroupName=\"rules\">\n            <div class=\"input_group\" i360-accordion *ngIf=\"is360Package\">\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.realtimeScanMalwareDetected.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.realtimeScanMalwareDetected.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"REALTIME_MALWARE_FOUND\">\n                    <ng-container formGroupName=\"ADMIN\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableEmailNotification.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableEmailNotification.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.REALTIME_MALWARE_FOUND.ADMIN.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.notifyEvery.mins.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.notifyEvery.mins.description' | translate }}\">\n                            <input formControlName=\"period\">\n                        </i360-settings-field>\n                        <i360-notification-emails\n                            *ngIf=\"form.value?.rules.REALTIME_MALWARE_FOUND.ADMIN.enabled\"\n                            formControlName=\"admin_emails\">\n                        </i360-notification-emails>\n                    </ng-container>\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.REALTIME_MALWARE_FOUND.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.notifyEvery.sec.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.notifyEvery.sec.description' | translate }}\">\n                            <input formControlName=\"period\">\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.REALTIME_MALWARE_FOUND.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.userScanStarted.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.userScanStarted.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"USER_SCAN_STARTED\">\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.USER_SCAN_STARTED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                              <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\" >\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.customScanStarted.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.customScanStarted.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"CUSTOM_SCAN_STARTED\">\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.CUSTOM_SCAN_STARTED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.userScanFinished.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.userScanFinished.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"USER_SCAN_FINISHED\">\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.USER_SCAN_FINISHED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.customScanFinished.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.customScanFinished.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"CUSTOM_SCAN_FINISHED\">\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.CUSTOM_SCAN_FINISHED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.customScanMalwareFound.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.customScanMalwareFound.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"CUSTOM_SCAN_MALWARE_FOUND\">\n                    <ng-container formGroupName=\"ADMIN\" *ngIf=\"is360Package\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableEmailNotification.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableEmailNotification.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-notification-emails\n                            *ngIf=\"form.value?.rules.CUSTOM_SCAN_MALWARE_FOUND.ADMIN.enabled\"\n                            formControlName=\"admin_emails\">\n                        </i360-notification-emails>\n                    </ng-container>\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.CUSTOM_SCAN_MALWARE_FOUND.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion>\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.userScanMalwareFound.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.userScanMalwareFound.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"USER_SCAN_MALWARE_FOUND\">\n                    <ng-container formGroupName=\"ADMIN\" *ngIf=\"is360Package\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableEmailNotification.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableEmailNotification.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-notification-emails\n                            *ngIf=\"form.value?.rules.USER_SCAN_MALWARE_FOUND.ADMIN.enabled\"\n                            formControlName=\"admin_emails\">\n                        </i360-notification-emails>\n                    </ng-container>\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.USER_SCAN_MALWARE_FOUND.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"input_group\" i360-accordion *ngIf=\"is360Package\">\n                <div class=\"group_name\" #trigger>\n                    <mat-icon class=\"i360-icon-arrow-up\">\n                        keyboard_arrow_right\n                    </mat-icon>\n                    {{ 'settings.notification.groups.scriptBlocked.label' | translate }}\n                    <mat-icon\n                        matTooltip=\"{{ 'settings.notification.groups.scriptBlocked.tooltip' | translate }}\">\n                        info\n                    </mat-icon>\n                </div>\n                <div class=\"input_group items\" formGroupName=\"SCRIPT_BLOCKED\">\n                    <ng-container formGroupName=\"ADMIN\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableEmailNotification.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableEmailNotification.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.SCRIPT_BLOCKED.ADMIN.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.notifyEvery.mins.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.notifyEvery.mins.description' | translate }}\">\n                            <input formControlName=\"period\">\n                        </i360-settings-field>\n                        <i360-notification-emails\n                            *ngIf=\"form.value?.rules.SCRIPT_BLOCKED.ADMIN.enabled\"\n                            formControlName=\"admin_emails\">\n                        </i360-notification-emails>\n                    </ng-container>\n                    <ng-container formGroupName=\"SCRIPT\">\n                        <i360-settings-field\n                            inputTitle=\"{{ 'settings.notification.fields.enableScriptExecute.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.enableScriptExecute.description' | translate }}\">\n                            <mat-slide-toggle color=\"primary\" formControlName=\"enabled\"></mat-slide-toggle>\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.SCRIPT_BLOCKED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.notifyEvery.sec.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.notifyEvery.sec.description' | translate }}\">\n                            <input formControlName=\"period\">\n                        </i360-settings-field>\n                        <i360-settings-field\n                            *ngIf=\"form.value?.rules.SCRIPT_BLOCKED.SCRIPT.enabled\"\n                            inputTitle=\"{{ 'settings.notification.fields.runScript.label' | translate }}\"\n                            description=\"{{ 'settings.notification.fields.runScript.description' | translate }}\">\n                            <cl-text-input>\n                                <textarea\n                                    matInput\n                                    cdkTextareaAutosize\n                                    cdkAutosizeMinRows=\"1\"\n                                    cdkAutosizeMaxRows=\"7\"\n                                    formControlName=\"scripts\"\n                                    splitBy=\"byEnter\"\n                                    commaSeparatedInput>\n                                </textarea>\n                            </cl-text-input>\n                        </i360-settings-field>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n        <div class=\"tools\">\n            <button id=\"update-config\"\n                    mat-raised-button\n                    type=\"submit\">\n                {{ 'settings.saveSettings' | translate }}\n            </button>\n        </div>\n    </div>\n</form>\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport { Subject, filter, map, takeUntil, tap, firstValueFrom } from 'rxjs';\nimport { SettingsService } from 'app/services/settings';\nimport { NotificationsService } from 'app/services/notifications';\nimport { LoaderDirective } from 'app/utils/loader/loader.directive';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport { I360Validators } from 'app/utils/validator/validators';\nimport { Validators } from '@angular/forms';\nimport { DEFAULT_KEY } from './notification-emails.component';\nimport { Package } from '@imunify360-api/license';\nimport { configsEqual } from 'app/utils/configs-equal';\nimport { testMode } from 'app/services/misc';\n\n\n@Component({\n    selector: 'settings-notification',\n    templateUrl: './settings-notification.component.html',\n})\nexport class SettingsNotificationComponent implements OnInit, OnDestroy {\n    is360Package = IMUNIFY_PACKAGE === Package.imunify360;\n    destroyed = new Subject<void>();\n    localeExists: boolean = false;\n    @ViewChild(LoaderDirective, {static: true}) public loader: LoaderDirective;\n    public form = this.formBuilder.group(this.getSchema());\n    originalConfig;\n\n    public constructor(\n        private formBuilder: I360FormBuilder,\n        private settingsService: SettingsService,\n        private notifications: NotificationsService,\n        public translate: TranslateService,\n    ) {}\n\n    @useLoader\n    async ngOnInit() {\n        await firstValueFrom(this.settingsService.notificationShow().pipe(\n            map(res => res.data.items),\n            takeUntil(this.destroyed),\n            filter(configFromBackend => configFromBackend !== undefined),\n            map(configFromBackend => {\n                const config = JSON.parse(JSON.stringify(configFromBackend));\n                this.originalConfig = config;\n                if ('admin' in config && 'locale' in config.admin) {\n                    delete config.admin.locale;\n                    this.localeExists = true;\n                }\n                for (let rule of Object.keys(config.rules)) {\n                    if ('ADMIN' in config.rules[rule] && 'period' in config.rules[rule]['ADMIN']) {\n                        config.rules[rule]['ADMIN']['period']\n                            = Math.ceil(config.rules[rule]['ADMIN']['period'] / 60);\n                    }\n                }\n                this.form.patchValue(config);\n            }),\n        ), { defaultValue: undefined });\n    }\n\n    confirmReload() {\n        const original = this.originalConfig\n        const current = this.normalizedForm(false);\n        this.removeDefaults(original);\n        this.removeDefaults(current);\n        let confirmationNeeded = false;\n        if (IMUNIFY_PACKAGE === Package.imunify360) {\n            delete original?.admin?.locale;\n            delete current?.admin?.locale;\n            confirmationNeeded ||= !configsEqual({admin: original?.admin}, {admin: current?.admin});\n        }\n        // NOTE: `admin` and `rules` are checked separately due to limitations of `configsEqual`.\n        // It only skips missing on one level.\n        confirmationNeeded ||= !configsEqual(original.rules, current.rules);\n        // split from `I360Config.formConfirmed`, because this component doesn't use `I360Config`\n        // TODO: do not duplicate this logic\n        return confirmationNeeded\n            && !localStorage.getItem('I360_UNSAVED_CONFIG_LEAVING_PAGE_CONFIRM_DISABLED')\n            && !testMode('SettingsNotificationComponent')\n            && confirm(this.translate.translate.instant('reload-page'));\n    }\n\n    removeDefaults = (obj) => {\n        Object.keys(obj || {}).forEach(key => {\n            if (['scripts', 'admin_emails'].includes(key)\n                    && Array.isArray(obj[key]) && !obj[key].length) {\n                delete obj[key];\n            }\n            if (key === 'period' && obj[key] === 1) {\n                delete obj[key];\n            }\n            if (obj[key] && typeof obj[key] === 'object') {\n                this.removeDefaults(obj[key]);\n            }\n        })\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n\n    private normalizedForm(normalizePeriod = true) {\n        const notificationConfig = JSON.parse(JSON.stringify(this.form.value));\n        if ('admin' in notificationConfig && !this.localeExists) {\n            notificationConfig.admin.locale = this.translate.currentLang;\n        }\n        if (normalizePeriod) {\n            for (const rule of this.adminGenerator()) {\n                if ('period' in notificationConfig.rules[rule]['ADMIN']) {\n                    notificationConfig.rules[rule]['ADMIN']['period'] *= 60;\n                }\n            }\n        }\n        return notificationConfig;\n    }\n\n    @useLoader\n    async submit() {\n        this.originalConfig = JSON.parse(JSON.stringify(this.form.value));\n        await firstValueFrom(this.settingsService\n            .saveNotificationSettings(this.normalizedForm()).pipe(\n                tap(() => this.notifications.success(\n                    'settings.successSaveMessage',\n                    void 0,\n                )),\n            ), { defaultValue: undefined });\n    }\n\n    * adminGenerator() {\n        const notificationConfig = JSON.parse(JSON.stringify(this.form.value));\n        for (let rule of Object.keys(notificationConfig.rules)) {\n            if ('ADMIN' in notificationConfig.rules[rule]) {\n                yield rule;\n            }\n        }\n    }\n\n    private getSchema() {\n        const periodControl = () => {\n            return {\n                period: this.formBuilder.control(1,\n                    [\n                        I360Validators.integer(true),\n                        Validators.min(1),\n                    ],\n                ),\n            };\n        };\n\n        const getScriptSchema = (period: boolean = false) => {\n            return {\n                SCRIPT: this.formBuilder.group(\n                    {\n                        scripts: this.formBuilder.control<string[]>([], [\n                            I360Validators.required('script'),\n                            I360Validators.listOfAbsolutePaths,\n                        ]),\n                        enabled: this.formBuilder.control(false),\n                        ...(period ? periodControl() : {}),\n                    },\n                ),\n            };\n        };\n\n        const getAdminSchema = (period: boolean = false) => {\n            const enabled = this.formBuilder.control(false);\n            const adminEmails = this.formBuilder.control<string[]>([], []);\n            enabled.valueChanges.pipe(\n                takeUntil(this.destroyed),\n            ).subscribe(() => {\n                if (enabled.value && !adminEmails.value.includes(DEFAULT_KEY)) {\n                    adminEmails.setValue([...adminEmails.value, DEFAULT_KEY]);\n                }\n            });\n            return {\n                ADMIN: this.formBuilder.group(\n                    {\n                        admin_emails: adminEmails,\n                        enabled: enabled,\n                        ...(period ? periodControl() : {}),\n                    },\n                ),\n            };\n        };\n\n        const getNotificationScanDetectFilds = (period: boolean = false) => {\n            return {\n                ...getAdminSchema(period),\n                ...getScriptSchema(period),\n            };\n        };\n\n        if (this.is360Package) {\n            return {\n                admin: this.formBuilder.group({\n                    default_emails: this.formBuilder.control<string[]>([], [\n                        I360Validators.emails,\n                    ]),\n                    notify_from_email: this.formBuilder.control<string>('', [\n                        I360Validators.required('email'), I360Validators.email,\n                    ]),\n                }),\n                rules: this.formBuilder.group({\n                    REALTIME_MALWARE_FOUND: this.formBuilder.group(\n                        getNotificationScanDetectFilds(true),\n                    ),\n                    USER_SCAN_STARTED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_STARTED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    USER_SCAN_FINISHED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_FINISHED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_MALWARE_FOUND: this.formBuilder.group(\n                        getNotificationScanDetectFilds(false),\n                    ),\n                    USER_SCAN_MALWARE_FOUND: this.formBuilder.group(\n                        getNotificationScanDetectFilds(false),\n                    ),\n                    SCRIPT_BLOCKED: this.formBuilder.group(\n                        getNotificationScanDetectFilds(true),\n                    ),\n                }),\n            };\n        } else {\n            return {\n                rules: this.formBuilder.group({\n                    USER_SCAN_STARTED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_STARTED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    USER_SCAN_FINISHED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_FINISHED: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    CUSTOM_SCAN_MALWARE_FOUND: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                    USER_SCAN_MALWARE_FOUND: this.formBuilder.group(\n                        getScriptSchema(),\n                    ),\n                }),\n            };\n        }\n    }\n}\n","import { Route } from '@angular/router';\nimport { UnsavedConfigRouteGuard } from 'app/core/unsaved-route-guard';\nimport { SettingsNotificationComponent } from './settings-notification.component';\n\nexport const SETTINGS_NOTIFICATION_ROUTE: Route = {\n    path: 'notifications',\n    component: SettingsNotificationComponent,\n    canDeactivate: [UnsavedConfigRouteGuard],\n};\n","import { NgModule } from '@angular/core';\nimport { AccordionDirective } from 'app/components/settings/notifications/accordion.directive';\nimport {\n    SettingsNotificationComponent,\n} from 'app/components/settings/notifications/settings-notification.component';\nimport {\n    I360NotificationEmailsComponent,\n} from 'app/components/settings/notifications/notification-emails.component';\nimport { I360ValidationModule } from 'app/utils/validator/validation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport {\n    I360CommaSeparatedInputModule,\n} from 'app/utils/comma-separated-input/comma-separated-input.module';\nimport { I360LoaderModule } from 'app/utils/loader/loader.module';\nimport { TextInputModule } from 'app/components/text-input/text-input.module';\nimport { I360TranslateModule } from '../../../utils/translate/translate.module';\nimport { I360SettingsModule } from '../settings.module';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        ReactiveFormsModule,\n        I360TranslateModule,\n        I360SettingsModule,\n        CommonModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatSliderModule,\n        MatTooltipModule,\n        I360CommaSeparatedInputModule,\n        I360ValidationModule,\n        I360LoaderModule,\n        MatCheckboxModule,\n        TextInputModule,\n    ],\n    declarations: [\n        AccordionDirective,\n        I360NotificationEmailsComponent,\n        SettingsNotificationComponent,\n    ],\n})\nexport class SettingsNotificationModule {}\n","import { Route } from '@angular/router';\n\nexport const SUPPORT_ROUTE: Route = {\n    path: 'support',\n    loadChildren: () => import('./support.module').then(m => m.I360SupportModule),\n};\n","import { Injectable } from '@angular/core';\nimport {\n    FeaturesManagementAPI,\n    FeaturesManagementItem,\n    FeaturesStatus,\n    NativeFeaturesManagementStatus,\n} from '@imunify360-api/features-management';\nimport { cache } from 'app/utils/cache';\nimport { Observable, Subject, map, tap } from 'rxjs';\nimport { XHR } from 'app/utils/xhr/xhr';\n\n@Injectable()\nexport class FeaturesManagementService {\n    constructor(public xhr: XHR) {}\n\n    getNativeStatusRaw = this.xhr.rx(FeaturesManagementAPI.nativeStatus);\n    enableNative = this.xhr.rx(FeaturesManagementAPI.nativeEnable);\n    getAllowed = this.xhr.rx(FeaturesManagementAPI.allowed);\n    getFeaturesManagement = this.xhr.wrap(this.xhr.rx(FeaturesManagementAPI.list),\n        FeaturesManagementItem);\n    getFeaturesManagementDefaults = this.xhr.rx(FeaturesManagementAPI.defaults);\n    editUserFeatures = this.xhr.rx(FeaturesManagementAPI.editUserFeatures);\n    editDefaultFeature = this.xhr.rx(FeaturesManagementAPI.editDefaultFeature);\n\n    forceNativeStatusUpdate = new Subject<NativeFeaturesManagementStatus>();\n    native: Observable<NativeFeaturesManagementStatus> = this.getNativeStatus().pipe(\n        map(response => response.data.items),\n        cache(300, this.forceNativeStatusUpdate),\n    );\n    allowed = this.getAllowed().pipe(\n        map((res): FeaturesStatus => {\n            return res.data.items.reduce((res, next) => {\n                res[next] = true;\n                return res;\n            }, {}) as FeaturesStatus;\n        }),\n        cache(300),\n    );\n\n    getNativeStatus() {\n        return this.getNativeStatusRaw().pipe(\n            tap(response => this.forceNativeStatusUpdate.next(response.data.items)),\n        );\n    }\n}\n\n","import { Component, Input } from '@angular/core';\n\n\n@Component({\n    selector: 'blocked-ui-message',\n    template: `\n        <div class=\"blocked-ui-message\">\n            <mat-icon svgIcon=\"logo-grey\" class=\"logo-grey\"></mat-icon>\n            <div role=\"heading\" aria-level=\"1\">{{ title }}</div>\n            <ng-content></ng-content>\n        </div>\n    `,\n    styleUrls: ['./blocked-ui-message.component.scss'],\n})\n\nexport class BlockedUiMessageComponent {\n    @Input() title: string = '';\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    BlockedUiMessageComponent,\n} from './blocked-ui-message.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MatIconModule,\n    ],\n    declarations: [BlockedUiMessageComponent],\n    exports: [\n        BlockedUiMessageComponent,\n    ],\n})\nexport class I360BlockedUiMessageModule {}\n","import { I360Validators } from '../validator/validators';\nimport { ConfigTypeExtractingHelper, PermissionsType } from './misc';\nimport { ScheduleInterval } from '@imunify360-api/settings';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport { Validators } from '@angular/forms';\n\nexport const getSchema = (formBuilder: I360FormBuilder) => {\n    return {\n        ERROR_REPORTING: formBuilder.group({\n            enable: formBuilder.control(true),\n        }),\n        MALWARE_SCAN_SCHEDULE: formBuilder.group({\n            interval: formBuilder.control<ScheduleInterval | null>({\n                value: null,\n                allowedValues: [{\n                    value: ScheduleInterval.none,\n                    title: 'settings.malware.scheduledScanning.interval.options.none',\n                }, {\n                    value: ScheduleInterval.day,\n                    title: 'settings.malware.scheduledScanning.interval.options.day',\n                }, {\n                    value: ScheduleInterval.week,\n                    title: 'settings.malware.scheduledScanning.interval.options.week',\n                }, {\n                    value: ScheduleInterval.month,\n                    title: 'settings.malware.scheduledScanning.interval.options.month',\n                }],\n            }, I360Validators.required('schedule_type')),\n            day_of_month: formBuilder.control<number>(null, [\n                I360Validators.integer(true), Validators.min(1), Validators.max(31),\n            ]),\n            day_of_week: formBuilder.control<number | null>({\n                value: null,\n                allowedValues: Array.from({length: 7}, (v, i) => i),\n            }, I360Validators.required('')),\n            hour: formBuilder.control<number | null>({\n                value: null,\n                allowedValues: Array.from({length: 24}, (v, i) => i),\n            }, I360Validators.required('')),\n        }),\n        MALWARE_CLEANUP: formBuilder.group({\n            trim_file_instead_of_removal: formBuilder.control(true),\n            keep_original_files_days: formBuilder.control(14,\n                [I360Validators.integer(true), Validators.min(1)]),\n        }),\n        MALWARE_SCANNING: formBuilder.group({\n            rapid_scan: formBuilder.control(false),\n            sends_file_for_analysis: formBuilder.control(true),\n            detect_elf: formBuilder.control(false),\n            hyperscan: formBuilder.control(false),\n        }),\n        MALWARE_SCAN_INTENSITY: formBuilder.group({\n            cpu: formBuilder.control(7),\n            io: formBuilder.control(7),\n        }),\n        MY_IMUNIFY: formBuilder.group({\n            enable: formBuilder.control(false),\n            purchase_page_url: formBuilder.control<string>(''),\n        }),\n    };\n};\n\nconst a = () => (null as any as I360FormBuilder).group(getSchema(null as any));\nexport type AntivirusConfigType = ConfigTypeExtractingHelper<typeof a> & PermissionsType;\n"],"names":["EulaGuard","constructor","eulaService","router","canActivate","route","state","this","licenseState","eula","value","isFailed","navigate","i0","i1","i2","factory","ɵfac","EulaInterceptor","injector","authState","intercept","req","next","handle","pipe","switchMap","event","isAdmin","HttpResponse","body","data","eulaStatus","undefined","get","EulaService","checkEulaStatus","EMPTY","of","postOnly","_r4","ctx_r3","ctx_r5","accept","ctx_r0","message","license","text","_r7","ctx_r6","ctx_r2","EulaComponent","_this","_asyncToGenerator","i3","selectors","viewQuery","rf","ctx","LoaderDirective","EulaComponent_ng_container_1_Template","EulaComponent_ng_template_3_Template","_r1","useLoader","EULA_ROUTE","path","loadChildren","then","m","I360EulaModule","RouterModule","pathMatch","component","CommonModule","I360TranslateModule","MatButtonModule","MatIconModule","I360LoaderModule","I360BlockedUiMessageModule","$event","_r3","changeDefaultFeature","feature","source","counts","proactive","_r5","ctx_r4","ctx_r1","av","DefaultFeaturesComponent","featuresManagementService","modalService","notifications","setTimeout","checked","action","confirm","editFeature","_this2","firstValueFrom","editDefaultFeature","tap","success","request","load","defaultValue","RequestDirective","DefaultFeaturesComponent_div_1_Template","DefaultFeaturesComponent_div_3_Template","getFeaturesManagementDefaults","tmp_1_0","allowed","tmp_2_0","item_r3","allDomains","_c0","items","length","DomainsComponent","maxShownDomains","inputs","decls","vars","consts","template","DomainsComponent_span_2_Template","DomainsComponent_a_4_Template","DomainsComponent_a_5_Template","slice","FeaturesManagementLegacyComponent","FeaturesManagementNativeComponent","FeaturesManagementWrapperComponent","I360FeaturesManagementModule","I360TableModule","I360ValidationModule","MatSlideToggleModule","I360DescriptionModule","I360WarningMessageModule","I360ModalModule","product","Product","imunify360","_r11","ctx_r10","enableNative","_r9","Theme","blue","item_r12","name","item_r13","domains","_r15","ctx_r14","changeFeature","_r17","ctx_r16","_c1","ctx_r8","packageName","appState","groupNotifications","IMUNIFY_PACKAGE","open","newFeaturesManagementModal","getNativeStatus","catchError","userList","filter","x","status","map","editUserFeatures","result","forAction","i4","i5","FeaturesManagementLegacyComponent_i360_header_1_Template","FeaturesManagementLegacyComponent_i360_message_3_Template","FeaturesManagementLegacyComponent_span_19_Template","FeaturesManagementLegacyComponent_i360_domains_21_Template","FeaturesManagementLegacyComponent_i360_slide_column_22_Template","FeaturesManagementLegacyComponent_i360_slide_column_24_Template","FeaturesManagementLegacyComponent_ng_template_26_Template","native","supported","getFeaturesManagement","_c2","tmp_6_0","tmp_7_0","t","isMyImunify","FeaturesManagementNativeComponent_p_6_Template","FeaturesManagementNativeComponent_p_7_Template","FeaturesManagementNativeComponent_p_8_Template","tmp_3_0","tmp_0_0","config","changes","MY_IMUNIFY","enable","FeaturesManagementWrapperComponent_ng_container_1_features_management_native_1_Template","FeaturesManagementWrapperComponent_ng_container_1_ng_template_3_Template","nativeStatus_r1","enabled","FeaturesManagementWrapperComponent_ng_container_1_Template","AccordionDirective","onToggle","Subscription","expended","ngAfterContentInit","fromEvent","trigger","nativeElement","subscribe","ngOnDestroy","unsubscribe","contentQueries","dirIndex","SettingsNotificationComponent_div_4_i360_settings_field_16_Template","SettingsNotificationComponent_div_4_i360_notification_emails_17_Template","SettingsNotificationComponent_div_4_i360_settings_field_23_Template","SettingsNotificationComponent_div_4_i360_settings_field_24_Template","form","rules","REALTIME_MALWARE_FOUND","ADMIN","SCRIPT","SettingsNotificationComponent_ng_container_84_i360_notification_emails_5_Template","ctx_r11","CUSTOM_SCAN_MALWARE_FOUND","SettingsNotificationComponent_ng_container_102_i360_notification_emails_5_Template","USER_SCAN_MALWARE_FOUND","SettingsNotificationComponent_div_109_i360_settings_field_16_Template","SettingsNotificationComponent_div_109_i360_notification_emails_17_Template","SettingsNotificationComponent_div_109_i360_settings_field_23_Template","SettingsNotificationComponent_div_109_i360_settings_field_24_Template","SCRIPT_BLOCKED","SettingsNotificationComponent","formBuilder","settingsService","translate","is360Package","Package","destroyed","Subject","localeExists","group","getSchema","removeDefaults","obj","Object","keys","forEach","key","includes","Array","isArray","ngOnInit","notificationShow","res","takeUntil","configFromBackend","JSON","parse","stringify","originalConfig","admin","locale","rule","Math","ceil","patchValue","confirmReload","original","current","normalizedForm","confirmationNeeded","configsEqual","localStorage","getItem","testMode","instant","normalizePeriod","notificationConfig","currentLang","adminGenerator","submit","saveNotificationSettings","periodControl","period","control","I360Validators","Validators","getScriptSchema","scripts","getAdminSchema","adminEmails","valueChanges","DEFAULT_KEY","setValue","admin_emails","getNotificationScanDetectFilds","default_emails","notify_from_email","USER_SCAN_STARTED","CUSTOM_SCAN_STARTED","USER_SCAN_FINISHED","CUSTOM_SCAN_FINISHED","SettingsNotificationComponent_div_2_Template","SettingsNotificationComponent_div_4_Template","SettingsNotificationComponent_i360_settings_field_21_Template","SettingsNotificationComponent_i360_settings_field_38_Template","SettingsNotificationComponent_i360_settings_field_55_Template","SettingsNotificationComponent_i360_settings_field_72_Template","SettingsNotificationComponent_ng_container_84_Template","SettingsNotificationComponent_i360_settings_field_90_Template","SettingsNotificationComponent_ng_container_102_Template","SettingsNotificationComponent_i360_settings_field_108_Template","SettingsNotificationComponent_div_109_Template","SETTINGS_NOTIFICATION_ROUTE","canDeactivate","UnsavedConfigRouteGuard","SettingsNotificationModule","ReactiveFormsModule","I360SettingsModule","MatSelectModule","MatSliderModule","MatTooltipModule","I360CommaSeparatedInputModule","MatCheckboxModule","TextInputModule","SUPPORT_ROUTE","I360SupportModule","FeaturesManagementService","xhr","getNativeStatusRaw","rx","FeaturesManagementAPI","getAllowed","wrap","FeaturesManagementItem","forceNativeStatusUpdate","response","cache","reduce","BlockedUiMessageComponent","title","ngContentSelectors","ERROR_REPORTING","MALWARE_SCAN_SCHEDULE","interval","allowedValues","ScheduleInterval","day_of_month","day_of_week","from","v","i","hour","MALWARE_CLEANUP","trim_file_instead_of_removal","keep_original_files_days","MALWARE_SCANNING","rapid_scan","sends_file_for_analysis","detect_elf","hyperscan","MALWARE_SCAN_INTENSITY","cpu","io","purchase_page_url"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}