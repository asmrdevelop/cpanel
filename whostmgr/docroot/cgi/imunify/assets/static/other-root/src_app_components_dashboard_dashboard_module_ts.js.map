{"version":3,"file":"src_app_components_dashboard_dashboard_module_ts.js","mappings":"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","sources":["./src/app/components/dashboard/dashboard.service.ts","./src/app/components/dashboard/request.directive.ts","./src/chartjs-dayjs-adapter.ts","./src/app/components/dashboard/charts/charts.directive.ts","./src/app/components/dashboard/charts/legend.component.ts","./src/app/components/dashboard/charts/charts.component.ts","./src/app/components/dashboard/maps/maps.component.ts","./src/app/components/dashboard/maps/maps.component.html","./src/app/components/dashboard/chart-tile/chart-tile.component.html","./src/app/components/dashboard/chart-tile/chart-tile.component.ts","./src/app/components/dashboard/doughnut/doughnut.directive.ts","./src/app/components/dashboard/doughnut/doughnut.component.ts","./src/app/components/dashboard/doughnut/doughnut-tile.component.html","./src/app/components/dashboard/doughnut/doughnut-tile.component.ts","./src/app/components/dashboard/delete-server-id-modal/delete-server-id-modal.component.ts","./src/app/components/dashboard/add-server-id-modal/add-server-id-modal.component.ts","./src/app/components/dashboard/add-server-id-modal/add-server-id-modal.component.html","./src/app/components/dashboard/server-id-widget/server-id-widget.component.html","./src/app/components/dashboard/server-id-widget/server-id-widget.component.ts","./src/app/components/dashboard/recommendations/recommendations.component.html","./src/app/components/dashboard/recommendations/recommendations.component.ts","./src/app/components/dashboard/dashboard.component.html","./src/app/components/dashboard/dashboard.component.ts","./src/app/components/dashboard/recommendations-list/recommendations-list.component.ts","./src/app/components/dashboard/dashboard.module.ts","./src/app/components/installation/installation.service.ts","./src/app/components/installation/slider/installation-slider.component.html","./src/app/components/installation/slider/installation-slider.component.ts","./src/app/utils/translate/default-if-not-translated.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { responses } from '@imunify360-api/stubs/dashboard';\nimport {\n    ChartName,\n    DashboardAddServerResponseInServer,\n    DashboardServerIdsResponseInServer,\n    ServerResponse,\n} from '@imunify360-api/dashboard';\nimport { forkJoin, of, Observable, delay, first, map, switchMap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { LicenseState } from 'app/services/license-state';\nimport { AppState } from 'app/core/app.service';\nimport { Subtract } from '@imunify360-api/misc';\nimport { baseEndpoint as globalBaseEndpoint, TEST_SERVER_ID } from '@imunify360-api/server';\nimport {\n    ActivatedRoute,\n    ActivatedRouteSnapshot,\n    CanActivate, Router,\n    RouterStateSnapshot,\n} from '@angular/router';\n\nconst baseEndpoint = `${globalBaseEndpoint}dashboard/`;\nexport const histogramEndpoint = `${baseEndpoint}graphs`;\nexport const heatmapEndpoint = `${baseEndpoint}heatmap`;\nexport const addServerIdEndpoint = `${baseEndpoint}servers/add`;\nexport const deleteServerIdEndpoint = `${baseEndpoint}servers/remove`;\nexport const listServerIdEndpoint = `${baseEndpoint}servers`;\nexport const listRecommendationsEndpoint = `${baseEndpoint}events-for-group`;\n\n\nexport enum ChartType {\n    heatmap = 'heatmap',\n    histogram = 'histogram',\n    doughnut = 'doughnut',\n}\n\nexport enum ServerSeverity {\n    poor = 'poor',\n    medium = 'medium',\n    good = 'good',\n    unknown = 'unknown',\n}\n\nfunction serverSeverityFromNumber(num: number): ServerSeverity {\n    switch (num) {\n        case 3: return ServerSeverity.good;\n        case 2: return ServerSeverity.medium;\n        case 1: return ServerSeverity.poor;\n        default: return ServerSeverity.unknown;\n    }\n}\n\nexport type DashboardBackendResponse = Partial<{\n    [K in keyof typeof ChartName]: DashboardResponseData;\n}>;\n\nexport type DashboardResponseData = Array<Array<number | string>> | null;\n\nexport type DashboardResponseItem = {\n    type: ChartType,\n    data: DashboardResponseData,\n};\n\nexport type DashboardResponse = {\n    [K in keyof typeof ChartName | string]: DashboardResponseItem;\n};\n\nexport type DashboardServerIdsResponseItem = {\n    server_id: string,\n    id: string,\n    severity: ServerSeverity;\n    recommendations: {\n        [ServerSeverity.good]: DashboardRecommendation[],\n        [ServerSeverity.medium]: DashboardRecommendation[],\n        [ServerSeverity.poor]: DashboardRecommendation[],\n    },\n};\n\nexport type DashboardServerIdsResponse = DashboardServerIdsResponseItem[];\n\nexport function serverIdsResponseToServerIdsResponseItemList(\n        res: DashboardServerIdsResponseInServer,\n    ): Array<Subtract<DashboardServerIdsResponseItem, 'severity' | 'recommendations'>> {\n    const result = res.result.map(item => {\n        return {\n            server_id: item.server_id,\n            id: item.nodename || item.ip || item.server_id,\n        };\n    });\n    for (const item of result) {\n        const duplicates = result\n            .filter(possibleDuplicate => possibleDuplicate.id === item.id);\n        if (duplicates.length > 1) { // includes item itself\n            for (const duplicate of duplicates) {\n                duplicate.id = `${duplicate.id} (${duplicate.server_id})`;\n            }\n        }\n    }\n    return result;\n}\n\nexport interface DashboardRecommendation {\n    description: string;\n    link_text: string;\n    link: string | null;\n    date: number; // unix date\n    severity: number;\n    server_id: string;\n    parameters: {[K: string]: string | number};\n}\n\nexport type DashboardRecommendationsResponseInServer = ServerResponse<DashboardRecommendation[]>;\n\n// FIXME\nconst TEST_MODE = typeof TEST !== 'undefined' && TEST && false;\n@Injectable()\nexport class DashboardService implements CanActivate {\n    get id() {\n        return TEST_SERVER_ID || this.licenseState.license.value.id;\n    }\n    constructor(\n        private http: HttpClient,\n        private licenseState: LicenseState,\n        private route: ActivatedRoute,\n        private router: Router,\n        private appState: AppState,\n    ) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.licenseState.eula.value.isFailed()) {\n            const eulaUrl = ['/', IMUNIFY_PACKAGE, 'admin', 'eula'];\n            this.router.navigate(eulaUrl, {\n                relativeTo: this.route\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    getHeatmapCharts(params): Observable<DashboardBackendResponse> {\n        return TEST_MODE || this.appState.demo\n            ? of(responses.heatmap).pipe(delay(100))\n            : this.getCharts(heatmapEndpoint, params);\n    }\n    getHistogramCharts(params): Observable<DashboardBackendResponse> {\n        return TEST_MODE || this.appState.demo\n            ? of(responses.histogramGrouped(params.group_by)).pipe(delay(100))\n            : this.getCharts(histogramEndpoint, params);\n    }\n    getCharts(endpoint: string, params) {\n        return this.http.get<DashboardBackendResponse>(endpoint, {\n            params: {\n                charts: params.charts.join(','),\n                ...(endpoint === histogramEndpoint ? {group_by: params.group_by} : {}),\n                start: params.since,\n                end: params.to || Math.round(Date.now() / 1000),\n                server_id: params.server_id,\n            },\n        });\n    }\n    getServerIds(serverIdsResponse?: Observable<DashboardServerIdsResponseInServer>):\n        Observable<DashboardServerIdsResponse> {\n        return this.licenseState.license.pipe(\n            first(license => !!license.id),\n            switchMap(() => {\n                if (!serverIdsResponse) {\n                    serverIdsResponse = this.http.get<DashboardServerIdsResponseInServer>(\n                        listServerIdEndpoint, {\n                            params: {\n                                server_id: this.id,\n                            },\n                        },\n                    );\n                }\n                return forkJoin(\n                    TEST_MODE\n                        ? (responses.serverIds.result[0].server_id = this.id,\n                            of(responses.serverIds))\n                        : serverIdsResponse,\n                    this.appState.demo\n                        ? of({result: []})\n                        : (TEST_MODE\n                            ? of(responses.recommendations)\n                            : this.http.get(listRecommendationsEndpoint, {\n                                params: {\n                                    server_id: this.id,\n                                },\n                            })),\n                ).pipe(map(responses => {\n                    // unpacking will destroy types\n                    // new versions of rxjs allows to pass object to forkJoin,\n                    // allowing unpacking\n                    const ids = responses[0] as DashboardServerIdsResponseInServer;\n                    const recommendations = responses[1] as\n                        DashboardRecommendationsResponseInServer;\n                    const result = serverIdsResponseToServerIdsResponseItemList(ids).map(item => {\n                        // need to calculate severity for each item on client side\n                        const itemRecommendations = recommendations.result\n                            .filter(rec => rec.server_id === item.server_id);\n                        const severity = Math.min(3, ...itemRecommendations.map(r => r.severity));\n                        return {\n                            server_id: item.server_id,\n                            id: item.id,\n                            severity: serverSeverityFromNumber(severity),\n                            // as all recommendations are already loaded,\n                            // save them to prevent additional requests on server_id change\n                            recommendations: itemRecommendations.reduce((result, rec) => {\n                                    result[serverSeverityFromNumber(rec.severity)].push(rec);\n                                    return result;\n                                }, { // need to group recommendations by severity\n                                     // because they are displayed separately\n                                    [ServerSeverity.poor]: [] as DashboardRecommendation[],\n                                    [ServerSeverity.medium]: [] as DashboardRecommendation[],\n                                    [ServerSeverity.good]: [] as DashboardRecommendation[],\n                                }),\n                        };\n                    });\n                    // need to sort items in following order:\n                    // with poor severity to the top, then medium, good, then in alphabetical order\n                    result.sort((item1, item2) => {\n                        if (item1.severity === item2.severity) {\n                            return item1.id < item2.id ? -1 : 1;\n                        }\n                        // accidentally string representation of severity name\n                        // can be compared with <\n                        return item1.severity < item2.severity ? 1 : -1;\n                    });\n                    return result;\n                }));\n            }),\n        );\n    }\n    addServerId(serverIds: string[])\n        : Observable<DashboardAddServerResponseInServer> {\n        if (TEST_MODE) {\n            return of(responses.errorAddServerId);\n        } else {\n            return this.licenseState.license.pipe(\n                first(license => !!license.id),\n                switchMap(() => this.http.post<DashboardAddServerResponseInServer>(\n                    addServerIdEndpoint, {\n                        server_ids: serverIds,\n                    }, {\n                        params: {\n                            server_id: this.id,\n                        },\n                    },\n                )),\n            );\n        }\n    }\n    deleteServerId(serverId: string): Observable<DashboardServerIdsResponseInServer> {\n        return (TEST_MODE\n            ? of(responses.serverIds)\n            : this.http.post<DashboardServerIdsResponseInServer>(\n                deleteServerIdEndpoint, {\n                    server_ids: [serverId],\n                }, {\n                    params: {\n                        server_id: this.id,\n                    },\n                },\n            )\n        );\n    }\n}\n","import { AfterContentInit, Directive, NgZone, Optional } from '@angular/core';\nimport { ServerResponse } from '@imunify360-api/dashboard';\nimport {\n    CommonWidgetsContainerDirective,\n} from 'app/utils/table/request/common-widgets-container.directive';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AbstractRequestDirective } from 'app/utils/table/request/request.directive';\nimport { LoaderDirective } from 'app/utils/loader/loader.directive';\nimport { first } from 'rxjs';\nimport { GetDataFn, WidgetsOwnerDirective } from 'app/utils/table/request/misc';\nimport { LicenseState } from 'app/services/license-state';\n\n@Directive({\n    selector: '[i360ServerRequest]',\n    providers: [{\n        provide: WidgetsOwnerDirective,\n        useExisting: ServerRequestDirective,\n    }],\n})\nexport class ServerRequestDirective<E, R extends ServerResponse<E> = ServerResponse<E>>\n    extends AbstractRequestDirective<E, R, GetDataFn<R>>\n    implements AfterContentInit {\n    constructor(private licenseState: LicenseState,\n                route: ActivatedRoute,\n                router: Router,\n                zone: NgZone,\n                @Optional() commonWidgetsContainer: CommonWidgetsContainerDirective,\n                loader: LoaderDirective) {\n        super(route, router, zone, commonWidgetsContainer, loader);\n    }\n    ngAfterContentInit() {\n        // get server_id from license, requested with config by sentry service\n        this.licenseState.license.pipe(\n            first(license => !!license.id),\n        ).subscribe(() => super.ngAfterContentInit());\n    }\n    _load(res: R) {\n        this.setData(res.result);\n    }\n}\n","import { _adapters } from 'chart.js';\nimport dayjs, { QUnitType } from 'dayjs';\nimport type { TimeUnit } from 'chart.js';\nimport CustomParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport AdvancedFormat from 'dayjs/plugin/advancedFormat.js';\nimport QuarterOfYear from 'dayjs/plugin/quarterOfYear.js';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat.js';\nimport isoWeek from 'dayjs/plugin/isoWeek.js';\n\n// Needed to handle quarter format\ndayjs.extend(AdvancedFormat);\n// Needed to handle adding/subtracting quarter\ndayjs.extend(QuarterOfYear);\n// Needed to handle localization format\ndayjs.extend(LocalizedFormat);\n// Needed to handle the custom parsing\ndayjs.extend(CustomParseFormat);\ndayjs.extend(isoWeek);\n\nconst FORMATS = {\n    datetime: 'MMM D, YYYY, h:mm:ss a',\n    millisecond: 'h:mm:ss.SSS a',\n    second: 'h:mm:ss a',\n    minute: 'h:mm a',\n    hour: 'hA',\n    day: 'MMM D',\n    week: 'll',\n    month: 'MMM YYYY',\n    quarter: '[Q]Q - YYYY',\n    year: 'YYYY',\n};\n\n_adapters._date.override({\n    //_id: 'dayjs', //DEBUG,\n    formats: () => FORMATS,\n    parse: function (value: any, format?: TimeUnit) {\n        const valueType = typeof value;\n\n        if (value === null || valueType === 'undefined') {\n            return null;\n        }\n\n        if (valueType === 'string' && typeof format === 'string') {\n            return dayjs(value, format).isValid() ? dayjs(value, format).valueOf() : null;\n        } else if (!(value instanceof dayjs)) {\n            return dayjs(value).isValid() ? dayjs(value).valueOf() : null;\n        }\n        return null;\n    },\n    format: function (time: any, format: TimeUnit): string {\n        return dayjs(time).format(format);\n    },\n    add: function (time: any, amount: number, unit: QUnitType & TimeUnit) {\n        return dayjs(time).add(amount, unit).valueOf();\n    },\n    diff: function (max: any, min: any, unit: TimeUnit) {\n        return dayjs(max).diff(dayjs(min), unit);\n    },\n    startOf: function (time: any, unit: (TimeUnit & QUnitType) | 'isoWeek', weekday?: number) {\n        if (unit === 'isoWeek') {\n            // Ensure that weekday has a valid format\n            //const formattedWeekday\n\n            const validatedWeekday: number =\n                typeof weekday === 'number' && weekday > 0 && weekday < 7 ? weekday : 1;\n\n            return dayjs(time).isoWeekday(validatedWeekday).startOf('day').valueOf();\n        }\n\n        return dayjs(time).startOf(unit).valueOf();\n    },\n    endOf: function (time: any, unit: TimeUnit & QUnitType) {\n        return dayjs(time).endOf(unit).valueOf();\n    },\n});\n","import dayjs from 'dayjs';\nimport { Directive, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { fromEvent, debounceTime } from 'rxjs';\nimport { Chart, ChartType, registerables, TooltipItem } from 'chart.js';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport 'chartjs-dayjs-adapter';\n\n@Directive({\n    selector: 'canvas[baseChart]',\n})\nexport class ChartsDirective implements OnDestroy, OnChanges {\n\n    @Input() data: number[][] = [];\n    @Input() lines: string[] = [];\n    @Input() labels: any[] = [];\n    @Input() colors: any[] = [];\n\n    chart: any;\n\n    private timeFromFormat: string = '';\n    private timeToFormat: string = '';\n    private eventsFormat: string = '';\n\n    private langChangeSubscription = this.translate.translate.onLangChange.subscribe(() => {\n        this.updateTranslation();\n        this.chart.update();  // update ticks\n    });\n\n    // native ChartJS resizing doesn't work well in DirectAdmin Evolution skin\n    private resizeSubscription = fromEvent(window, 'resize').pipe(\n        debounceTime(400),\n    ).subscribe(() => {\n        this.chart.resize();\n    });\n\n    constructor(\n        public element: ElementRef,\n        public translate: TranslateService,\n    ) {\n        this.updateTranslation();\n        Chart.register(...registerables);\n\n        const context = this.element.nativeElement.getContext('2d');\n        const options = {\n            type: 'bar' as ChartType,\n            data: {\n                labels: this.labels,\n                datasets: this.getDatasets(),\n            },\n            options: {\n                responsive: false,\n                aspectRatio: 1.6666666,\n                plugins: {\n                    legend: {\n                        display: false,\n                    },\n                    tooltip: {\n                        callbacks: {\n                            title: (items: TooltipItem<ChartType>[]) => {\n                                const t = (dp) => dayjs(dp?.x).format('D MMM LT');\n                                const index = items[0].dataIndex;\n                                const data = items[0].dataset.data;\n                                const from = this.timeFromFormat.replace('{from}', t(data[index]));\n                                const to = this.timeToFormat.replace('{to}', t(data[index + 1]));\n                                return from + '\\n' + to;\n                            },\n                            label: (item) => this.eventsFormat.replace('{numberOfEvents}',\n                                item.formattedValue),\n                        },\n                        backgroundColor: '#4b5c6b',\n                        titleMarginBottom: 7,\n                        cornerRadius: 3,\n                        caretSize: 0,\n                        caretPadding: 20,\n                        displayColors: false,\n                        yPadding: 14,\n                        xPadding: 17,\n                        titleFontSize: 13,\n                        titleFontFamily: 'Open Sans',\n                        bodyFontSize: 13,\n                        bodyFontFamily: 'Open Sans',\n                        mode: 'x' as 'x',\n                        intersect: false,\n                    },\n                },\n                scales: {\n                    x: {\n                        offset: true,\n                        type: 'time' as 'time',\n                        time: {\n                            displayFormats: {\n                                day: 'D MMM',\n                                hour: 'D MMM | LT',  // \" | \" is replaced with a line break below\n                                millisecond: 'LT',  // used by autoSkip as \"longest format\"\n                            },\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            autoSkipPadding: 8,\n                            maxRotation: 0,\n                            padding: 10,\n                            fontFamily: 'Open Sans',\n                            fontColor: '#788896',\n                            fontSize: 11,\n                            callback: (label: string) => label.split(' | '),  // add line break\n                        },\n                        grid: {\n                            display: false,\n                        },\n                    },\n                    y: {\n                        grid: {\n                            color: '#e4e7ec',\n                            zeroLineColor: '#e4e7ec',\n                            lineWidth: 2,\n                            zeroLineWidth: 2,\n                            drawBorder: false,\n                        },\n                        ticks: {\n                            maxTicksLimit: 5,\n                            fontColor: '#788896',\n                            fontSize: 11,\n                            padding: 11,\n                            fontFamily: 'Open Sans',\n                            beginAtZero: true,\n                            callback: (value: number): any => {\n                                if (value % 1 === 0) {\n                                    return value;\n                                }\n                            },\n                        },\n                    },\n                },\n            },\n        };\n\n        this.chart = new Chart(context, options);\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.data) return;\n\n        this.colors = changes.colors.currentValue;\n        this.data = changes.data.currentValue;\n        this.lines = changes.lines.currentValue;\n\n        this.chart.data.labels = changes.labels.currentValue;\n        this.chart.data.datasets = this.getDatasets();\n        this.chart.resize();\n        this.chart.update();\n    }\n\n    ngOnDestroy(): any {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n        this.langChangeSubscription.unsubscribe();\n        this.resizeSubscription.unsubscribe();\n    }\n\n    getDatasets(): any {\n        return this.data.map((data, index) => {\n            return {\n                data,\n                label: this.lines[index],\n                backgroundColor: this.colors[index],\n                borderColor: this.colors[index],\n                barPercentage: 0.95,\n                categoryPercentage: 0.95,\n            };\n        });\n    }\n\n    toggleLine(index: number) {\n        let meta = this.chart.getDatasetMeta(index);\n        meta.hidden = meta.hidden === null ? true : null;\n        this.chart.update();\n    }\n\n    private async updateTranslation() {\n        // Ugly. We can't have async tooltip callbacks nor custom async tooltip\n        this.timeFromFormat = await this.translate.t('dashboard.charts.timeFrom', {from: '{from}'});\n        this.timeToFormat = await this.translate.t('dashboard.charts.timeTo', {to: '{to}'});\n        this.eventsFormat = await this.translate.t(\n            'dashboard.charts.events', {numberOfEvents: '{numberOfEvents}'});\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'i360-legend',\n    template: `\n        <ul>\n            <li *ngFor=\"let line of lines;let i=index\"\n                    [class.striked]=\"striked[i]\"\n                    (click)=\"clicked(i)\">\n                <span class=\"circle\" [ngStyle]=\"{ 'border-color': colors[i] }\"></span>\n                <span>{{ line }}</span>\n            </li>\n        </ul>\n    `,\n    styleUrls: ['./legend.component.scss'],\n})\nexport class LegendComponent {\n    @Input() lines: string[];\n    @Input() colors: string[];\n    @Input() striked: boolean[] = [];\n    @Output() onClick = new EventEmitter();\n\n    clicked(index: number) {\n        this.onClick.emit(index);\n        this.striked[index] = !this.striked[index];\n    }\n}\n","import { AfterContentInit, Component, Inject, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { getColor } from 'app/utils/random-color';\nimport { ChartsDirective } from './charts.directive';\nimport { DataLoader, DataLoaderImpl } from 'app/utils/table/data-loader';\n\n\n@Component({\n    selector: 'i360-chart',\n    template: `\n            <i360-legend [lines]=\"lines\"\n                         *ngIf=\"false\"\n                         [colors]=\"colors\"\n                         [striked]=\"striked\"\n                         (onClick)=\"directive.toggleLine($event)\"></i360-legend>\n        <div>\n            <canvas baseChart\n                    [data]=\"data\"\n                    [labels]=\"labels\"\n                    [lines]=\"lines\"\n                    [colors]=\"colors\"></canvas>\n        </div>\n        `,\n    styleUrls: ['./charts.component.scss'],\n})\nexport class ChartsComponent implements AfterContentInit, OnDestroy {\n    data: any[];\n    lines: string[];\n    labels: Date[];\n    colors: string[];\n    striked: boolean[];\n    @ViewChild(ChartsDirective, {static: true}) directive: ChartsDirective;\n    private onLoaded = Subscription.EMPTY;\n    constructor(@Inject(DataLoaderImpl) public dataLoader: DataLoader) {}\n\n    ngAfterContentInit() {\n        this.onLoaded = this.dataLoader.loaded.subscribe(data => this.load(data));\n    }\n    async load(res: any) {\n        this.colors = [];\n        this.striked = [];\n        this.labels = [];\n        this.data = [];\n        this.lines = [];\n        res[0].forEach((item: any, index: number) => {\n            if (index > 0) {\n                this.colors.push(getColor(index - 1));\n                this.data[index - 1] = [];\n            }\n        });\n        res.forEach((column: any) => {\n            this.labels.push(new Date(column[0] * 1000));\n            column.forEach((item: any, index: number) => {\n                if (index > 0) {  // the first one is the common label, others - values\n                    this.data[index - 1].push({x: new Date(column[0] * 1000), y: item});\n                }\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.onLoaded.unsubscribe();\n    }\n}\n","import { XHR } from 'app/utils/xhr/xhr';\nimport { max, range } from 'd3-array';\nimport {\n    combineLatest, fromEvent, identity, merge, of, Subscription,\n    debounceTime, filter, tap,\n} from 'rxjs';\nimport { geoMercator, geoPath, GeoPath, GeoProjection } from 'd3-geo';\nimport { zoom as d3Zoom, D3ZoomEvent } from 'd3-zoom';\nimport { interpolateRgb } from 'd3-interpolate';\nimport { scaleQuantize } from 'd3-scale';\nimport { AfterViewInit, Component, ElementRef, Inject, OnDestroy, ViewChild } from '@angular/core';\nimport { polygonContains } from 'd3-polygon';\nimport { select, Selection } from 'd3-selection';\nimport { CountryService } from 'app/services/country';\nimport { DataLoader, DataLoaderImpl } from 'app/utils/table/data-loader';\nimport { ciFormatter } from 'app/utils/helper';\nimport polylabel from 'polylabel';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport { LoaderDirective } from 'app/utils/loader/loader.directive';\n\nenum ArrowPosition {\n    bottom, left, right, top,\n}\nconst PIN_FONT_SIZE = 13;\nconst PIN_FONT_WEIGHT = 600;\nconst PIN_ARROW_SIZE = 6;\nconst INTERPOLATE_MAX = '#38ab63';\nconst INTERPOLATE_MIN = '#e0e0e0';\nconst BORDER_COLOR = '#6657ff';\nconst FILL_COLOR = '#4b5c6b';\nconst TEXT_COLOR = '#ffffff';\nconst FILL_OPACITY = 1;\nconst BACKGROUND_COLOR = '#f4f5f7';\nabstract class Pin {\n    text: string;\n    width: number; // visible width\n    height: number; // visible height\n    r: number; // visible border radius\n    /**\n     * center of circle, top-left corner of rectangle\n     */\n    x: number;\n    y: number;\n    /**\n     * dimensions after applying scaling\n     */\n    w: number;\n    h: number;\n    arrowPosition: ArrowPosition;\n    padding: number; // padding-left and padding-right of text\n    /**\n     * center of circle, bottom-middle if rect\n     * empty array if is not visible\n     */\n    center: number[];\n    value: number; // number inside pin\n\n    constructor(public map: MapsComponent) {\n    }\n\n    calculateBaseDimensions() {\n        this.w = this.width / this.map.lastScale;\n        this.h = this.height / this.map.lastScale;\n        this.x = this.center[0] - this.w / 2;\n        this.y = this.center[1] - this.h;\n    }\n\n    /**\n     * @param other other Pin\n     * @param intersection distance which can be covered with another pin\n     * @returns {boolean} true if they intersect\n     * https://developer.mozilla.org/kab/docs/Games/Techniques/2D_collision_detection\n     */\n    intersects(other: Pin, intersection = 7 / this.map.lastScale) {\n        return this.x + intersection <= other.x + intersection + other.w - intersection &&\n            this.x + intersection + this.w - intersection >= other.x + intersection &&\n            this.y + intersection <= other.y + intersection + other.h - intersection &&\n            this.h - intersection + this.y + intersection >= other.y + intersection;\n    }\n}\nclass GroupPin extends Pin {\n    padding = 8;\n\n    constructor(a: Pin, b: Pin) {\n        super(a.map);\n        this.value = a.value + b.value;\n        this.text = ciFormatter(this.value);\n        this.width = this.height = this.map.getTextWidth(this.text) + this.padding * 2;\n        const sizeRelation = a.value / b.value;\n        this.center = [\n            (sizeRelation * a.center[0] + b.center[0]) / (1 + sizeRelation),\n            (sizeRelation * a.center[1] + b.center[1]) / (1 + sizeRelation),\n        ];\n        this.calculateBaseDimensions();\n        this.r = this.w / 2;\n    }\n\n    calculateBaseDimensions() {\n        super.calculateBaseDimensions();\n        this.y += this.h / 2;\n    }\n}\nclass SinglePin extends Pin {\n    height = 35;\n    r = 3;\n    count = 1;\n    padding = 12;\n    constructor(map: MapsComponent,\n                public coordinates,\n                public name,\n                public value) {\n        super(map);\n        this.text = `${this.name ? `${this.name}:` : ''} ${ciFormatter(this.value)}`;\n        this.width = map.getTextWidth(this.text) + this.padding * 2;\n    }\n\n    calculateBaseDimensions() {\n        const bounds = this.map.screenBounds;\n        const containedBounds = bounds.filter(p => polygonContains(this.coordinates, p));\n        const coordinates = this.coordinates.filter(p => polygonContains(bounds, p));\n        if (containedBounds.length > 1 && containedBounds.length < 4) {\n            coordinates.push(...containedBounds.slice(1));\n        } else {\n            coordinates.push(...containedBounds);\n        }\n        if (coordinates.length < 4) {\n            this.center = [];\n        } else {\n            this.center = polylabel([coordinates]);\n            super.calculateBaseDimensions();\n            const bounds = this.map.screenBounds;\n            const minX = bounds[0][0];\n            const maxX = bounds[2][0];\n            const minY = bounds[0][1];\n            const arrowSize = PIN_ARROW_SIZE / this.map.lastScale;\n            this.y -= arrowSize;\n            if (this.x < minX) {\n                this.arrowPosition = ArrowPosition.left;\n                this.x = this.center[0] + arrowSize;\n                this.y = this.center[1] - this.h / 2;\n            } else if (this.x + this.w > maxX) {\n                this.arrowPosition = ArrowPosition.right;\n                this.x = this.center[0] - this.w - arrowSize;\n                this.y = this.center[1] - this.h / 2;\n            } else if (this.y < minY) {\n                this.arrowPosition = ArrowPosition.top;\n                this.y = this.center[1] + arrowSize;\n            } else {\n                this.arrowPosition = ArrowPosition.bottom;\n            }\n        }\n    }\n\n    intersects(pin: Pin, intersects = 4 / this.map.lastScale) {\n        return super.intersects(pin, intersects);\n    }\n}\n\n\n@Component({\n    selector: 'i360-map',\n    templateUrl: './maps.component.html',\n    styleUrls: ['./maps.component.scss'],\n})\nexport class MapsComponent implements AfterViewInit, OnDestroy {\n    static counter = 0;\n    id = 'i360-map' + MapsComponent.counter++;\n    onLoaded = Subscription.EMPTY;\n    path: GeoPath<any, any>;\n    maxZoomLevel: number = 50;\n    /**\n     * A number between 1 and maxZoomLevel,\n     * where 1 represents max zoom out and maxZoomLevel - max zoom in.\n     */\n    lastScale: number;\n    initialPins: SinglePin[] = [];\n    width: number;\n    height: number;\n    countriesG: Selection<SVGGElement, any, SVGGElement, any>;\n    markersG: Selection<SVGGElement, any, SVGGElement, any>;\n    g: Selection<SVGGElement, any, SVGSVGElement, any>;\n    stub: CanvasRenderingContext2D;\n    projection: GeoProjection;\n    svg: Selection<SVGSVGElement, any, SVGGElement, any>;\n    zoomEndTimeout; // zone task\n    screenBounds: Array<[number, number]>;\n    @ViewChild('stub', {static: true}) canvas: ElementRef<HTMLCanvasElement>;\n    constructor(private xhr: XHR,\n                private countryService: CountryService,\n                private loader: LoaderDirective,\n                @Inject(DataLoaderImpl) private dataLoader: DataLoader) {}\n\n    getTextWidth(text: string) {\n        return this.stub.measureText(text).width;\n    }\n\n    getValue(data, d) {\n        const found = data.find(c => c[0] === d.properties.code);\n        return found ? found[1] : 0;\n    }\n\n    browserAbsolutePointToSvgTransitionCoordinates(x, y) {\n        const container = this.g.node() as SVGGElement | any;\n        const node =  this.svg.node();\n        if (!node) {\n            return [];\n        }\n\n        let point = node.createSVGPoint();\n        point.x = x;\n        point.y = y;\n        if (container) {\n            point = point.matrixTransform(container.getScreenCTM().inverse());\n        }\n        return [point.x, point.y];\n    }\n\n    updateScreenBounds(): void|Array<any> {\n        const node = this.svg.node();\n        if (!node) {\n            return [];\n        }\n        const {top, left, right, bottom} = node.getBoundingClientRect();\n        const [minX, minY] = this.browserAbsolutePointToSvgTransitionCoordinates(left, top);\n        const [maxX, maxY] = this.browserAbsolutePointToSvgTransitionCoordinates(right, bottom);\n        this.screenBounds = [\n            [minX, minY],\n            [minX, maxY],\n            [maxX, maxY],\n            [maxX, minY],\n        ];\n    }\n\n    groupMarkers() {\n        this.updateScreenBounds();\n        let current: any[] = this.initialPins.filter(pin => {\n            pin.calculateBaseDimensions();\n            return pin.center.length;\n        });\n        let next: Pin[] = [];\n        let pin1: Pin, pin2: Pin;\n        let intersected;\n        while (true) {\n            intersected = false;\n            for (let i = 0; i < current.length; i++) {\n                pin1 = current[i];\n                if (!pin1) continue;\n                for (let j = i + 1; j < current.length; j++) {\n                    pin2 = current[j];\n                    if (!pin2) continue;\n                    if (pin1.intersects(pin2)) {\n                        next.push(new GroupPin(pin1, pin2));\n                        current[j] = current[i] = null;\n                        intersected = true;\n                        break;\n                    }\n                }\n                if (current[i]) {\n                    next.push(pin1);\n                    current[i] = null;\n                }\n            }\n            if (intersected) {\n                current = next;\n                next = [];\n            } else {\n                return next;\n            }\n        }\n    }\n\n    removeMarkers() {\n        this.markersG.selectAll('*').remove();\n    }\n\n    createMarkers() {\n        const next = this.groupMarkers();\n        if (!next.length) return;\n        const single = next.filter(pin => pin instanceof SinglePin);\n        const group = next.filter(pin => pin instanceof GroupPin);\n        /**\n         * Bodies for group pins\n         */\n        this.markersG.selectAll()\n            .data(group).enter()\n            .append('circle')\n            .attr('fill', FILL_COLOR)\n            .attr('stroke', BORDER_COLOR)\n            .attr('stroke-width', 4 / this.lastScale)\n            .attr('cx', d => d.center[0])\n            .attr('cy', d => d.center[1])\n            .attr('r', d => d.r)\n            .attr('fill-opacity', FILL_OPACITY);\n        /**\n         * Bodies for single pins\n         */\n        this.markersG.selectAll()\n            .data(single).enter()\n            .append('path')\n            .attr('d', ({x, y, w, h, r, arrowPosition}) => {\n                // https://www.w3schools.com/graphics/svg_path.asp\n                const arrowSize = PIN_ARROW_SIZE / this.lastScale;\n                const borderRadius = r / this.lastScale;\n                const baseRect = [\n                    `M ${x + w - borderRadius} ${y + h}`,\n                    `Q ${x + w} ${y + h} ${x + w} ${y + h - borderRadius}`,  // bottom-right corner\n                    `L ${x + w} ${y + borderRadius}`, // right line\n                    `Q ${x + w} ${y} ${x + w - borderRadius} ${y}`,  // top-right corner\n                    `L ${x + borderRadius} ${y}`, // top line\n                    `Q ${x} ${y} ${x} ${y + borderRadius}`,  // top-left corner\n                    `L ${x} ${y + h - borderRadius}`, // left line\n                    `Q ${x} ${y + h} ${x + borderRadius} ${y + h}`,  // bottom-left corner\n                    `L ${x + w} ${y + h}`, // bottom line\n                    `Z`,\n                ];\n                switch (arrowPosition) {\n                    case ArrowPosition.top:\n                        baseRect.splice(4, 1,\n                            `L ${x + w / 2 + arrowSize} ${y}`,\n                            `L ${x + w / 2} ${y - arrowSize}`,\n                            `L ${x + w / 2 - arrowSize} ${y}`,\n                        );\n                        break;\n                    case ArrowPosition.right:\n                        baseRect.splice(2, 1,\n                            `L ${x + w} ${y + h / 2 + arrowSize}`,\n                            `L ${x + w + arrowSize} ${y + h / 2}`,\n                            `L ${x + w} ${y + h / 2 - arrowSize}`,\n                        );\n                        break;\n                    case ArrowPosition.left:\n                        baseRect.splice(6, 1,\n                            `L ${x} ${y + h / 2 - arrowSize}`,\n                            `L ${x - arrowSize} ${y + h / 2}`,\n                            `L ${x} ${y + h / 2 + arrowSize}`,\n                        );\n                        break;\n                    case ArrowPosition.bottom:\n                        baseRect.splice(8, 1,\n                            `L ${x + w / 2 - arrowSize} ${y + h}`,\n                            `L ${x + w / 2} ${y + h + arrowSize}`,\n                            `L ${x + w / 2 + arrowSize} ${y + h}`,\n                        );\n                        break;\n                    default:\n                        throw new Error('not implemented');\n                }\n                return baseRect.join(' ');\n            })\n            .attr('fill', FILL_COLOR)\n            .attr('fill-opacity', FILL_OPACITY);\n        /**\n         * Text for all pins\n         */\n        this.markersG.selectAll()\n            .data(next).enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x + d.padding / this.lastScale)\n            .attr('y', d => d.y + d.h / 2)\n            .attr('dy', '0.35em')\n            .attr('fill', TEXT_COLOR)\n            .style('font-size', `${PIN_FONT_SIZE / this.lastScale}px`)\n            .style('font-weight', PIN_FONT_WEIGHT);\n\n    }\n\n    zoomEnd() {\n        this.createMarkers();\n    }\n\n    zoomStart() {\n        this.removeMarkers();\n    }\n\n    zoomed(event: D3ZoomEvent<any, any>) {\n        this.zoomStart();\n        const dims = event.transform;\n        const scale = dims.k;\n        this.g.style('stroke-width', 1 / scale)\n            .attr('transform', `translate(${dims.x},${dims.y}) scale(${dims.k})`);\n        this.lastScale = scale;\n        clearTimeout(this.zoomEndTimeout);\n        this.zoomEndTimeout = setTimeout(() => this.zoomEnd(), 400);\n    }\n    @useLoader\n    async createCountries(data: Array<[string, number]>) {\n        const countries = (await import('./topojson')).countries;\n        const maxValue = max(data, d => d[1]) || 0;\n        const interpolateColor = interpolateRgb(INTERPOLATE_MIN, INTERPOLATE_MAX);\n        const quantize = scaleQuantize()\n            .domain([0, maxValue])\n            .range(range(0, 1, 1 / 150).map(i => <any>interpolateColor(i)));\n        const country = this.countriesG.selectAll('*').data(countries);\n        country.enter().append('path')\n            .attr('d', this.path)\n            .style('stroke', BACKGROUND_COLOR);\n        this.countriesG.selectAll('*')\n            // @ts-ignore\n            .style('fill', (d) => {\n                const value = this.getValue(data, d);\n                return quantize(value);\n            });\n\n        this.initialPins = countries.filter(d => data.find(c => c[0] === d.properties.code))\n            .map((feature) => {\n                let coordinates;\n                // use the biggest polygon in the list\n                if (feature.geometry.type === 'MultiPolygon') {\n                    const lengths = feature.geometry\n                        .coordinates.map(coords => coords[0].length);\n                    const max = Math.max(...lengths);\n                    const index = lengths.indexOf(max);\n                    coordinates = feature.geometry.coordinates[index];\n                } else {\n                    coordinates = feature.geometry.coordinates;\n                }\n                const value = this.getValue(data, feature);\n                const name = this.countryService.getCountryNameByCode(feature.properties.code);\n                return new SinglePin(\n                    this,\n                    coordinates[0].map(c => this.projection(c)),\n                    name,\n                    value,\n                );\n            });\n    }\n    initMap() {\n        const map = document.getElementById(this.id)!;\n        this.lastScale = 1;\n        this.width = Math.floor(map.getBoundingClientRect().width);\n        this.height = Math.floor(this.width / 1.6666666);\n        const zoom = d3Zoom()\n            .scaleExtent([1, this.maxZoomLevel])\n            .translateExtent([[0, 0], [this.width, this.height]])\n            .on('zoom', (event) => this.zoomed(event));\n        const root = select(`#${this.id}`);\n        root.selectAll('*').remove();\n        this.svg = <any>root\n            .insert('svg')\n            .attr('width', this.width)\n            .attr('height', this.height)\n            .attr('style', `background-color: ${BACKGROUND_COLOR}; border-radius: 6px`)\n            .call(zoom);\n        this.g = <any>this.svg.insert('g');\n        this.countriesG = <any>this.g.insert('g');\n        this.markersG = <any>this.g.insert('g');\n        this.projection = geoMercator()\n            .translate([this.width / 2, this.height / 1.6])\n            .scale(this.width / 2 / Math.PI);\n        this.path = geoPath()\n            .projection(this.projection);\n    }\n\n    ngAfterViewInit() {\n        this.stub = this.canvas.nativeElement.getContext('2d')!;\n        this.stub.font = `${PIN_FONT_WEIGHT} ${PIN_FONT_SIZE}px \"Open Sans\", sans-serif`;\n        this.onLoaded = combineLatest([\n            this.dataLoader.loaded,\n            merge(\n                of(null),\n                fromEvent(window, 'resize').pipe(\n                    debounceTime(1000),\n                ),\n            ).pipe(\n                tap(() => this.initMap()),\n            ),\n            this.countryService.loaded.pipe(filter(identity)),\n        ]).subscribe(async data => {\n            await this.createCountries(data[0]);\n            this.removeMarkers();\n            this.createMarkers();\n        });\n    }\n\n    ngOnDestroy() {\n        this.onLoaded.unsubscribe();\n    }\n}\n","<div (wheel)=\"false\" [id]=\"id\" class=\"i360-maps\"></div>\n<canvas #stub></canvas>","<ng-container *ngIf=\"(loadedData | async)?.length === 0; else dataFound\"></ng-container>\n<ng-template #dataFound>\n    <div class=\"i360-chart-tile-header\">\n        <div class=\"i360-chart-tile-title-section\">\n            <div class=\"i360-chart-tile-title\" role=\"heading\" aria-level=\"2\">\n                {{ 'dashboard.incidentsAndAlerts.' + paramName + '.title' | translate }}:\n                <span class=\"i360-chart-tile-number\">{{ number }}</span>\n            </div>\n            <div class=\"i360-chart-tile-title-description\">\n                <div [class.i360-chart-tile-title-description-overflow-container]=\"!descriptionExpanded\"\n                     [i360OverflowDetector]=\"descriptionExpanded && translateService.translate.onLangChange\"\n                     #overflowDetector=\"i360OverflowDetector\">\n                    <ng-content select=\"[description]\"></ng-content>\n                </div>\n            </div>\n            <div class=\"i360-chart-tile-load-more\"\n                 [class.i360-chart-tile-load-more-hidden]=\"!overflowDetector.overflow && !descriptionExpanded\">\n                <div (click)=\"descriptionExpanded = !descriptionExpanded\" class=\"flexer align-center\">\n                    <ng-container *ngIf=\"descriptionExpanded; else descriptionNotExpandedTemplate\">\n                        <mat-icon svgIcon=\"read-more\" class=\"i360-load-more-description-expanded\"></mat-icon>\n                        <a class=\"i360-dashboard-link\">{{ 'readMore.showLess' | translate}}</a>\n                    </ng-container>\n                    <ng-template #descriptionNotExpandedTemplate>\n                        <mat-icon svgIcon=\"read-more\"></mat-icon>\n                        <a class=\"i360-dashboard-link\">{{ 'readMore.readMore' | translate }}</a>\n                    </ng-template>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"i360-chart-tile-buttons-section\">\n            <ng-container *ngIf=\"heatmapAllowed\">\n                <button i360-button\n                        [round]=\"true\"\n                        [primary]=\"value === availableValues.histogram\"\n                        (click)=\"navigate(availableValues.histogram)\">{{ 'dashboard.incidentsAndAlerts.histogram' | translate }}</button>\n                <button i360-button\n                        [round]=\"true\"\n                        [primary]=\"value === availableValues.heatmap\"\n                        (click)=\"navigate(availableValues.heatmap)\">{{ 'dashboard.incidentsAndAlerts.heatmap' | translate }}</button>\n            </ng-container>\n        </div>\n    </div>\n\n    <div class=\"i360-chart-tile-content-wrapper-2\"><!-- parent can't have display: flex in old browsers -->\n        <div class=\"i360-chart-tile-content-wrapper\"><!-- padding-bottom in % for fixed aspect ratio -->\n            <div class=\"i360-chart-tile-content\">\n                <ng-container *ngIf=\"(loadedData | async); else errorTemplate\">\n                    <i360-chart *ngIf=\"value === availableValues.histogram\"></i360-chart>\n                    <ng-container *ngIf=\"value === availableValues.heatmap\">\n                        <i360-map *ngIf=\"(loadedData | async).some(hasCountriesInHeatmapExpr); else emptyTemplate\"></i360-map>\n                    </ng-container>\n                    <ng-template #emptyTemplate>\n                        <div class=\"i360-chart-tile-no-content\">\n                            <div class=\"i360-chart-tile-no-content-text\">\n                                {{ 'dashboard.incidentsAndAlerts.noGeoIp' | translate }}\n                            </div>\n                        </div>\n                    </ng-template>\n                </ng-container>\n                <ng-template #errorTemplate>\n                    <ng-container *ngIf=\"prevData !== undefined\">\n                        <div class=\"i360-chart-tile-no-content\" *ngIf=\"(loadedData | async) === null;\">\n                            <div class=\"i360-chart-tile-no-content-text\">\n                                {{ 'dashboard.incidentsAndAlerts.failedToFetch' | translate }}\n                            </div>\n                        </div>\n                    </ng-container>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { WidgetDirective } from 'app/utils/table/widgets/widget';\nimport { SetWidgetValueComponent } from 'app/utils/table/widgets/values/set-value';\nimport { DataLoader, DataLoaderImpl } from 'app/utils/table/data-loader';\nimport { Router } from '@angular/router';\nimport { ServerRequestDirective } from 'app/components/dashboard/request.directive';\nimport {\n    ChartType, DashboardResponse, DashboardResponseData,\n} from 'app/components/dashboard/dashboard.service';\nimport { filter, map, take, tap } from 'rxjs';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport { ciFormatter } from 'app/utils/helper';\n\n\n// prevData === undefined - data has never been loaded\n// loadedData|async === null - failed to load data\n// (loadedData|async).length > 0 - smth has been loaded\n// (loadedData|async).length === 0 - no data found\n@Component({\n    selector: 'i360-chart-tile',\n    templateUrl: './chart-tile.component.html',\n    styleUrls: ['./chart-tile.component.scss'],\n    providers: [{\n        provide: DataLoaderImpl,\n        useExisting: ChartTileComponent,\n    }],\n})\nexport class ChartTileComponent extends WidgetDirective\n    implements DataLoader<DashboardResponseData> {\n    @Input() heatmapAllowed = true;\n    prevData: DashboardResponseData;\n    number = '';\n    loadedData = this.request.loaded.pipe(\n        map(data => data[this.paramName].data),\n        tap(data => {\n            if (!data || data.length === 0) {\n                this.number = '';\n            } else {\n                this.number = ciFormatter(data.reduce((res, cur) => {\n                    // they are actually numbers, but we can not declare proper return type\n                    // because of stubs\n                    return (res as any as number) + (cur[1] as any as number);\n                }, 0));\n            }\n        }),\n    );\n    loaded = this.loadedData.pipe(\n        filter(data => {\n            const allowChartUpdate = data !== this.prevData && !!data && !!data.length;\n            this.prevData = data;\n            return allowChartUpdate;\n        }),\n    );\n    availableValues = ChartType;\n    defaultValue = this.availableValues.histogram;\n    descriptionExpanded = false;\n    constructor(private request: ServerRequestDirective<DashboardResponse>,\n                public translateService: TranslateService,\n                private router: Router) {\n        super(null, request);\n        this.delegate = new SetWidgetValueComponent(this);\n        // should help to set prevData to smth except undefined, indicating data loaded state\n        this.loadedData.pipe(take(1)).subscribe(() => this.prevData = null);\n    }\n    hasCountriesInHeatmapExpr =\n        ([name, num]: [name: string, num: number]) => name !== '' && num > 0;\n    navigate(chartType: ChartType) {\n        this.router.navigate([], {\n            queryParamsHandling: 'merge',\n            queryParams: {\n                [this.paramName]: chartType,\n            },\n        });\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n} from '@angular/core';\nimport { Chart, ChartType, registerables } from 'chart.js';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport { fromEvent, debounceTime } from 'rxjs';\n\n@Directive({\n    selector: 'canvas[baseDoughnut]',\n})\nexport class DoughnutDirective implements OnDestroy, OnChanges {\n    @Input() data: number[] = [];\n    @Input() percents: string[] = [];\n    chart: any;\n    spam: string = '';\n    ham: string = '';\n\n    private langChangeSubscription = this.translate.translate.onLangChange.subscribe(() => {\n        this.update();\n    });\n\n    // native ChartJS resizing doesn't work well in DirectAdmin Evolution skin\n    private resizeSubscription = fromEvent(window, 'resize').pipe(\n        debounceTime(400),\n    ).subscribe(() => {\n        this.chart.resize();\n    });\n\n    constructor(\n        public element: ElementRef,\n        public translate: TranslateService,\n    ) {\n        this.updateTranslation();\n        Chart.register(...registerables);\n\n        let context = this.element.nativeElement.getContext('2d');\n        let options = {\n            type: 'doughnut' as ChartType,\n            data: this.getData(),\n            options: {\n                aspectRatio: 1.6666666,\n                maintainAspectRatio: false,\n                elements: {\n                    arc: {\n                      borderWidth: 0.5,\n                    }\n                },\n                cutout: '65%',\n                plugins: {\n                    legend: {\n                        labels: {\n                            usePointStyle: true,\n                            fontColor: '#000',\n                        },\n                    },\n                    tooltips: {\n                        callbacks: {\n                            label: (tooltipItems, data) => {\n                                return this.getLabels()[tooltipItems.index];\n                            }\n                        }\n                    },\n                    tooltip: {\n                        usePointStyle: true,\n                        callbacks: {\n                            labelPointStyle: function(context) {\n                                return {\n                                    pointStyle: 'circle' as 'circle',\n                                    rotation: 0,\n                                };\n                            }\n                        },\n                        boxPadding: 3,\n                        caretSize: 0,\n                        cornerRadius: 3,\n                    },\n                },\n            },\n            plugins: [{\n                id: 'legendMargin',\n                beforeInit: (chart, legend, options) => {\n                    const originalFit = chart.legend.fit;\n                    chart.legend.fit = function fit() {\n                        // to use `this` correctly inside it\n                        originalFit.bind(chart.legend)();\n                        return this.height += 25;\n                    }\n                }\n            }],\n        };\n\n        this.chart = new Chart(context, options);\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.data) return;\n\n        this.data = changes.data.currentValue;\n        this.update();\n    }\n\n    async update() {\n        await this.updateTranslation();\n        this.chart.data = this.getData();\n        this.chart.resize();\n        this.chart.update();\n    }\n\n    ngOnDestroy(): any {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n\n        this.langChangeSubscription.unsubscribe();\n        this.resizeSubscription.unsubscribe();\n    }\n\n    getData(): any {\n        return {\n            labels: this.getLabels(),\n            datasets: [{\n                backgroundColor: [\"#4EB675\", \"#D95140\"],\n                data: this.data,\n            }],\n        };\n    }\n\n    getLabels() {\n        return [\n            `${this.ham}: ${this.data[0]} (${this.percents[0]}%)`,\n            `${this.spam}: ${this.data[1]} (${this.percents[1]}%)`,\n        ]\n    }\n\n    private async updateTranslation() {\n        this.spam = await this.translate.t('dashboard.incidentsAndAlerts.spam_ham.spam');\n        this.ham = await this.translate.t('dashboard.incidentsAndAlerts.spam_ham.ham');\n    }\n}\n","import { Subscription } from 'rxjs';\nimport { AfterContentInit, Component, Inject, OnDestroy } from '@angular/core';\nimport { DataLoader, DataLoaderImpl } from 'app/utils/table/data-loader';\n\n@Component({\n    selector: 'i360-doughnut',\n    template: `<div><canvas baseDoughnut [data]=\"data\" [percents]=\"percents\"></canvas></div>`,\n})\nexport class DoughnutComponent implements AfterContentInit, OnDestroy {\n    data: any[];\n    percents: any[];\n    onLoaded = Subscription.EMPTY;\n    constructor(@Inject(DataLoaderImpl) private dataLoader: DataLoader) {}\n\n    ngAfterContentInit() {\n        this.onLoaded = this.dataLoader.loaded.subscribe(data => this.load(data));\n    }\n    async load(res: any) {\n        this.data = [\n            (res[0][0] || []).reduce((a, b) => Number(a) + Number(b[1]), 0),\n            (res[0][1] || []).reduce((a, b) => Number(a) + Number(b[1]), 0),\n        ];\n        this.percents = [\n            (this.data[0] / (this.data[0] + this.data[1]) * 100).toFixed(1),\n            (this.data[1] / (this.data[0] + this.data[1]) * 100).toFixed(1),\n        ];\n    }\n    ngOnDestroy() {\n        this.onLoaded.unsubscribe();\n    }\n}\n","<ng-container *ngIf=\"(loadedData | async)?.length === 0; else dataFound\"></ng-container>\n<ng-template #dataFound>\n    <div class=\"i360-chart-tile-header\">\n        <div class=\"i360-chart-tile-title-section\">\n            <div class=\"i360-chart-tile-title\" role=\"heading\" aria-level=\"2\">\n                {{ 'dashboard.incidentsAndAlerts.' + paramName + '.title' | translate }}\n            </div>\n            <div class=\"i360-chart-tile-title-description\">\n                <div>{{ 'dashboard.incidentsAndAlerts.' + paramName + '.description' | translate }}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"i360-chart-tile-content-wrapper-2\">\n        <div class=\"i360-chart-tile-content-wrapper\">\n            <div class=\"i360-chart-tile-content\">\n                <i360-doughnut></i360-doughnut>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { DataLoader, DataLoaderImpl } from 'app/utils/table/data-loader';\nimport { ServerRequestDirective } from 'app/components/dashboard/request.directive';\nimport {\n    ChartType, DashboardResponse, DashboardResponseData,\n} from 'app/components/dashboard/dashboard.service';\nimport { filter, map, take } from 'rxjs';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport { WidgetDirective } from 'app/utils/table/widgets/widget';\n\n@Component({\n    selector: 'i360-doughnut-tile',\n    templateUrl: './doughnut-tile.component.html',\n    styleUrls: ['./doughnut-tile.component.scss'],\n    providers: [{\n        provide: DataLoaderImpl,\n        useExisting: DoughnutTileComponent,\n    }],\n})\nexport class DoughnutTileComponent extends WidgetDirective\n        implements DataLoader<DashboardResponseData> {\n    prevData: DashboardResponseData;\n    @Input() paramName;\n    loadedData = this.request.loaded.pipe(\n        filter(data => typeof data[this.paramName] !== 'undefined'),\n        map(data => data[this.paramName].data),\n    );\n    loaded = this.loadedData.pipe(\n        filter(data => {\n            const allowChartUpdate = data !== this.prevData && !!data && !!data.length;\n            this.prevData = data;\n            return allowChartUpdate;\n        }),\n    );\n    availableValues = ChartType;\n    defaultValue = this.availableValues.histogram;\n    constructor(\n        private request: ServerRequestDirective<DashboardResponse>,\n        public translateService: TranslateService\n    ) {\n        super(null, request);\n        // should help to set prevData to smth except undefined, indicating data loaded state\n        this.loadedData.pipe(take(1)).subscribe(() => this.prevData = null);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ModalEntry } from 'app/utils/modals/entry';\n\n@Component({\n    template: `\n        <i360-modal-content>\n            <ng-container modal-title>\n                {{ 'dashboard.serverIdWidget.deleteModal.title' | translate }}\n            </ng-container>\n            <ng-container modal-body>\n                {{ 'dashboard.serverIdWidget.deleteModal.body' | translate }}\n                <div>\n                    {{server}}\n                </div>\n            </ng-container>\n        </i360-modal-content>\n    `,\n})\nexport class DeleteServerIdModalComponent extends ModalEntry<string, boolean> {\n    constructor(@Inject(MAT_DIALOG_DATA) public server: string) {\n        super();\n    }\n}\n\n","import { ModalEntry } from 'app/utils/modals/entry';\nimport { Component, Inject } from '@angular/core';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { I360Validators } from 'app/utils/validator/validators';\nimport { AppState } from 'app/core/app.service';\n\ninterface DialogData {\n    predefinedValue: string[];\n    invalidIds: string[];\n}\n\n@Component({\n    selector: 'add-server-id-modal',\n    templateUrl: './add-server-id-modal.component.html',\n    styleUrls: ['./add-server-id-modal.component.scss'],\n})\nexport class AddServerIdModalComponent extends ModalEntry<DialogData, {ids: string[]}> {\n    form = this.formBuilder.group({\n        ids: this.formBuilder.control(this.data.predefinedValue, [\n            I360Validators.listOfServerId,\n            ({value}: {value: string[]}): void|Object => {\n                if (value\n                    && this.data.invalidIds.length\n                    && this.data.invalidIds.some(id => value.includes(id))) {\n                    return {\n                        listOfServerId: {\n                            ids: this.data.invalidIds.filter(id => value.includes(id)),\n                        },\n                    };\n                }\n            },\n        ]),\n    });\n    constructor(private formBuilder: I360FormBuilder,\n                public appState: AppState,\n                @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n        super();\n        if (this.data.invalidIds.length) {\n            this.form.markAsDirty({children: true});\n        }\n    }\n}\n","<i360-modal-content [confirmDisabledAlways]=\"appState.demo\"\n                    [confirmNote]=\"'dashboard.serverIdWidget.addModal.confirmNote' | translate\">\n    <ng-container modal-title>\n        {{ 'dashboard.serverIdWidget.addModal.title' | translate }}\n    </ng-container>\n    <ng-container modal-body>\n        <form [formGroup]=\"form\">\n            <div class=\"i360-add-server-id-modal-description\">\n                {{ 'dashboard.serverIdWidget.addModal.description' | translate}}\n            </div>\n            <cl-text-input id=\"add-server-id-input\">\n                <textarea cdkFocusInitial\n                          commaSeparatedInput\n                          matInput\n                          cdkTextareaAutosize\n                          cdkAutosizeMinRows=\"2\"\n                          cdkAutosizeMaxRows=\"7\"\n                          formControlName=\"ids\">\n                </textarea>\n                <mat-label>{{ 'dashboard.serverIdWidget.addModal.placeholder' | translate }}</mat-label>\n                <mat-icon matSuffix [matTooltip]=\"'dashboard.serverIdWidget.addModal.nearInputTooltip' | translate\"\n                          svgIcon=\"icon-question\"></mat-icon>\n            </cl-text-input>\n            <div class=\"i360-add-server-id-modal-note\">{{ 'dashboard.serverIdWidget.addModal.note' | translate }}</div>\n            <i360-message #message\n                          [theme]=\"message.Theme.white\"\n                          icon=\"icon-info\">\n                <div>\n                    <div class=\"i360-paragraph\">\n                        {{ 'dashboard.serverIdWidget.addModal.description2' | translate | translateCut: 0}}\n                        <div i360-button\n                             role=\"presentation\"\n                             class=\"i360-shadow-button\">\n                            <mat-icon svgIcon=\"icon-key\"></mat-icon>\n                        </div>\n                        {{ 'dashboard.serverIdWidget.addModal.description2' | translate | translateCut: 1}}\n                    </div>\n\n                    <div class=\"i360-paragraph\">\n                        {{ 'dashboard.serverIdWidget.addModal.description3' | translate | translateCut: 0}}\n                        <span class=\"i360-file\">/var/imunify360/license.json</span>\n                        {{ 'dashboard.serverIdWidget.addModal.description3' | translate | translateCut: 1}}\n                    </div>\n                    <div class=\"i360-paragraph\">\n                        <a class=\"i360-dashboard-link\"\n                           href=\"https://docs.imunify360.com/dashboard/#dashboard\"\n                           target=\"_blank\">\n                            {{ 'dashboard.serverIdWidget.addModal.description4' | translate}}\n                        </a>\n                    </div>\n                </div>\n            </i360-message>\n        </form>\n    </ng-container>\n</i360-modal-content>\n","<form class=\"i360-bulk-actions-v2\" [formGroup]=\"form\" (i360Submit)=\"onSubmit()\">\n    <cl-text-input matAutocompleteOrigin #origin=\"matAutocompleteOrigin\" [i360Errors]=\"false\">\n        <input matInput\n               #input\n               id=\"search-server-id-input\"\n               (focus)=\"inputFocused.next('')\"\n               [matAutocompleteConnectedTo]=\"origin\"\n               [matAutocomplete]=\"auto\" formControlName=\"domain\">\n        <mat-label>{{ 'dashboard.serverIdWidget.placeholder' | translate }}</mat-label>\n        <mat-icon matSuffix class=\"i360-expander-icon\">play_arrow</mat-icon>\n    </cl-text-input>\n    <mat-autocomplete (optionSelected)=\"onSubmit()\" #auto=\"matAutocomplete\">\n        <mat-option class=\"i360-server-id-option\"\n                        *ngFor=\"let item of filteredDomains | async\"\n                        [class.i360-active]=\"item.server_id === widget.value\"\n                        [value]=\"item.id\">\n                <mat-icon *ngIf=\"item.server_id === (licenseState.license|async).id\">dns</mat-icon>\n            <div class=\"i360-server-id-option-data\">\n                    <div class=\"i360-server-id-option-domain\">{{item.id}}</div>\n                    <div class=\"i360-server-id-option-status i360-severity-text-{{item.severity}}\">\n                        {{ 'dashboard.serverIdWidget.serverStatus' | translate: {severity: item.severity} }}\n                    </div>\n                </div>\n        </mat-option>\n    </mat-autocomplete>\n    <button i360-button\n            [i360CopyOnClick]=\"widget.value\"\n            [copyOnClickTooltip]=\"tooltip\"\n            #tooltip=\"matTooltip\"\n            matTooltip=\"{{ 'dashboard.serverIdWidget.keyButtonTooltip' | translate }}\">\n        <mat-icon svgIcon=\"icon-key\" matPrefix></mat-icon>\n        {{ 'dashboard.serverIdWidget.keyButtonText' | translate }}\n    </button>\n    <button i360-button\n            id=\"delete-server-id-button\"\n            [disabled]=\"widget.value === (licenseState.license|async)?.id\"\n            (click)=\"deleteServerId()\"\n            matTooltip=\"{{ 'dashboard.serverIdWidget.trashButtonTooltip' | translate }}\">\n        <mat-icon svgIcon=\"icon-delete\" matPrefix></mat-icon>\n        {{ 'dashboard.serverIdWidget.trashButtonText' | translate }}\n    </button>\n    <button i360-button\n            [primary]=\"true\"\n            (click)=\"addServerIds()\"\n            id=\"add-server-id-button\">\n        <mat-icon matPrefix>add_circle</mat-icon>\n        {{ 'dashboard.serverIdWidget.addServerButtonText' | translate }}\n    </button>\n</form>\n","import {\n    DashboardServerIdsResponse,\n    DashboardServerIdsResponseItem, DashboardService, ServerSeverity,\n} from 'app/components/dashboard/dashboard.service';\nimport { cache } from 'app/utils/cache';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport {\n    concat, of, Observable, Subject,\n    catchError, debounceTime, first, map,\n    startWith, switchMap, take, takeUntil, tap,\n    mergeWith, firstValueFrom, throwError\n} from 'rxjs';\nimport { WidgetDirective } from 'app/utils/table/widgets/widget';\nimport { LicenseState } from 'app/services/license-state';\nimport Raven from 'raven-js';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { ModalService } from 'app/utils/modals/modal.service';\nimport { LoaderDirective } from 'app/utils/loader/loader.directive';\nimport { useLoader } from 'app/utils/loader/decorators';\nimport {\n    DeleteServerIdModalComponent,\n} from 'app/components/dashboard/delete-server-id-modal/delete-server-id-modal.component';\nimport {\n    AddServerIdModalComponent,\n} from 'app/components/dashboard/add-server-id-modal/add-server-id-modal.component';\nimport { NotificationsService } from 'app/services/notifications';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { GroupNotificationsService } from 'app/services/group-notifications';\nimport { DashboardServerIdsResponseInServer } from '@imunify360-api/dashboard';\nimport { FiltersService } from 'app/services/filters';\n\nfunction getItemByServerId(entries: DashboardServerIdsResponse,\n                           serverId: string): DashboardServerIdsResponseItem|null {\n    const entry = entries.find(entry => entry.server_id === serverId)!;\n    if (entry) {\n        return entry;\n    }\n    return null;\n}\n\n@Component({\n    selector: 'i360-server-id-widget',\n    encapsulation: ViewEncapsulation.None,\n    templateUrl: './server-id-widget.component.html',\n    styleUrls: ['./server-id-widget.component.scss'],\n})\nexport class ServerIdWidgetComponent implements AfterViewInit, OnDestroy {\n    readonly delegatePriority = 3;\n    @ViewChild('input', {read: ElementRef, static: true}) input: ElementRef<HTMLInputElement>;\n    serverIdEntries = new Subject<DashboardServerIdsResponse>();\n    cached = this.serverIdEntries.pipe(cache(Infinity));\n    form = this.formBuilder.group({\n        domain: this.formBuilder.control('', undefined, [({value}) => {\n            return this.cached.pipe(\n                map(domains => domains.some(item => item.id === value)\n                    ? null : {required: {what: 'domain'}}),\n                take(1),\n            );\n        }]),\n    });\n    inputFocused = new Subject<string>();\n    filteredDomains = this.form.controls.domain.valueChanges.pipe(\n        startWith(''),\n        debounceTime(100),\n        mergeWith(this.inputFocused),\n        switchMap(value => this.cached.pipe(\n            map(domains => domains.filter(domain => domain.id.includes(value)),\n        ))),\n    );\n    private destroyed = new Subject<void>();\n    currentActiveItem: DashboardServerIdsResponseItem;\n    poorServersCount = 0;\n    constructor(private dashboardService: DashboardService,\n                public widget: WidgetDirective,\n                public licenseState: LicenseState,\n                private loader: LoaderDirective,\n                private filtersService: FiltersService,\n                private modalService: ModalService,\n                private groupNotifications: GroupNotificationsService,\n                private notifications: NotificationsService,\n                private formBuilder: I360FormBuilder) {\n        widget.delegate = this;\n        widget.paramName = 'server_id';\n        concat(\n            this.licenseState.license.pipe(\n                first(license => !!license.id),\n                tap(license => {\n                    this.widget.defaultValue = license.id;\n                    this.widget.setValue(this.widget.defaultValue);\n                }),\n            ),\n            this.widget.valueChanged,\n        ).pipe(\n            switchMap(() => this.cached.pipe(\n                take(1),\n            )),\n        ).subscribe(entries => {\n            const item = getItemByServerId(entries, this.widget.value);\n            if (item !== null) {\n                this.currentActiveItem = item;\n                this.form.setValue({domain: this.currentActiveItem.id});\n            } else {\n                Raven.captureException(\n                    new Error('Probably server_id of current server is not present in the list'));\n            }\n        });\n        this.getServerIds().subscribe();\n    }\n    ngAfterViewInit() {\n        this.widget.valueChanged.pipe(takeUntil(this.destroyed))\n            .subscribe((reload) => {\n                if (reload) {\n                    this.filtersService.setParam(this.widget.paramName, this.widget.value);\n                }\n            });\n    }\n    getServerIds(predefinedIds?: Observable<DashboardServerIdsResponseInServer>) {\n        return this.dashboardService.getServerIds(predefinedIds).pipe(\n            catchError(e => {\n                this.notifications.error('notifications.internalError');\n                throw e;\n            }),\n            tap(entries => {\n                // @ts-ignore\n                this.serverIdEntries.next(entries);\n                // @ts-ignore\n                this.poorServersCount = entries\n                    .filter(item => item.severity === ServerSeverity.poor).length;\n            }),\n            takeUntil(this.destroyed),\n        );\n    }\n    onSubmit() {\n        this.cached.pipe(\n            take(1),\n        ).subscribe(entries => {\n            if (document.activeElement === this.input.nativeElement) {\n                this.input.nativeElement.blur();\n            }\n            const entry = entries.find(entry => entry.id === this.form.value.domain)!;\n            this.widget.setValue(entry.server_id, true);\n        });\n    }\n\n    deleteServerId(): void {\n        const id = this.widget.value;\n\n        this.cached.pipe(take(1))\n            .subscribe(async entries => {\n                const domain = getItemByServerId(entries, id)!.id;\n                if (await this.openDeleteServerConfirm(domain)) {\n                    await this.deleteServer(id);\n                }\n            });\n    }\n\n    private openDeleteServerConfirm(domain: string): Promise<boolean> {\n        return this.modalService.open(DeleteServerIdModalComponent, {\n            data: domain,\n        });\n    }\n\n    @useLoader\n    private async deleteServer(server_id: string): Promise<void> {\n        await firstValueFrom(this.dashboardService.deleteServerId(server_id).pipe(\n            tap(entries => {\n                this.getServerIds(of({result: entries.result})).subscribe(() => {\n                    this.widget.setValue(entries.result[0].server_id, true);\n                });\n            }),\n            catchError(e => {\n                this.notifications.error('notifications.internalError');\n                return throwError(() => e);\n            }),\n        ), { defaultValue: undefined });\n    }\n\n    async addServerIds(predefinedValue: string[] = [], invalidIds: string[] = []) {\n        const result = await this.modalService.open(AddServerIdModalComponent, {\n            data: {\n                predefinedValue,\n                invalidIds,\n            },\n        });\n        if (result !== false) {\n            const ids = result.ids;\n            await this.addServer(ids);\n        }\n    }\n\n    @useLoader\n    private async addServer(ids: string[]) {\n        await firstValueFrom(this.dashboardService.addServerId(ids).pipe(\n            tap(response => {\n                const entries = response.result;\n                const invalidIds = response.errors.map(item => item.server_id);\n                this.groupNotifications.forAction('add-server-ids', {\n                    succeeded: entries\n                        .filter(entry => ids.includes(entry.server_id))\n                        .map(entry => entry.nodename || entry.ip!),\n                    failed: invalidIds,\n                });\n                this.getServerIds(of({result: entries})).subscribe(() => {\n                    if (response.errors.length) {\n                        this.addServerIds(invalidIds, invalidIds);\n                    } else {\n                        this.widget.setValue(ids[ids.length - 1], true);\n                    }\n                });\n            }),\n            catchError((e: HttpErrorResponse) => {\n                if (e.status === 401) {\n                    this.notifications\n                        .error('dashboard.serverIdWidget.addModal.authenticationError');\n                    this.addServerIds(ids);\n                    return of(undefined);\n                } else {\n                    this.notifications.error('notifications.internalError');\n                    return throwError(() => e);\n                }\n            }),\n        ), { defaultValue: undefined });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n}\n","<div class=\"i360-recommendations\" *ngIf=\"item\">\n    <div class=\"i360-recommendations-section\">\n        <div class=\"i360-recommendations-title\" role=\"heading\" aria-level=\"3\">\n            {{ 'dashboard.recommendations.status.title' | translate }}\n        </div>\n        <div class=\"i360-recommendations-status-domain\">\n            {{item.id}}\n        </div>\n        <div class=\"i360-recommendations-status-indicator\">\n            <div class=\"i360-recommendations-status-indicator-circle i360-severity-border-{{item.severity}}\">\n                <div class=\"i360-issues-count i360-severity-text-{{this.item.recommendations.poor.length\n                        ? ServerSeverity.poor : ServerSeverity.medium}}\" *ngIf=\"issuesCount\">\n                    <div class=\"i360-count\">{{ issuesCount }}</div>\n                    {{ 'dashboard.recommendations.status.issuesCount' | translate: { count: issuesCount } }}\n                </div>\n            </div>\n            <div class=\"i360-recommendations-status-indicator-description\">\n                <div class=\"i360-recommendations-status-indicator-description-title\"\n                     role=\"heading\" aria-level=\"4\">\n                    {{ 'dashboard.recommendations.status.' + item.severity + '.title' | translate }}\n                </div>\n                <div class=\"i360-recommendations-status-indicator-description-subtitle i360-severity-text-{{item.severity}}\">\n                    {{ 'dashboard.recommendations.status.' + item.severity + '.subtitle' | translate }}\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"i360-recommendations-section\">\n        <div class=\"i360-recommendations-lists-title-section\">\n            <div class=\"i360-recommendations-title\"\n                 role=\"heading\"\n                 aria-level=\"3\">{{ 'dashboard.recommendations.lists.title' | translate }}</div>\n            <div class=\"i360-recommendations-lists-interval\">\n                <mat-icon>watch_later</mat-icon> {{ 'dashboard.recommendations.lists.updateInterval' | translate }}\n            </div>\n        </div>\n        <div *ngIf=\"noRecommendations\" class=\"i360-recommendations-no\">\n            {{ 'dashboard.recommendations.lists.no' | translate }}\n            <mat-icon svgIcon=\"undraw-server-down\"></mat-icon>\n        </div>\n        <i360-recommendations-list [severity]=\"ServerSeverity.poor\"></i360-recommendations-list>\n        <i360-recommendations-list [severity]=\"ServerSeverity.medium\"></i360-recommendations-list>\n        <i360-recommendations-list [severity]=\"ServerSeverity.good\"></i360-recommendations-list>\n    </div>\n</div>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport {\n    DashboardServerIdsResponseItem, ServerSeverity,\n} from 'app/components/dashboard/dashboard.service';\n\n@Component({\n    selector: 'i360-recommendations',\n    templateUrl: './recommendations.component.html',\n    styleUrls: ['./recommendations.component.scss'],\n})\nexport class RecommendationsComponent implements OnChanges {\n    ServerSeverity = ServerSeverity;\n    @Input() item: DashboardServerIdsResponseItem;\n    noRecommendations: boolean;\n    issuesCount: number;\n    ngOnChanges() {\n        if (this.item) {\n            this.noRecommendations = !this.item.recommendations.good.length\n                && !this.item.recommendations.medium.length\n                && !this.item.recommendations.poor.length;\n            this.issuesCount = this.item.recommendations.poor.length +\n                this.item.recommendations.medium.length;\n        }\n    }\n}\n","<div i360-common-widgets-container i360Loader>\n    <div class=\"i360-header-section\">\n        <i360-header>\n            {{ 'menu.dashboard' | translate }}\n            <div class=\"i360-status-warning\" *ngIf=\"serverIdWidget.poorServersCount\">\n                {{ 'dashboard.statusWarning.text' | translate: {count: serverIdWidget.poorServersCount} }}\n                <mat-icon [matTooltip]=\"'dashboard.statusWarning.tooltip' | translate\">info</mat-icon>\n            </div>\n        </i360-header>\n        <i360-server-id-widget #serverIdWidget i360-widget i360-common-widget></i360-server-id-widget>\n    </div>\n    <div class=\"i360-dashboard-line\"></div>\n    <i360-recommendations [item]=\"serverIdWidget.currentActiveItem\"></i360-recommendations>\n    <i360-header [subheader]=\"'dashboard.incidentsAndAlerts.description' | translate\">\n        {{ 'dashboard.incidentsAndAlerts.title' | translate }}\n    </i360-header>\n    <div i360ServerRequest [getData]=\"loadChartData\">\n        <i360-widget i360-flat-timeframe></i360-widget>\n        <div *ngIf=\"isEmpty\" class=\"i360-dashboard-empty\">\n            <mat-icon svgIcon=\"dashboard-no-data-found\"></mat-icon>\n            <div class=\"i360-text\">\n                {{ 'dashboard.incidentsAndAlerts.empty' | translate }}\n                <div>\n                    {{ 'dashboard.incidentsAndAlerts.help' | translate | translateCut: 0 }}\n                    <a href=\"https://docs.imunify360.com/dashboard/\" class=\"i360-dashboard-link\" target=\"_blank\">{{ 'dashboard.incidentsAndAlerts.help' | translate | translateCut: 1 }}</a>\n                    {{ 'dashboard.incidentsAndAlerts.help' | translate | translateCut: 2 }}\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"!isEmpty\" class=\"i360-dashboard-counters\">\n            <div class=\"i360-dashboard-counter\" *ngFor=\"let tile of fullTiles\">\n                <div class=\"i360-dashboard-counter-title\">\n                    {{ 'dashboard.incidentsAndAlerts.' + tile.paramName + '.numTitle' | translate }}\n                </div>\n                <div class=\"i360-dashboard-counter-number\">\n                    {{ tile.number}}\n                </div>\n            </div>\n        </div>\n        <div class=\"i360-chart-tiles\">\n            <i360-chart-tile [paramName]=\"ChartName.num_of_alerts\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.num_of_alerts.description' | translate }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.num_of_mrs\" [heatmapAllowed]=\"false\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.num_of_mrs.description' | translate\n                    | translateCut: 0 }}\n                    <ng-container *ngIf=\"serverIdWidget.widget.defaultValue === serverIdWidget.widget.value\">\n                    <a class=\"i360-dashboard-link\" [routerLink]=\"['/', imunify360Package, 'admin', 'malware', 'user-list']\">\n                        {{ 'dashboard.incidentsAndAlerts.num_of_mrs.description' | translate\n                        | translateCut: 1 }}\n                    </a>\n                    {{ 'dashboard.incidentsAndAlerts.num_of_mrs.description' | translate\n                    | translateCut: 2 }}\n                    </ng-container>\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.num_of_cleanups\" [heatmapAllowed]=\"false\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.num_of_cleanups.description' | translate\n                    | translateCut: 0 }}\n                    <ng-container *ngIf=\"serverIdWidget.widget.defaultValue === serverIdWidget.widget.value\">\n                        <a class=\"i360-dashboard-link\" [routerLink]=\"['/', imunify360Package, 'admin', 'malware', 'history']\">\n                            {{ 'dashboard.incidentsAndAlerts.num_of_cleanups.description' | translate\n                            | translateCut: 1 }}\n                        </a>\n                        {{ 'dashboard.incidentsAndAlerts.num_of_cleanups.description' | translate\n                        | translateCut: 2 }}\n                    </ng-container>\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.captcha_blocked\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.captcha_blocked.description' | translate | translateCut: 0 }}\n                    <a href=\"https://docs.imunify360.com/features/#anti-bot-protection\"\n                       class=\"i360-dashboard-link\"\n                       target=\"_blank\">{{ 'dashboard.incidentsAndAlerts.captcha_blocked.description' | translate | translateCut: 1 }}</a>\n                    {{ 'dashboard.incidentsAndAlerts.captcha_blocked.description' | translate | translateCut: 2 }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.waf_alerts\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.waf_alerts.description' | translate }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.bruteforce_attacks\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.bruteforce_attacks.description' | translate }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.ossec_alerts\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.ossec_alerts.description' | translate }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-chart-tile [paramName]=\"ChartName.denied_bot_attacks\">\n                <ng-container description>\n                    {{ 'dashboard.incidentsAndAlerts.denied_bot_attacks.description' | translate }}\n                </ng-container>\n            </i360-chart-tile>\n            <i360-doughnut-tile [paramName]=\"ChartName.spam_ham\"></i360-doughnut-tile>\n        </div>\n        <div *ngIf=\"!isEmpty\" class=\"i360-dashboard-bottom-warning\">\n            <div class=\"i360-dashboard-bottom-warning-title\">\n                <mat-icon>info</mat-icon>{{ 'dashboard.incidentsAndAlerts.bottomWarning.title' | translate }}\n            </div>\n            <div class=\"i360-dashboard-bottom-warning-text\">\n                {{ 'dashboard.incidentsAndAlerts.bottomWarning.text' | translate | translateCut: 0 }}\n                <a class=\"i360-dashboard-link\" href=\"https://docs.imunify360.com/dashboard/#charts\" target=\"_blank\">{{ 'dashboard.incidentsAndAlerts.bottomWarning.text' | translate | translateCut: 1 }}</a>\n                {{ 'dashboard.incidentsAndAlerts.bottomWarning.text' | translate | translateCut: 2 }}\n            </div>\n        </div>\n    </div>\n</div>\n","import {\n    AfterViewInit,\n    Component,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {\n    combineLatest,\n    EMPTY,\n    forkJoin,\n    of,\n    Subject,\n    timer,\n    catchError,\n    debounceTime,\n    map,\n    repeatWhen,\n    switchMap,\n    takeUntil\n} from 'rxjs';\nimport { ChartType, DashboardResponse, DashboardService,\n} from 'app/components/dashboard/dashboard.service';\nimport { ChartName } from '@imunify360-api/dashboard';\nimport { ChartTileComponent } from 'app/components/dashboard/chart-tile/chart-tile.component';\nimport { ServerRequestDirective } from 'app/components/dashboard/request.directive';\nimport { FlatTimeframeWidgetComponent } from 'app/utils/table/widgets/content/flat/flat-timeframe';\nimport { LicenseAPI, Package } from '@imunify360-api/license';\nimport { getArrayInObject } from 'app/utils/helper';\nimport { DoughnutTileComponent } from 'app/components/dashboard/doughnut/doughnut-tile.component';\nimport { XHR } from 'app/utils/xhr/xhr';\nimport { REFRESH_INTERVAL } from 'app/components/installation/slider/installation-slider.component';\n\nexport const timeframeToGroupByMapping = {\n    '24h': 'hour',\n    '7d': '6h',\n    '30d': 'day',\n};\n\n@Component({\n    selector: 'i360-dashboard',\n    encapsulation: ViewEncapsulation.None,\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements AfterViewInit, OnInit, OnDestroy {\n    savedItems: DashboardResponse | null;\n    imunify360Package = Package.imunify360;\n    ChartName = ChartName;\n    isEmpty = false;\n    @ViewChildren(ChartTileComponent) tiles: QueryList<ChartTileComponent>;\n    @ViewChildren(DoughnutTileComponent) doughnutTiles: QueryList<DoughnutTileComponent>;\n    fullTiles: ChartTileComponent[] = [];\n    @ViewChild(ServerRequestDirective, {static: true})\n    request: ServerRequestDirective<DashboardResponse>;\n    @ViewChild(FlatTimeframeWidgetComponent, {static: true})\n    timeframe: FlatTimeframeWidgetComponent;\n    private previousParams = {};\n    private destroyed = new Subject<void>();\n\n    constructor(\n        private dashboardService: DashboardService,\n        private xhr: XHR,\n\n    ) {}\n\n    ngOnInit(): void {\n        // For the trigger all interceptors\n        this.versionRequest();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    ngAfterViewInit() {\n        combineLatest(\n            [\n                ...this.tiles.toArray().map(tile => tile.loadedData),\n                ...this.doughnutTiles.toArray().map(tile => tile.loadedData),\n            ],\n        ).pipe(\n            debounceTime(0),\n        ).subscribe(data => {\n            this.isEmpty = data.every(item => {\n                if (!item) {\n                    return false;\n                } else if (item.length === 0) {\n                    return true;\n                }\n                return false;\n            });\n            this.fullTiles = this.tiles.filter(tile => !!tile.number);\n        });\n    }\n    addGroupBy(params: any) {\n        // need to extract timeframe value since here timeframe\n        // was already unpacked into since and for\n        params['group_by'] = <any>timeframeToGroupByMapping[<any>this.timeframe.widget.value];\n        return params;\n    }\n\n    /**\n     * Optimize server participation, do not requesting\n     * data if it was loaded earlier, in some cases\n     */\n    loadChartData = (_params: {\n        [K in keyof ChartName]: ChartType\n    }) => {\n        const params = {\n            [ChartType.heatmap]: {\n                charts: [] as string[],\n            },\n            [ChartType.histogram]: {\n                charts: [] as string[],\n            },\n        };\n        if (_params[ChartName.spam_ham]) {\n            _params[ChartName.ham] = _params[ChartName.spam_ham];\n            _params[ChartName.spam] = _params[ChartName.spam_ham];\n            delete _params[ChartName.spam_ham];\n        }\n        const entries = Object.entries(_params);\n        // if only chart type has changed\n        // (e.g. there was a switch histogram=>heatmap for some chart)\n        // only that one specific chart can be loaded\n        // but if something other was changes (server_id, timeframe)\n        // need to reload all the charts\n        if (entries.some(([key, value]) => {\n            return !(key in ChartName) && this.previousParams[key] !== value;\n        })) {\n            this.savedItems = null;\n        }\n        this.previousParams = _params;\n        for (const [paramName, paramValue] of entries) {\n            if (paramName in ChartName) {\n                if (!this.savedItems || this.savedItems[paramName].type !== paramValue) {\n                    // ChartName parameter should be added only if that data was not loaded before\n                    // or there is no saved data\n                    // (or common parameter, e.g. server_id, timeframe has changed)\n                    params[paramValue].charts.push(paramName);\n                }\n            } else {\n                // server_id, timeframe should be added to both of requests\n                params.heatmap[paramName] = paramValue;\n                params.histogram[paramName] = paramValue;\n            }\n        }\n        return forkJoin([\n            (params.histogram.charts.length\n                // group_by parameter needed only for histogram\n                ? this.dashboardService.getHistogramCharts(this.addGroupBy(params.histogram))\n                : of(null)),\n            (params.heatmap.charts.length\n                ? this.dashboardService.getHeatmapCharts(params.heatmap)\n                : of(null)),\n        ]).pipe(\n            catchError(() => of([\n                null,\n                null,\n            ])),\n            map(([line, heatmap]) => {\n                if (this.savedItems === null) {\n                    this.savedItems = {};\n                }\n                for (const name of params.histogram.charts) {\n                    this.savedItems[name] = {\n                        type: ChartType.histogram,\n                        // line is null if there was an error requesting data\n                        // line[name] can not be null?\n                        data: line && line[name],\n                    };\n                }\n                for (const name of params.heatmap.charts) {\n                    this.savedItems[name] = {\n                        type: ChartType.heatmap,\n                        data: heatmap && heatmap[name],\n                    };\n                }\n                const spam = getArrayInObject(line, 'spam');\n                const ham = getArrayInObject(line, 'ham');\n                if (this.savedItems) {\n                    this.savedItems['spam_ham'] = {\n                        type: ChartType.doughnut,\n                        data: (ham || spam) ? [[ham, spam]] : [],\n                    };\n                }\n\n                // adapter, since server usually returns 'result' field\n                return {result: this.savedItems};\n            }),\n        );\n    }\n\n    versionRequest() {\n        timer(0).pipe(\n            switchMap(() => this.xhr.post(LicenseAPI.version())),\n            catchError(() => EMPTY),\n            repeatWhen((notifications) => notifications.pipe(\n                switchMap(() => timer(REFRESH_INTERVAL)),\n            )),\n            takeUntil(this.destroyed),\n        ).subscribe();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ServerSeverity } from 'app/components/dashboard/dashboard.service';\nimport { TranslateService } from 'app/utils/translate/translate.service';\nimport {\n    RecommendationsComponent,\n} from 'app/components/dashboard/recommendations/recommendations.component';\n\n@Component({\n    selector: 'i360-recommendations-list',\n    template: `\n        <ng-container *ngIf=\"recommendationsComponent.item && items.length\">\n            <div class=\"i360-recommendations-title i360-severity-{{severity}}\"\n                 role=\"heading\"\n                 aria-level=\"4\">\n                {{ 'dashboard.recommendations.lists.titles.' + severity | translate }}\n            </div>\n            <div *ngFor=\"let item of items; let index = index\"\n                 class=\"i360-recommendation\">\n                <div class=\"i360-recommendations-list-order\">#{{index + 1}}</div>\n                <div>\n                    <div class=\"i360-recommendations-list-date\">\n                        {{ (item.date * 1000) | dayjs: 'L LTS' }}\n                    </div>\n                    <div class=\"i360-recommendations-list-text\">\n                        <i360-default-if-not-translated\n                            [key]=\"'Noop: '\"><!--This key is already ignored-->\n                            <ng-template #default>{{ item.description }}</ng-template>\n                        </i360-default-if-not-translated>\n                    </div>\n                    <a class=\"i360-dashboard-link\"\n                       *ngIf=\"item.link\"\n                       target=\"_blank\"\n                       [href]=\"item.link\">\n                        <i360-default-if-not-translated\n                                [key]=\"'Noop: '\">\n                            <ng-template #default>{{ item.link_text }}</ng-template>\n                        </i360-default-if-not-translated>\n                    </a>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styleUrls: ['./recommendations-list.component.scss'],\n})\nexport class RecommendationsListComponent {\n    @Input() severity: ServerSeverity;\n    get items() {\n        return this.recommendationsComponent.item.recommendations[this.severity];\n    }\n    constructor(public recommendationsComponent: RecommendationsComponent,\n                public translate: TranslateService) {}\n}\n","import { DashboardService } from 'app/components/dashboard/dashboard.service';\nimport { I360NavigationTabsModule } from 'app/components/navigation-tabs/navigation-tabs.module';\nimport { RouterModule } from '@angular/router';\nimport { ChartsDirective } from './charts/charts.directive';\nimport { ChartsComponent } from './charts/charts.component';\nimport { LegendComponent } from './charts/legend.component';\nimport { I360TableModule } from 'app/utils/table/table.module';\nimport { I360TranslateModule } from 'app/utils/translate/translate.module';\nimport { CommonModule } from '@angular/common';\nimport { I360LoaderModule } from 'app/utils/loader/loader.module';\nimport { DashboardComponent } from './dashboard.component';\nimport { MapsComponent } from 'app/components/dashboard/maps/maps.component';\nimport { ChartTileComponent } from 'app/components/dashboard/chart-tile/chart-tile.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ServerRequestDirective } from 'app/components/dashboard/request.directive';\nimport { I360ButtonModule } from 'app/utils/button/button.module';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { SentryInterceptor } from 'app/interceptors/sentry.interceptor';\nimport { NgModule } from '@angular/core';\nimport { I360OverflowDetectorModule } from 'app/utils/overflow-detector/overflow-detector.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ServerIdWidgetComponent } from './server-id-widget/server-id-widget.component';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { I360ValidationModule } from 'app/utils/validator/validation.module';\nimport { I360CopyOnClickModule } from 'app/utils/copy-on-click/copy-on-click.module';\nimport {\n    DeleteServerIdModalComponent,\n} from 'app/components/dashboard/delete-server-id-modal/delete-server-id-modal.component';\nimport {\n    AddServerIdModalComponent,\n} from 'app/components/dashboard/add-server-id-modal/add-server-id-modal.component';\nimport { I360ModalModule } from 'app/utils/modals/modal.module';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { I360WarningMessageModule } from 'app/utils/warning-message/warning-message.module';\nimport {\n    RecommendationsListComponent,\n} from './recommendations-list/recommendations-list.component';\nimport { RecommendationsComponent } from './recommendations/recommendations.component';\nimport { DayjsPipesModule } from 'app/utils/pipes/dayjs';\nimport { TextInputModule } from '../text-input/text-input.module';\nimport {\n    I360CommaSeparatedInputModule,\n} from 'app/utils/comma-separated-input/comma-separated-input.module';\nimport { DoughnutComponent } from './doughnut/doughnut.component';\nimport { DoughnutDirective } from './doughnut/doughnut.directive';\nimport { DoughnutTileComponent } from './doughnut/doughnut-tile.component';\n\n@NgModule({\n    imports: [\n        RouterModule.forChild([{\n            path: '',\n            component: DashboardComponent,\n            canActivate: [DashboardService],\n            runGuardsAndResolvers: 'paramsOrQueryParamsChange',\n        }]),\n        I360TableModule,\n        I360TranslateModule,\n        I360LoaderModule,\n        I360NavigationTabsModule,\n        I360ButtonModule,\n        I360OverflowDetectorModule,\n        CommonModule,\n        MatTooltipModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatAutocompleteModule,\n        HttpClientModule,\n        I360ValidationModule,\n        I360CopyOnClickModule,\n        I360ModalModule,\n        TextFieldModule,\n        I360WarningMessageModule,\n        DayjsPipesModule,\n        TextInputModule,\n        I360CommaSeparatedInputModule,\n    ],\n    declarations: [\n        DashboardComponent,\n        ChartsDirective,\n        ChartsComponent,\n        DoughnutComponent,\n        DoughnutDirective,\n        DoughnutTileComponent,\n        LegendComponent,\n        MapsComponent,\n        ChartTileComponent,\n        ServerRequestDirective,\n        ServerIdWidgetComponent,\n        DeleteServerIdModalComponent,\n        AddServerIdModalComponent,\n        RecommendationsComponent,\n        RecommendationsListComponent,\n    ],\n    providers: [\n        DashboardService,\n        { provide: HTTP_INTERCEPTORS, useClass: SentryInterceptor, multi: true },\n    ],\n    exports: [\n        ServerRequestDirective,\n    ]\n})\nexport class DashboardModule {}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { timer, BehaviorSubject, Subscription, catchError, repeatWhen, switchMap, tap } from 'rxjs';\nimport { AgentStatus } from '@imunify360-api/misc';\nimport { AppState } from 'app/core/app.service';\nimport { InstallationBackendService } from './installation-backend.service';\nimport { LogChunk } from 'app/utils/log-box/log-box.component';\n\n\nexport const LOG_REFRESH_INTERVAL = 1000;\nexport const LOG_CHUNK_SIZE = 1024 * 1024;\n\n@Injectable()\nexport class InstallationService {\n    accumulatedLog = new BehaviorSubject<LogChunk[]>([]);\n    shownSlidesCount = 0;\n    private logCollector$ = timer(0).pipe(\n        switchMap(() => this.installationBackendService.status({\n            offset: this.offset,\n            limit: LOG_CHUNK_SIZE,\n        })),\n        tap(res => {\n            const items = res.data.items;\n            const offsetDiff = items.offset - this.offset;\n            this.offset = items.offset;\n            const chunk = items.log;\n            if (chunk) {\n                this.accumulatedLog.next(this.accumulatedLog.getValue().concat([{text: chunk}]));\n            }\n            if (offsetDiff === 0 && this.appState.imunifyStatus.value !== AgentStatus.INSTALLING) {\n                this.stopWatchingLog();\n            }\n            if (this.appState.imunifyStatus.value === AgentStatus.OK) {\n                this.router.navigate(['/'], {\n                    replaceUrl: true,\n                });\n            }\n        }),\n        catchError(() => timer(LOG_REFRESH_INTERVAL)),\n        repeatWhen(notifications => {\n            return notifications.pipe(\n                switchMap(() => timer(LOG_REFRESH_INTERVAL)),  // needed for unit tests\n            );\n        }),\n    );\n    private logCollectorSubscription = Subscription.EMPTY;\n    private offset = 0;\n\n    constructor(\n        private router: Router,\n        private appState: AppState,\n        private installationBackendService: InstallationBackendService,\n    ) {}\n\n    start() {\n        this.offset = 0;\n        this.accumulatedLog.next([]);\n        return this.installationBackendService.start();\n    }\n\n    startWatchingLog() {\n        this.logCollectorSubscription = this.logCollector$.subscribe();\n    }\n\n    stopWatchingLog() {\n        this.logCollectorSubscription.unsubscribe();\n    }\n}\n","<div class=\"i360-installation-wrapper\">\n    <div class=\"i360-installation-slider-wrapper\" *ngIf=\"((authState.isAdmin|async) && !isAv); else textForUser\">\n        <ng-template [ngTemplateOutlet]=\"activeSlide$ | async\"></ng-template>\n        <ng-template #installationSlide>\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">\n                        {{ \"installation.dashboard.title\" | translate }}\n                    </div>\n                    <div class=\"i360-paragraph\">\n                        {{ \"installation.dashboard.text\" | translate }}\n                    </div>\n                </div>\n                <preview-screenshot screenshotName=\"dashboard-preview\"></preview-screenshot>\n            </div>\n        </ng-template>\n        <ng-template #installationSlide>\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <preview-screenshot screenshotName=\"license-extension-preview\"></preview-screenshot>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">\n                        {{ \"installation.firewall.title\" | translate }}\n                    </div>\n                    <div class=\"i360-paragraph\">\n                        {{ \"installation.firewall.text\" | translate }}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #installationSlide >\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">\n                        {{ \"installation.malware.title\" | translate }}\n                    </div>\n                    <div class=\"i360-paragraph\">\n                        {{ \"installation.malware.text\" | translate }}\n                    </div>\n                </div>\n                <preview-screenshot screenshotName=\"malware-scanner-preview\"></preview-screenshot>\n            </div>\n        </ng-template>\n        <ng-template #installationSlide>\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <preview-screenshot screenshotName=\"proactive-preview\"></preview-screenshot>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">\n                        {{ \"installation.proactive.title\" | translate }}\n                    </div>\n                    <div class=\"i360-paragraph\">\n                        {{ \"installation.proactive.text\" | translate }}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #installationSlide>\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">\n                        {{ \"installation.patch.title\" | translate }}\n                    </div>\n                    <div class=\"i360-just-text\">\n                        <div>\n                            <div role=\"heading\" aria-level=\"2\">{{ \"installation.patch.subtitle1\" | translate }}</div>\n                            <div class=\"i360-paragraph\">{{ \"installation.patch.text1\" | translate }}</div>\n                        </div>\n                        <div>\n                            <div role=\"heading\" aria-level=\"2\">{{ \"installation.patch.subtitle2\" | translate }}</div>\n                            <div class=\"i360-paragraph\">{{ \"installation.patch.text2\" | translate }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #installationSlide>\n            <div class=\"i360-slide\" [@enterAnimation]>\n                <div class=\"i360-preview-info\">\n                    <div role=\"heading\" aria-level=\"1\">{{ \"installation.reputation.title\" | translate }}</div>\n                    <div class=\"i360-paragraph\">\n                        {{ \"installation.reputation.text\" | translate }}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n    </div>\n    <ng-template #textForUser>\n        <div class=\"i360-paragraph\" id=\"text-for-user\">{{ \"installation.textForUser\" | translate }}</div>\n    </ng-template>\n</div>\n","import {\n    Component, OnDestroy, OnInit, QueryList, TemplateRef, ViewChildren, ViewEncapsulation,\n} from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { LicenseAPI, Package } from '@imunify360-api/license';\nimport {\n    timer, EMPTY, Subject,\n    catchError, map, repeatWhen, switchMap, takeUntil, tap\n} from 'rxjs';\nimport { AuthState } from 'app/services/auth-state';\nimport { XHR } from 'app/utils/xhr/xhr';\nimport { InstallationService } from 'app/components/installation/installation.service';\nimport { AppState } from 'app/core/app.service';\n\n\nexport const REFRESH_INTERVAL = 20000;\nexport const ANIMATION_DURATION = REFRESH_INTERVAL * 0.15;\nexport const STATUS_POLLING_INTERVAL = 5000;\n\n@Component ({\n    selector: 'installation-slider',\n    templateUrl: './installation-slider.component.html',\n    styleUrls: ['./installation-slider.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [ // infinity css animation is more simple but it\n        // can be not synchronized with timer inside component\n        trigger(\n            'enterAnimation', [\n                transition(':enter', [\n                    style({ opacity: 0 }),\n                    animate(`${ANIMATION_DURATION}ms`, style({ opacity: 1 })),\n                    animate(\n                        `${ANIMATION_DURATION}ms ${REFRESH_INTERVAL - 2 * ANIMATION_DURATION}ms`,\n                        style({ opacity: 0 }),\n                    ),\n                ]),\n            ],\n        ),\n    ],\n})\nexport class InstallationSliderComponent implements OnInit, OnDestroy {\n    @ViewChildren('installationSlide') slides: QueryList<TemplateRef<any>>;\n    activeSlide$ = timer(0, REFRESH_INTERVAL).pipe(\n        map(() => {\n            const slideNumber = this.installationService.shownSlidesCount % this.slides.length;\n            return this.slides.toArray()[slideNumber];\n        }),\n        tap(() => {\n            this.installationService.shownSlidesCount += 1;\n        }),\n    );\n    isAv = IMUNIFY_PACKAGE === Package.imunifyAV;\n\n    private destroyed = new Subject<void>();\n\n    constructor(\n        public authState: AuthState,\n        private xhr: XHR,\n        private appState: AppState,\n        private installationService: InstallationService,\n    ) {}\n\n    ngOnInit(): void {\n        timer(0).pipe(\n            switchMap(() => this.xhr.post(LicenseAPI.version())),\n            catchError(() => EMPTY),\n            repeatWhen((notifications) => notifications.pipe(\n                switchMap(() => timer(STATUS_POLLING_INTERVAL)),\n            )),\n            takeUntil(this.destroyed),\n        ).subscribe();\n    }\n\n    ngOnDestroy(): void {\n        // needed to display the last shown slide when switching between the tabs\n        this.installationService.shownSlidesCount -= 1;\n\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n}\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\n\n/**\n * implementation via pipe will be more complex because translations are async\n * and we would not be able to lazy-load `defaultTemplate`\n */\n@Component({\n    selector: 'i360-default-if-not-translated',\n    template: `\n        <ng-template #helper\n                     let-translated>\n            <ng-template [ngIf]=\"key === translated\" [ngIfElse]=\"foundKeyTemplate\">\n                <ng-template [ngTemplateOutlet]=\"defaultTemplate\"></ng-template>\n            </ng-template>\n            <ng-template #foundKeyTemplate>\n                {{ translated }}\n            </ng-template>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"helper; context: {$implicit: key | translate}\">\n        </ng-container>\n    `,\n})\nexport class DefaultIfNotTranslatedComponent {\n    @Input() key: string;\n    @ContentChild('default', {static: true}) defaultTemplate: TemplateRef<any>;\n}\n"],"names":["baseEndpoint","globalBaseEndpoint","histogramEndpoint","heatmapEndpoint","addServerIdEndpoint","deleteServerIdEndpoint","listServerIdEndpoint","listRecommendationsEndpoint","ChartType","ServerSeverity","serverSeverityFromNumber","num","good","medium","poor","unknown","DashboardService","constructor","http","licenseState","route","router","appState","id","TEST_SERVER_ID","this","license","value","canActivate","state","eula","isFailed","eulaUrl","IMUNIFY_PACKAGE","navigate","relativeTo","getHeatmapCharts","params","demo","of","responses","pipe","delay","getCharts","getHistogramCharts","group_by","endpoint","get","charts","join","start","since","end","to","Math","round","Date","now","server_id","getServerIds","serverIdsResponse","first","switchMap","forkJoin","result","map","ids","recommendations","res","item","nodename","ip","duplicates","filter","possibleDuplicate","length","duplicate","serverIdsResponseToServerIdsResponseItemList","itemRecommendations","rec","severity","min","r","reduce","push","sort","item1","item2","addServerId","serverIds","post","server_ids","deleteServerId","serverId","i0","i1","i2","i3","i4","factory","ɵfac","ServerRequestDirective","AbstractRequestDirective","zone","commonWidgetsContainer","loader","super","ngAfterContentInit","subscribe","_load","setData","selectors","features","provide","WidgetsOwnerDirective","useExisting","dayjs","AdvancedFormat","QuarterOfYear","LocalizedFormat","CustomParseFormat","isoWeek","FORMATS","datetime","millisecond","second","minute","hour","day","week","month","quarter","year","_adapters","formats","parse","format","valueType","isValid","valueOf","time","add","amount","unit","diff","max","startOf","weekday","validatedWeekday","isoWeekday","endOf","ChartsDirective","element","translate","data","lines","labels","colors","timeFromFormat","timeToFormat","eventsFormat","langChangeSubscription","onLangChange","updateTranslation","chart","update","resizeSubscription","fromEvent","window","debounceTime","resize","Chart","registerables","context","nativeElement","getContext","options","type","datasets","getDatasets","responsive","aspectRatio","plugins","legend","display","tooltip","callbacks","title","items","t","dp","x","index","dataIndex","dataset","replace","label","formattedValue","backgroundColor","titleMarginBottom","cornerRadius","caretSize","caretPadding","displayColors","yPadding","xPadding","titleFontSize","titleFontFamily","bodyFontSize","bodyFontFamily","mode","intersect","scales","offset","displayFormats","ticks","autoSkip","autoSkipPadding","maxRotation","padding","fontFamily","fontColor","fontSize","callback","split","grid","y","color","zeroLineColor","lineWidth","zeroLineWidth","drawBorder","maxTicksLimit","beginAtZero","ngOnChanges","changes","currentValue","ngOnDestroy","destroy","unsubscribe","borderColor","barPercentage","categoryPercentage","toggleLine","meta","getDatasetMeta","hidden","_this","_asyncToGenerator","from","numberOfEvents","inputs","i_r2","_r4","ctx_r3","clicked","ctx_r0","striked","_c0","line_r1","LegendComponent","onClick","EventEmitter","emit","outputs","decls","vars","consts","template","rf","ctx","LegendComponent_li_1_Template","$event","_r2","ctx_r1","directive","ChartsComponent","dataLoader","onLoaded","Subscription","loaded","load","forEach","getColor","column","DataLoaderImpl","viewQuery","ChartsComponent_i360_legend_0_Template","ArrowPosition","FILL_COLOR","BACKGROUND_COLOR","Pin","calculateBaseDimensions","w","width","lastScale","h","height","center","intersects","other","intersection","GroupPin","a","b","text","ciFormatter","getTextWidth","sizeRelation","SinglePin","coordinates","name","count","bounds","screenBounds","containedBounds","p","polygonContains","slice","polylabel","minX","maxX","minY","arrowSize","arrowPosition","left","right","top","bottom","pin","MapsComponent","xhr","countryService","counter","maxZoomLevel","initialPins","stub","measureText","getValue","d","found","find","c","properties","code","browserAbsolutePointToSvgTransitionCoordinates","container","g","node","svg","point","createSVGPoint","matrixTransform","getScreenCTM","inverse","updateScreenBounds","getBoundingClientRect","maxY","groupMarkers","pin1","pin2","intersected","current","next","i","j","removeMarkers","markersG","selectAll","remove","createMarkers","single","group","enter","append","attr","borderRadius","baseRect","splice","Error","style","zoomEnd","zoomStart","zoomed","event","dims","transform","scale","k","clearTimeout","zoomEndTimeout","setTimeout","createCountries","countries","maxValue","interpolateColor","interpolateRgb","quantize","scaleQuantize","domain","range","countriesG","path","feature","geometry","lengths","coords","indexOf","getCountryNameByCode","projection","initMap","document","getElementById","floor","zoom","d3Zoom","scaleExtent","translateExtent","on","root","select","insert","call","geoMercator","PI","geoPath","ngAfterViewInit","_this2","canvas","font","combineLatest","merge","tap","identity","_ref","_x","apply","arguments","useLoader","_r12","ctx_r11","availableValues","histogram","ctx_r13","heatmap","ctx_r7","ChartTileComponent_ng_template_2_ng_container_21_ng_container_2_i360_map_1_Template","ctx_r15","loadedData","some","hasCountriesInHeatmapExpr","_r16","ChartTileComponent_ng_template_2_ng_container_21_i360_chart_1_Template","ChartTileComponent_ng_template_2_ng_container_21_ng_container_2_Template","ChartTileComponent_ng_template_2_ng_container_21_ng_template_3_Template","ctx_r8","ChartTileComponent_ng_template_2_ng_template_23_ng_container_0_div_1_Template","ctx_r19","ChartTileComponent_ng_template_2_ng_template_23_ng_container_0_Template","undefined","ctx_r10","prevData","_r22","ctx_r21","descriptionExpanded","ChartTileComponent_ng_template_2_ng_container_13_Template","ChartTileComponent_ng_template_2_ng_template_14_Template","ChartTileComponent_ng_template_2_ng_container_17_Template","ChartTileComponent_ng_template_2_ng_container_21_Template","ChartTileComponent_ng_template_2_ng_template_23_Template","ctx_r2","paramName","number","translateService","_r3","overflow","_r5","heatmapAllowed","_r9","ChartTileComponent","WidgetDirective","request","cur","allowChartUpdate","defaultValue","delegate","SetWidgetValueComponent","take","chartType","queryParamsHandling","queryParams","ngContentSelectors","_c1","ChartTileComponent_ng_container_0_Template","ChartTileComponent_ng_template_2_Template","tmp_0_0","_r1","DoughnutDirective","percents","spam","ham","getData","maintainAspectRatio","elements","arc","borderWidth","cutout","usePointStyle","tooltips","tooltipItems","getLabels","labelPointStyle","pointStyle","rotation","boxPadding","beforeInit","originalFit","fit","bind","DoughnutComponent","Number","toFixed","DoughnutTileComponent","DoughnutTileComponent_ng_container_0_Template","DoughnutTileComponent_ng_template_2_Template","DeleteServerIdModalComponent","ModalEntry","server","MAT_DIALOG_DATA","AddServerIdModalComponent","formBuilder","form","control","predefinedValue","I360Validators","invalidIds","includes","listOfServerId","markAsDirty","children","_r0","Theme","white","ServerIdWidgetComponent_mat_option_12_mat_icon_1_Template","item_r5","widget","getItemByServerId","entries","entry","ServerIdWidgetComponent","dashboardService","filtersService","modalService","groupNotifications","notifications","delegatePriority","serverIdEntries","Subject","cached","cache","Infinity","domains","required","what","inputFocused","filteredDomains","controls","valueChanges","startWith","mergeWith","destroyed","poorServersCount","concat","setValue","valueChanged","currentActiveItem","Raven","takeUntil","reload","setParam","predefinedIds","catchError","e","error","onSubmit","activeElement","input","blur","openDeleteServerConfirm","deleteServer","open","firstValueFrom","throwError","addServerIds","_this3","addServer","_this4","response","errors","forAction","succeeded","failed","status","i5","i6","i7","i8","i9","ElementRef","ServerIdWidgetComponent_mat_option_12_Template","tmp_11_0","issuesCount","RecommendationsComponent_div_0_div_9_Template","RecommendationsComponent_div_0_div_27_Template","noRecommendations","RecommendationsComponent","RecommendationsComponent_div_0_Template","tile_r8","DashboardComponent_div_17_div_1_Template","fullTiles","ctx_r4","imunify360Package","_c2","ctx_r5","timeframeToGroupByMapping","DashboardComponent","Package","ChartName","isEmpty","previousParams","loadChartData","_params","Object","key","savedItems","paramValue","addGroupBy","line","getArrayInObject","doughnut","ngOnInit","versionRequest","complete","tiles","toArray","tile","doughnutTiles","every","timeframe","timer","LicenseAPI","EMPTY","repeatWhen","REFRESH_INTERVAL","FlatTimeframeWidgetComponent","DashboardComponent_div_5_Template","DashboardComponent_div_16_Template","DashboardComponent_div_17_Template","DashboardComponent_ng_container_28_Template","DashboardComponent_ng_container_34_Template","DashboardComponent_div_64_Template","num_of_alerts","num_of_mrs","num_of_cleanups","captcha_blocked","waf_alerts","bruteforce_attacks","ossec_alerts","denied_bot_attacks","spam_ham","item_r2","description","link_text","RecommendationsListComponent_ng_container_0_div_4_a_11_ng_template_2_Template","link","RecommendationsListComponent_ng_container_0_div_4_ng_template_9_Template","RecommendationsListComponent_ng_container_0_div_4_a_11_Template","index_r3","date","RecommendationsListComponent_ng_container_0_div_4_Template","RecommendationsListComponent","recommendationsComponent","RecommendationsListComponent_ng_container_0_Template","DashboardModule","HTTP_INTERCEPTORS","useClass","SentryInterceptor","multi","imports","RouterModule","component","runGuardsAndResolvers","I360TableModule","I360TranslateModule","I360LoaderModule","I360NavigationTabsModule","I360ButtonModule","I360OverflowDetectorModule","CommonModule","MatTooltipModule","MatIconModule","MatFormFieldModule","MatInputModule","MatAutocompleteModule","HttpClientModule","I360ValidationModule","I360CopyOnClickModule","I360ModalModule","TextFieldModule","I360WarningMessageModule","DayjsPipesModule","TextInputModule","I360CommaSeparatedInputModule","InstallationService","installationBackendService","accumulatedLog","BehaviorSubject","shownSlidesCount","logCollector$","limit","offsetDiff","chunk","log","imunifyStatus","AgentStatus","stopWatchingLog","replaceUrl","logCollectorSubscription","startWatchingLog","InstallationSliderComponent_div_1_ng_template_1_Template","InstallationSliderComponent_div_1_ng_template_3_Template","InstallationSliderComponent_div_1_ng_template_5_Template","InstallationSliderComponent_div_1_ng_template_7_Template","InstallationSliderComponent_div_1_ng_template_9_Template","InstallationSliderComponent_div_1_ng_template_11_Template","InstallationSliderComponent_div_1_ng_template_13_Template","activeSlide$","ANIMATION_DURATION","InstallationSliderComponent","authState","installationService","slideNumber","slides","isAv","InstallationSliderComponent_div_1_Template","InstallationSliderComponent_ng_template_3_Template","isAdmin","trigger","transition","opacity","animate","DefaultIfNotTranslatedComponent_ng_template_0_ng_template_0_ng_template_0_Template","defaultTemplate","translated_r3","DefaultIfNotTranslatedComponent_ng_template_0_ng_template_0_Template","DefaultIfNotTranslatedComponent_ng_template_0_ng_template_1_Template","DefaultIfNotTranslatedComponent","contentQueries","dirIndex","DefaultIfNotTranslatedComponent_ng_template_0_Template","DefaultIfNotTranslatedComponent_ng_container_2_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}