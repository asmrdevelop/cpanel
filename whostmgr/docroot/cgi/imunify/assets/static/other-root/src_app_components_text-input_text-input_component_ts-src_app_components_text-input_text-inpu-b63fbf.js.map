{"version":3,"file":"src_app_components_text-input_text-input_component_ts-src_app_components_text-input_text-inpu-b63fbf.js","mappings":"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","sources":["./src/app/components/settings/notifications/notification-emails.component.ts","./src/app/components/text-input/text-input.component.ts","./src/app/components/text-input/text-input.module.ts","./src/app/utils/checkbox-group.directive.ts","./src/app/utils/comma-separated-input/comma-separated-input.directive.ts","./src/app/utils/datepicker/datepicker.component.ts","./src/app/utils/datepicker/datepicker.component.html","./src/app/utils/modals/content/content.component.html","./src/app/utils/modals/content/content.component.ts","./src/app/utils/validator/error.component/error.component.ts","./src/app/utils/validator/error.pipe.ts","./src/app/utils/validator/extend-form-control-name.directive.ts","./src/app/utils/validator/extend-form-group.directive.ts","./src/app/utils/validator/form-control.ts","./src/app/utils/validator/form-group.ts","./src/app/utils/validator/form-builder.ts","./src/app/utils/validator/select-form-control-name.ts","./src/app/utils/validator/validation.module.ts"],"sourcesContent":["import { forwardRef, Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport {\n    AbstractControl, ControlValueAccessor, FormGroupDirective,\n    NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, UntypedFormGroup,\n} from '@angular/forms';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport { I360Validators } from 'app/utils/validator/validators';\nimport {\n    ExtendFormControlNameDirective,\n} from 'app/utils/validator/extend-form-control-name.directive';\n\nexport const DEFAULT_KEY = 'default';\n\n\n@Component({\n    selector: 'i360-notification-emails',\n    template: `\n        <!--<form [formGroup]=\"form\">\n            <i360-settings-field\n                inputTitle=\"{{ 'settings.notification.fields.adminEmails.label' | translate }}\"\n                description=\n                    \"{{ 'settings.notification.fields.adminEmails.description'| translate }}\">\n                <div class=\"i360-default-emails\">\n                    <mat-checkbox formControlName=\"default\" color=\"primary\">\n                        {{ 'settings.notification.fields.adminEmails.checkboxTitle' | translate }}\n                    </mat-checkbox>\n                </div>\n                <cl-text-input>\n                <textarea\n                    matInput\n                    cdkTextareaAutosize\n                    cdkAutosizeMinRows=\"1\"\n                    cdkAutosizeMaxRows=\"7\"\n                    formControlName=\"admin_emails\"\n                    attr.aria-label\n                            =\"{{ 'settings.notification.fields.adminEmails.label' | translate }}\"\n                    commaSeparatedInput>\n                </textarea>\n                </cl-text-input>\n            </i360-settings-field>\n        </form>-->`,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => I360NotificationEmailsComponent),\n        multi: true,\n    }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => I360NotificationEmailsComponent),\n        multi: true,\n    }],\n    host: {\n        '[class.config_item]': 'true',\n        '[class.flexer]': 'true',\n    },\n})\nexport class I360NotificationEmailsComponent implements ControlValueAccessor,\n    Validator, OnInit {\n    public form: UntypedFormGroup = this.formBuilder.group({\n        admin_emails: this.formBuilder.control<string[]>([], [\n            I360Validators.emails,\n        ]),\n        default: this.formBuilder.control(false),\n    });\n    @ViewChild(FormGroupDirective, {static: true}) formGroup: FormGroupDirective;\n\n    constructor(\n        private formBuilder: I360FormBuilder,\n        private injector: Injector,\n    ) {\n        this.form.valueChanges.subscribe(() => {\n            // this field is not initialized at beginning, do not know exact reason\n            if (this.form.value.admin_emails) {\n                this.onChangeFn([\n                    ...this.form.value.admin_emails,\n                    ...(this.form.value.default ? [DEFAULT_KEY] : []),\n                ]);\n            }\n        });\n    }\n\n    onChangeFn = val => {};\n\n    writeValue(formValue: string[]) {\n        this.form.setValue({\n            admin_emails: formValue.filter(value => value !== DEFAULT_KEY),\n            default: formValue.includes(DEFAULT_KEY),\n        });\n    }\n\n    registerOnChange(fn: any) {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any) {}\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        return this.form.controls.admin_emails.errors;\n    }\n\n    ngOnInit(): void {\n        this.injector.get(ExtendFormControlNameDirective).i360Errors = false;\n    }\n}\n","import {\n    Component, ContentChild, ElementRef, HostBinding, HostListener, Input, OnInit, ViewChild,\n} from '@angular/core';\nimport { MatAutocompleteOrigin } from '@angular/material/autocomplete';\nimport { MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport {\n    ExtendFormControlNameDirective,\n} from 'app/utils/validator/extend-form-control-name.directive';\n\n\n@Component({\n    selector: 'cl-text-input',\n    template: `\n        <div class=\"cl-field\" #clField>\n            <div class=\"cl-field-prefix\">\n                <ng-content select=\"[matPrefix]\"></ng-content>\n            </div>\n            <div class=\"cl-field-middle\">\n                <div class=\"cl-field-outline-label\">\n                    <div class=\"cl-field-outline-label-text\">\n                        <label *ngIf=\"matLabel\"\n                               [attr.for]=\"matInput.id\" [attr.aria-owns]=\"matInput.id\">\n                            <ng-content select=\"mat-label\"></ng-content>\n                        </label>\n                    </div>\n                    <div class=\"cl-field-outline-label-rest\"></div>\n                </div>\n                <div class=\"cl-field-input\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n            <div class=\"cl-field-suffix\">\n                <ng-content select=\"[matSuffix]\"></ng-content>\n            </div>\n        </div>\n        <div class=\"cl-field-error-container\">\n            <i360-error *ngIf=\"i360Errors && error\" [control]=\"matInput.ngControl\"></i360-error>\n        </div>\n    `,\n    styleUrls: ['text-input.component.scss'],\n})\nexport class TextInputComponent extends MatAutocompleteOrigin implements OnInit {\n    @ContentChild(MatLabel, {static: true}) matLabel: MatLabel;  // just for ngIf\n    @ContentChild(MatInput, {static: true}) matInput: MatInput;\n    // from MatAutocompleteOrigin\n    @ViewChild('clField', {static: true}) elementRef: ElementRef<HTMLDivElement>;\n    @ContentChild(ExtendFormControlNameDirective, {static: true})\n    extendedControl: ExtendFormControlNameDirective;\n\n    @Input() i360Errors: boolean = true;\n    @Input() spaceForError = true;\n    @HostBinding('class.cl-can-have-error') get reserveSpaceForError() {\n        return this.spaceForError && this.i360Errors;\n    }\n\n    @HostBinding('class.cl-error') get error() {\n        return this.matInput && this.matInput.ngControl\n            && this.matInput.ngControl.dirty && this.matInput.ngControl.invalid;\n    }\n    @HostBinding('class.cl-focused') get focused() {\n        return this.matInput && this.matInput.focused;\n    }\n    @HostBinding('class.cl-should-float') get shouldLabelFloat() {\n        return this.matInput && this.matInput.shouldLabelFloat;\n    }\n    @HostBinding('class.cl-disabled') get disabled() {\n        return this.matInput && this.matInput.disabled;\n    }\n    @HostListener('click', ['$event']) focus(event) {\n        // prevent MatAutocomplete from closing onStable due to a click event outside the input\n        event.stopPropagation();\n        this.matInput.focus();\n    }\n    constructor() {\n        super(null as any);\n    }\n    ngOnInit(): void {\n        if (this.extendedControl) {\n            // present only if use formControlName\n            this.extendedControl.i360Errors = false;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { I360ValidationModule } from 'app/utils/validator/validation.module';\nimport { TextInputComponent } from './text-input.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MatInputModule,\n        I360ValidationModule,\n    ],\n    declarations: [\n        TextInputComponent,\n    ],\n    exports: [\n        TextInputComponent,\n        MatInputModule,\n    ],\n})\nexport class TextInputModule {}\n","import {\n    forwardRef, AfterContentInit, ContentChildren, Directive, QueryList,\n} from '@angular/core';\n\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n\n@Directive({\n    selector: 'i360-checkbox-group',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CheckboxGroupDirective),\n        multi: true,\n    }],\n})\nexport class CheckboxGroupDirective implements AfterContentInit, ControlValueAccessor {\n    values: string[];\n    @ContentChildren(MatCheckbox) checkboxes: QueryList<MatCheckbox>;\n    forEachQueue: any[] = [];\n    onChangeFn = val => {};\n\n    writeValue(obj: string[]): void {\n        if (!Array.isArray(obj)) {\n            obj = [];\n        }\n        this.values = obj;\n        this.forEachCheckbox(checkbox => {\n            checkbox.checked = this.values.includes(checkbox.name);\n        });\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.forEachCheckbox(checkbox => checkbox.registerOnTouched(fn));\n    }\n    setDisabledState(isDisabled: boolean): void {\n        this.forEachCheckbox(checkbox => checkbox.setDisabledState(isDisabled));\n    }\n    ngAfterContentInit() {\n        this.forEachCheckbox(checkbox => {\n            checkbox.checked = this.values.includes(checkbox.name);\n            checkbox.change.subscribe(({checked}) => {\n                if (checked) {\n                    this.values = [...this.values, checkbox.name];\n                } else {\n                    this.values = this.values.filter(value => value !== checkbox.name);\n                }\n                this.onChangeFn(this.values);\n            });\n        });\n    }\n\n    /**\n     * can be called before content initialized. anyway, function will be executed after\n     * ngAfterContentInit\n     */\n    forEachCheckbox(fn: any) {\n        this.forEachQueue.push(fn);\n        if (this.checkboxes) {\n            this.checkboxes.forEach((...args) => this.forEachQueue.forEach(fn => fn(...args)));\n            this.forEachQueue = [];\n        }\n    }\n}\n","import { forwardRef, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { identity } from 'rxjs';\n\nconst separatedRegExp = {\n    byComma: {\n        joinBy: ', ',\n        splitBy: /[,\\n\\s]/,\n    },\n    byEnter: {\n        joinBy: '\\n',\n        splitBy: /[\\n]/,\n    },\n};\n\nenum SeparatedBy {\n    byComma = 'byComma',\n    byEnter = 'byEnter',\n}\n\n@Directive({\n    selector: '[commaSeparatedInput][formControlName]',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CommaSeparatedInputDirective),\n        multi: true,\n    }],\n})\nexport class CommaSeparatedInputDirective implements ControlValueAccessor {\n    @Input() splitBy: SeparatedBy = SeparatedBy.byComma;\n    @Input() isFilter: boolean = false;\n    private onChangeFn = identity;\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n    ) {}\n\n    writeValue(value: string[]): void {\n        if (!Array.isArray(value)) {\n            if (this.isFilter) {\n                value = [value];\n            } else {\n                value = [];\n            }\n        }\n\n        this.renderer\n            .setProperty(this.element.nativeElement, 'value', value.join(\n                separatedRegExp[this.splitBy].joinBy,\n            ));\n    }\n\n    registerOnChange(fn) {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    @HostListener('input', ['$event'])\n    handleInput(event) {\n        const emails = event.target.value\n            .split(\n                separatedRegExp[this.splitBy].splitBy,\n            ).map((value) => value.trim())\n            .filter(identity);\n\n        this.onChangeFn(emails);\n    }\n}\n","import { forwardRef, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport {\n    AbstractControl, ControlValueAccessor,  NgModel, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator,\n    Validators,\n} from '@angular/forms';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport utc from 'dayjs/plugin/utc';\nimport { I360Validators } from 'app/utils/validator/validators';\n\ndayjs.extend(duration);\ndayjs.extend(utc);\n\n@Component({\n    selector: 'i360-datepicker',\n    templateUrl: './datepicker.component.html',\n    styleUrls: ['./datepicker.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DatepickerComponent),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DatepickerComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DatepickerComponent implements ControlValueAccessor, Validator {\n    @Input() placeholder = 'utils.datepicker.placeholder';\n    @ViewChild('input', {static: true}) input: ElementRef;\n    @ViewChild(NgModel, {static: true}) inputNgModel: NgModel;\n    maxDays = 24;\n    ttl: number | undefined;\n    type: DatepickerUnit;\n    datepickerUnit = DatepickerUnit;\n    validator;\n    propagateChange: Function = () => {};\n\n    constructor() {\n        this.type = this.datepickerUnit.Days;\n        this.setValidator();\n    }\n\n    writeValue(value: number) {\n        if (value) {\n            const diff = (timestamp: dayjs.Dayjs, type: DatepickerUnit) =>\n                Math.round(timestamp.diff(dayjs(), type, true));\n            const timestamp = dayjs.unix(value);\n            const hours = diff(timestamp, this.datepickerUnit.Hours);\n            if (hours < 24) {\n                this.ttl = hours;\n                this.type = this.datepickerUnit.Hours;\n            } else {\n                this.ttl = diff(timestamp, this.datepickerUnit.Days);\n                this.type = this.datepickerUnit.Days;\n            }\n        } else {\n            this.ttl = undefined;\n            this.type = this.datepickerUnit.Days;\n        }\n    }\n\n    validate(c: AbstractControl) {\n        const validation = this.validator({value: this.ttl});\n        this.inputNgModel.control.setErrors(validation);\n        return validation;\n    }\n\n    registerOnChange(fn: any) {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched() {}\n\n    setValidator() {\n        this.validator = Validators.compose(\n            [I360Validators.integer(false),\n                Validators.min(1),\n                Validators.max(\n                    this.type === this.datepickerUnit.Days ? this.maxDays : this.maxDays * 24)]);\n    }\n\n    onChange(value: DatepickerUnit) {\n        const expiration = this.ttl\n            ? dayjs().add(this.ttl, this.type).unix()\n            : null;\n\n        this.setValidator();\n        this.propagateChange(expiration);\n    }\n}\n\nenum DatepickerUnit {\n    Days = 'days',\n    Hours = 'hours',\n}\n","<div class=\"flexer flex-nowrap\">\n    <input #input\n           placeholder=\"{{ placeholder | translate }}\"\n           attr.aria-label=\"{{ placeholder | translate }}\"\n           class=\"form-control\"\n           (input)=\"onChange($any($event))\"\n           [(ngModel)]=\"ttl\">\n    <mat-form-field appearance=\"outline\">\n        <mat-select [(value)]=\"type\" (valueChange)=\"onChange($event)\"\n                    aria-label=\"{{ placeholder | translate }}\">\n            <mat-option value=\"{{datepickerUnit.Days}}\">\n                {{ 'utils.datepicker.days' | translate }}\n            </mat-option>\n            <mat-option value=\"{{datepickerUnit.Hours}}\">\n                {{ 'utils.datepicker.hours' | translate }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n","<div mat-dialog-title>\n    <div class=\"title-text\">\n        <ng-content select=\"[modal-title]\"></ng-content>\n        <div class=\"i360-subtitle\">\n            <ng-content select=\"[modal-subtitle]\"></ng-content>\n        </div>\n    </div>\n    <button *ngIf=\"showClose\"\n            mat-icon-button\n            mat-dialog-close>\n    <i class=\"material-icons\">close</i>\n    </button>\n</div>\n<div mat-dialog-content>\n    <ng-content select=\"[modal-body]\"></ng-content>\n</div>\n<div mat-dialog-actions>\n    <ng-content select=\"[modal-actions]\"></ng-content>\n    <button class=\"cancel-button\"\n            [class.uppercase]=\"uppercaseButtons\"\n            mat-button\n            *ngIf=\"showCancel\"\n            mat-dialog-close\n            color=\"primary\">\n        {{ cancelText | translate }}\n    </button>\n    <button class=\"confirm-button\"\n            *ngIf=\"showConfirm\"\n            color=\"primary\"\n            type=\"button\"\n            (click)=\"close()\"\n            mat-button\n            cdkFocusInitial\n            [class.uppercase]=\"uppercaseButtons\"\n            [disabled]=\"confirmDisabled || confirmDisabledAlways\">\n        <span [matTooltip]=\"confirmNote\">{{ confirmText | translate }}</span>\n    </button>\n</div>\n","import {\n    Component,\n    Input,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'i360-modal-content',\n    encapsulation: ViewEncapsulation.None,\n    templateUrl: './content.component.html',\n    styleUrls: ['./content.component.scss'],\n})\nexport class ModalContentComponent {\n    @Input() confirmText: string = 'utils.modals.content.confirm';\n    @Input() cancelText: string = 'utils.modals.content.cancel';\n    @Input() confirmDisabled: boolean = false;\n    @Input() confirmDisabledAlways: boolean = false; // some else reason to disable except invalid form\n    @Input() confirmNote: string = '';\n    @Input() uppercaseButtons: boolean = true;\n    @Input() showCancel = true;\n    @Input() showConfirm = true;\n    @Input() showClose = true;\n    dialogResult = true;\n\n    constructor(private dialogRef: MatDialogRef<any>) {}\n\n    close() {\n        this.dialogRef.close(this.dialogResult);\n    }\n}\n","import { Component, HostBinding } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n\n@Component({\n    selector: 'i360-error',\n    template: `\n        {{control.errors|i360Error|async}}\n    `,\n    styleUrls: ['./error.component.scss'],\n    inputs: ['control'],  // eslint-disable-line\n})\nexport class ErrorComponent {\n    @HostBinding('class') hostClass = 'error-message'; // for tests\n\n    control: NgControl\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateParams, TranslateService } from 'app/utils/translate/translate.service';\nimport { Observable, of } from 'rxjs';\n\n\n@Pipe({\n    name: 'i360Error',\n})\nexport class ErrorPipe implements PipeTransform {\n    constructor(private translate: TranslateService) {}\n\n    /**\n     * Validator should return an error in format: { ruleName: params }\n     *\n     * @example {required: {what: 'Country'}}\n     * @example {integer: {}}\n     */\n    transform(value: null|{[key: string]: TranslateParams}): Observable<string> {\n        if (!value) return of('');\n\n        const firstKey = Object.keys(value)[0];\n        return this.translate.translate.get(`validators.${firstKey}`, value[firstKey]);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    ComponentRef,\n    Directive,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewContainerRef,\n} from '@angular/core';\nimport { FormControlName } from '@angular/forms';\nimport { debounceTime } from 'rxjs';\n\nimport { ErrorComponent } from 'app/utils/validator/error.component/error.component';\n\n@Directive({\n    selector: '[formControlName]',\n    exportAs: 'formControlName',\n})\nexport class ExtendFormControlNameDirective implements OnInit, OnDestroy {\n    @Input() i360Errors = true;\n\n    private errorRef: ComponentRef<ErrorComponent> | null;\n\n    get value() {\n        return this.control.value;\n    }\n    set value(value) {\n        this.control.control.setValue(value);\n    }\n    constructor(\n        private control: FormControlName,\n        private detector: ChangeDetectorRef,\n        private viewContainer: ViewContainerRef\n    ) {}\n\n    ngOnInit() {\n        if (!this.control.value) {\n            this.control.control.markAsPristine();\n        }\n        if (this.control.statusChanges) {\n            this.control.statusChanges.pipe(debounceTime(20)).subscribe(() => this.renderError());\n        }\n        Promise.resolve().then(() => {\n            this.control.control.enable(<any>{i360: true});\n        });\n    }\n\n    renderError() {\n        if (this.i360Errors) {\n            if (this.control.invalid && !this.errorRef && this.control.dirty) {\n                this.errorRef = this.viewContainer.createComponent(ErrorComponent);\n                this.errorRef.instance.control = this.control;\n                this.detector.markForCheck();\n            } else {\n                if ((this.control.valid || this.control.pristine) && this.errorRef) {\n                    this.errorRef.destroy();\n                    this.errorRef = null;\n                }\n            }\n        }\n    }\n    async ngOnDestroy() {\n        if (this.errorRef) {\n            this.errorRef.destroy();\n        }\n        await Promise.resolve();\n        if (this.control.control) {\n            this.control.control.disable(<any>{i360: true});\n        }\n    }\n}\n","import {\n    Directive, EventEmitter, HostBinding, Input, NgZone, OnInit, Optional, Output,\n} from '@angular/core';\nimport { DefaultValueAccessor, FormGroupDirective } from '@angular/forms';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { MatSelect } from '@angular/material/select';\nimport { MatSlider } from '@angular/material/slider';\n\nimport { CheckboxGroupDirective } from 'app/utils/checkbox-group.directive';\nimport { DatepickerComponent } from 'app/utils/datepicker/datepicker.component';\nimport { ModalContentComponent } from 'app/utils/modals/content/content.component';\nimport {\n    I360NotificationEmailsComponent,\n} from 'app/components/settings/notifications/notification-emails.component';\nimport {\n    CommaSeparatedInputDirective,\n} from 'app/utils/comma-separated-input/comma-separated-input.directive';\nimport { I360FormControl } from './form-control';\n\n/**\n * disable form submitting on Enter by default\n * focus on next input element on enter key pressed, like tab\n * submit if this is last input\n * focus on invalid input on submit\n */\n@Directive({\n    selector: 'form[formGroup]',\n})\nexport class ExtendFormGroupDirective implements OnInit {\n    @HostBinding('style.display') styleDisplay = '';\n    @Output() i360Submit = new EventEmitter<ExtendFormGroupDirective>();\n    @Input() allowSubmitWhenSubmitting = false;\n    constructor(public formGroup: FormGroupDirective,\n                @Optional() private modalContent: ModalContentComponent,\n                private ngZone: NgZone) {}\n\n    ngOnInit(): void {\n        if (this.modalContent) {\n            this.formGroup.statusChanges!.subscribe(() => {\n                this.modalContent.confirmDisabled = !!this.formGroup.invalid;\n            });\n            this.formGroup.valueChanges!.subscribe(value => {\n                this.modalContent.dialogResult = value;\n            });\n        }\n        this.formGroup.ngSubmit.subscribe(() => {\n            this.formGroup.form.updateValueAndValidity();\n            if (this.formGroup.invalid) {\n                this.focusOnInvalidDirective(this.formGroup);\n            } else {\n                this.i360Submit.emit(this);\n                if (this.modalContent) {\n                    this.modalContent.close();\n                }\n            }\n        });\n        // allow use ngIf with formControlName and do not loose order of focusing on keypress.enter\n        const oldPush = this.formGroup.directives.push;\n        const ngZone = this.ngZone;\n        this.formGroup.directives.push = function (...args) {\n            const retVal = oldPush.apply(this, args);\n            ngZone.runOutsideAngular(() => {\n                setTimeout(() => this.sort((a, b) => (a.control as I360FormControl<any>).i360Id\n                    - (b.control as I360FormControl<any>).i360Id));\n            });\n            return retVal;\n        };\n    }\n\n    focusOnInvalidDirective(formGroup: FormGroupDirective) {\n        formGroup.form.markAsDirty({children: true} as any);\n        // focus on first invalid directive\n        return formGroup.directives.some((directive): boolean => {\n            const found = directive.invalid && this.focusOnDirective(directive);\n            if (found) {\n                directive.control.markAsDirty();\n                directive.control.statusChanges['emit']();\n            } else {\n                return false;\n            }\n            return found;\n        });\n    }\n\n    focusOnDirective(directive = this.formGroup.directives[0]): boolean|void {\n        const valueAccessor = directive.valueAccessor;\n        if (valueAccessor instanceof DefaultValueAccessor) {\n            const nativeElement = valueAccessor['_elementRef'].nativeElement;\n            nativeElement.focus();\n            nativeElement.select();\n            return true;\n        }\n        if (valueAccessor instanceof MatCheckbox) {\n            if (!valueAccessor.disabled) { // skip disabled checkboxes\n                valueAccessor.focus(); // will be good to have focus() on each valueAccessor\n                return true;\n            }\n        }\n        if (valueAccessor instanceof MatSlider) {\n            valueAccessor['_elementRef'].nativeElement.focus();\n            return true;\n        }\n        if (valueAccessor instanceof CheckboxGroupDirective) {\n            valueAccessor.checkboxes.first.focus();\n            return true;\n        }\n        if (valueAccessor instanceof MatSelect) {\n            valueAccessor.focus();\n            return true;\n        }\n\n        if (valueAccessor instanceof DatepickerComponent) {\n            valueAccessor.input.nativeElement.focus();\n            return true;\n        }\n\n        if (valueAccessor instanceof CommaSeparatedInputDirective) {\n            valueAccessor.element.nativeElement.focus();\n        }\n\n        if (valueAccessor instanceof I360NotificationEmailsComponent) {\n            return this.focusOnInvalidDirective(valueAccessor.formGroup);\n        }\n    }\n    saveLastInputValuesToBrowser() {\n        this.styleDisplay = 'none';\n        setTimeout(() => {\n            history.replaceState(null, '', location.href);\n            this.styleDisplay = '';\n        });\n    }\n}\n","import { UntypedFormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nlet counter = 0;\ntype ExtendedState<E> = {\n    value: E,\n    allowedValues?: any[],\n    disabled?: boolean,\n};\nexport type FormControlState<E> = ExtendedState<E>|E;\nexport class I360FormControl<E> extends UntypedFormControl {\n    value: E;\n    valueChanges: Observable<E>;\n    i360DefaultValue: E;\n    /**\n     * cases:\n     * 1. custom input disabling with ngIf (on-demand-scan => start => trigger advanced)\n     * 2. ONLY disable validation if input hidden with ngIf (\n     * lists => let dirty ip input => add country submit,\n     * lists => let dirty ip input => trigger tabs => ip input has same value\n     * disabled-rules => let dirty domains input => change plugin => submit (should not send\n     * domains)\n     */\n    i360DisabledByUser;\n    allowedValues: E[];\n    readonly i360Id;\n    constructor(state: FormControlState<E> | null, validators?, asyncValidators?) {\n        let allowedValues;\n        if (state && (state as any).allowedValues) {\n            state = state as ExtendedState<E>;\n            allowedValues = state.allowedValues;\n            delete state.allowedValues;\n            if (!state.disabled) {\n                state = state.value;\n            }\n        }\n        super(state, validators, asyncValidators);\n        this.allowedValues = allowedValues;\n        this.i360Id = counter++;\n        this.i360DefaultValue = JSON.parse(JSON.stringify(state));\n        this.disable({i360: true});\n    }\n    reset(value?: Partial<E>, options?) {\n        super.reset(value || this.i360DefaultValue, options);\n        this.setErrors(null);\n    }\n    disable(opts?) {\n        if (!opts || !opts.i360) {\n            this.i360DisabledByUser = true;\n        }\n        super.disable(opts);\n    }\n    enable(opts?) {\n        if (!opts || !opts.i360) {\n            this.i360DisabledByUser = false;\n        }\n        if (!this.i360DisabledByUser) {\n            super.enable(opts);\n        }\n    }\n}\n","import { AbstractControl, UntypedFormGroup } from '@angular/forms';\n\ninterface Control<E> extends AbstractControl {\n    value: E;\n}\n\ntype Field<E, K extends keyof E> = E[K];\n\nexport type FormGroupConfig<E> = {\n    [K in keyof E]: Control<E[K]>;\n};\n\nexport type Value<E, C extends FormGroupConfig<E>> = {\n    [K in keyof C]: Field<C[K], 'value'>;\n};\n\nenum MarkAsCmd {\n    markAsPristine = 'markAsPristine',\n    markAsDirty = 'markAsDirty',\n}\n\nexport class I360FormGroup<E, C extends FormGroupConfig<E>> extends UntypedFormGroup {\n    value: Value<E, C>;\n    controls: C;\n    constructor(controls: C, ...args) {\n        super(controls, ...args);\n    }\n    markAs(cmd: MarkAsCmd, opts?) {\n        super[cmd](opts);\n        if (opts && opts.children) {\n            Object.keys(this.controls).forEach(key => {\n                const control = this.controls[key];\n                control[cmd]({onlySelf: true, ...opts});\n                // this is actually event emitter\n                (<any>control.statusChanges).emit(control.value);\n            });\n        }\n    }\n    markAsDirty(opts?) {\n        this.markAs(MarkAsCmd.markAsDirty, opts);\n    }\n    markAsPristine(opts?) {\n        this.markAs(MarkAsCmd.markAsPristine, opts);\n    }\n    getDirtyValues(form = this) {\n        let dirtyValues = {};\n        Object.keys(form.controls)\n            .forEach(key => {\n                const currentControl = form.controls[key];\n                if (currentControl.dirty) {\n                    dirtyValues[key] = currentControl.controls\n                        ? this.getDirtyValues(currentControl)\n                        : currentControl.value;\n                }\n            });\n        return dirtyValues;\n    }\n    setValue(value: Value<E, C>) {\n        return super.setValue(value);\n    }\n    patchValue(\n        value: Partial<Value<E, C>>,\n        options?: {onlySelf?: boolean; emitEvent?: boolean; }): void {\n        return super.patchValue(value);\n    }\n}\n","import { UntypedFormBuilder } from '@angular/forms';\nimport { Injectable } from '@angular/core';\nimport { FormControlState, I360FormControl } from 'app/utils/validator/form-control';\nimport { FormGroupConfig, I360FormGroup } from 'app/utils/validator/form-group';\n\n@Injectable()\nexport class I360FormBuilder extends UntypedFormBuilder {\n    control<E>(state: FormControlState<E> | null, validators?, asyncValidators?) {\n        return new I360FormControl(state, validators, asyncValidators);\n    }\n    group<E, C extends FormGroupConfig<E>>(value: C, extra?) {\n        const validator = extra != null ? extra['validator'] : null;\n        const asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new I360FormGroup<E, C>(value, validator, asyncValidator);\n    }\n}\n","import { AfterContentInit, ContentChild, Directive, Self } from '@angular/core';\nimport { NgForOf } from '@angular/common';\nimport { FormControlName } from '@angular/forms';\nimport { I360FormControl } from 'app/utils/validator/form-control';\n\n@Directive({\n    selector: 'mat-select[formControlName]',\n})\nexport class SelectFormControlNameDirective implements AfterContentInit {\n    @ContentChild(NgForOf, {static: true}) ngForOf: NgForOf<any>;\n    constructor(@Self() private formControlName: FormControlName) {}\n    ngAfterContentInit() {\n        const control = <I360FormControl<any>>this.formControlName.control;\n        if (control.allowedValues) {\n            this.ngForOf.ngForOf = control.allowedValues;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, UntypedFormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { ErrorComponent } from 'app/utils/validator/error.component/error.component';\nimport { ErrorPipe } from 'app/utils/validator/error.pipe';\nimport { I360FormBuilder } from 'app/utils/validator/form-builder';\nimport { ExtendFormControlNameDirective }\nfrom 'app/utils/validator/extend-form-control-name.directive';\nimport { ExtendFormGroupDirective } from 'app/utils/validator/extend-form-group.directive';\nimport { CommonModule } from '@angular/common';\nimport { SelectFormControlNameDirective } from 'app/utils/validator/select-form-control-name';\n\n\nconst publicDirectives = [\n    ExtendFormControlNameDirective,\n    ExtendFormGroupDirective,\n    SelectFormControlNameDirective,\n    ErrorComponent,\n];\nconst privateDirectives = [\n    ErrorPipe,\n];\n\n\n\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    exports: [\n        ReactiveFormsModule,\n        FormsModule,\n        ...publicDirectives,\n    ],\n    declarations: [\n        ...publicDirectives, ...privateDirectives,\n    ],\n    providers: [\n        { provide: UntypedFormBuilder, useExisting: I360FormBuilder },\n        I360FormBuilder,\n    ]\n})\nexport class I360ValidationModule {}\n"],"names":["DEFAULT_KEY","I360NotificationEmailsComponent","constructor","formBuilder","injector","form","this","group","admin_emails","control","I360Validators","default","onChangeFn","val","valueChanges","subscribe","value","writeValue","formValue","setValue","filter","includes","registerOnChange","fn","registerOnTouched","validate","controls","errors","ngOnInit","get","ExtendFormControlNameDirective","i360Errors","i0","i1","selectors","viewQuery","rf","ctx","FormGroupDirective","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","decls","vars","template","encapsulation","ctx_r1","matInput","id","ctx_r2","ngControl","TextInputComponent","MatAutocompleteOrigin","super","spaceForError","reserveSpaceForError","error","dirty","invalid","focused","shouldLabelFloat","disabled","focus","event","stopPropagation","extendedControl","contentQueries","dirIndex","MatLabel","MatInput","$event","TextInputComponent_label_7_Template","TextInputComponent_i360_error_14_Template","matLabel","TextInputModule","CommonModule","MatInputModule","I360ValidationModule","CheckboxGroupDirective","forEachQueue","obj","Array","isArray","values","forEachCheckbox","checkbox","checked","name","setDisabledState","isDisabled","ngAfterContentInit","change","push","checkboxes","forEach","args","MatCheckbox","separatedRegExp","byComma","joinBy","splitBy","byEnter","SeparatedBy","CommaSeparatedInputDirective","element","renderer","isFilter","identity","setProperty","nativeElement","join","handleInput","emails","target","split","map","trim","hostBindings","dayjs","duration","utc","DatepickerComponent","placeholder","maxDays","datepickerUnit","DatepickerUnit","propagateChange","type","Days","setValidator","diff","timestamp","Math","round","hours","Hours","ttl","undefined","c","validation","validator","inputNgModel","setErrors","Validators","onChange","expiration","add","unix","NgModel","consts","uppercaseButtons","cancelText","_r4","ctx_r3","close","confirmDisabled","confirmDisabledAlways","confirmNote","confirmText","ModalContentComponent","dialogRef","showCancel","showConfirm","showClose","dialogResult","inputs","ngContentSelectors","_c1","ModalContentComponent_button_5_Template","ModalContentComponent_button_10_Template","ModalContentComponent_button_11_Template","ErrorComponent","hostClass","hostVars","ErrorPipe","translate","transform","of","firstKey","Object","keys","pure","detector","viewContainer","markAsPristine","statusChanges","pipe","debounceTime","renderError","Promise","resolve","then","enable","i360","errorRef","createComponent","instance","markForCheck","valid","pristine","destroy","ngOnDestroy","_this","_asyncToGenerator","disable","exportAs","ExtendFormGroupDirective","formGroup","modalContent","ngZone","styleDisplay","i360Submit","EventEmitter","allowSubmitWhenSubmitting","ngSubmit","updateValueAndValidity","focusOnInvalidDirective","emit","oldPush","directives","retVal","apply","runOutsideAngular","setTimeout","sort","a","b","i360Id","markAsDirty","children","some","directive","found","focusOnDirective","valueAccessor","DefaultValueAccessor","select","MatSlider","first","MatSelect","input","saveLastInputValuesToBrowser","history","replaceState","location","href","i2","counter","I360FormControl","UntypedFormControl","state","validators","asyncValidators","allowedValues","i360DefaultValue","JSON","parse","stringify","reset","options","opts","i360DisabledByUser","MarkAsCmd","I360FormGroup","UntypedFormGroup","markAs","cmd","key","onlySelf","getDirtyValues","dirtyValues","currentControl","patchValue","I360FormBuilder","UntypedFormBuilder","extra","asyncValidator","t","factory","ɵfac","SelectFormControlNameDirective","formControlName","ngForOf","NgForOf","imports","FormsModule","ReactiveFormsModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}