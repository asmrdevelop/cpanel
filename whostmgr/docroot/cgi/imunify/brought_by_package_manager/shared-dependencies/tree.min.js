System.register(["@angular/cdk/tree","@angular/core","@angular/material/core","@angular/cdk/coercion","@angular/cdk/collections","rxjs","rxjs/operators"],(function(e){"use strict";var t,n,r,i,a,s,d,o,u,l,c,f,h,p,g,v,x,m,N,T;return{setters:[function(e){t=e.CdkTreeNode,n=e,r=e.CdkTreeNodeDef,i=e.CdkNestedTreeNode,a=e.CDK_TREE_NODE_OUTLET_NODE,s=e.CdkTreeNodePadding,d=e.CdkTreeNodeOutlet,o=e.CdkTree,u=e.CdkTreeNodeToggle,l=e.CdkTreeModule},function(e){c=e,e.Directive,e.Attribute,e.Input,e.Inject,e.Optional,e.Component,e.ViewEncapsulation,e.ChangeDetectionStrategy,e.ViewChild,e.NgModule},function(e){f=e.mixinTabIndex,h=e.mixinDisabled,p=e.MatCommonModule},function(e){g=e.coerceBooleanProperty},function(e){v=e.DataSource},function(e){x=e.BehaviorSubject,m=e.merge},function(e){N=e.take,T=e.map}],execute:function(){const _=f(h(t));class I extends _{constructor(e,t,n){super(e,t),this.tabIndex=Number(n)||0}ngOnInit(){super.ngOnInit()}ngOnDestroy(){super.ngOnDestroy()}}e("MatTreeNode",I),I.\u0275fac=function(e){return new(e||I)(c.\u0275\u0275directiveInject(c.ElementRef),c.\u0275\u0275directiveInject(n.CdkTree),c.\u0275\u0275injectAttribute("tabindex"))},I.\u0275dir=c.\u0275\u0275defineDirective({type:I,selectors:[["mat-tree-node"]],hostAttrs:[1,"mat-tree-node"],inputs:{role:"role",disabled:"disabled",tabIndex:"tabIndex"},exportAs:["matTreeNode"],features:[c.\u0275\u0275ProvidersFeature([{provide:t,useExisting:I}]),c.\u0275\u0275InheritDefinitionFeature]});class b extends r{}e("MatTreeNodeDef",b),b.\u0275fac=function(){let e;return function(t){return(e||(e=c.\u0275\u0275getInheritedFactory(b)))(t||b)}}(),b.\u0275dir=c.\u0275\u0275defineDirective({type:b,selectors:[["","matTreeNodeDef",""]],inputs:{when:["matTreeNodeDefWhen","when"],data:["matTreeNode","data"]},features:[c.\u0275\u0275ProvidersFeature([{provide:r,useExisting:b}]),c.\u0275\u0275InheritDefinitionFeature]});class D extends i{constructor(e,t,n,r){super(e,t,n),this._disabled=!1,this.tabIndex=Number(r)||0}get disabled(){return this._disabled}set disabled(e){this._disabled=g(e)}get tabIndex(){return this.disabled?-1:this._tabIndex}set tabIndex(e){this._tabIndex=null!=e?e:0}ngOnInit(){super.ngOnInit()}ngAfterContentInit(){super.ngAfterContentInit()}ngOnDestroy(){super.ngOnDestroy()}}e("MatNestedTreeNode",D),D.\u0275fac=function(e){return new(e||D)(c.\u0275\u0275directiveInject(c.ElementRef),c.\u0275\u0275directiveInject(n.CdkTree),c.\u0275\u0275directiveInject(c.IterableDiffers),c.\u0275\u0275injectAttribute("tabindex"))},D.\u0275dir=c.\u0275\u0275defineDirective({type:D,selectors:[["mat-nested-tree-node"]],hostAttrs:[1,"mat-nested-tree-node"],inputs:{role:"role",disabled:"disabled",tabIndex:"tabIndex",node:["matNestedTreeNode","node"]},exportAs:["matNestedTreeNode"],features:[c.\u0275\u0275ProvidersFeature([{provide:i,useExisting:D},{provide:t,useExisting:D},{provide:a,useExisting:D}]),c.\u0275\u0275InheritDefinitionFeature]});class C extends s{get level(){return this._level}set level(e){this._setLevelInput(e)}get indent(){return this._indent}set indent(e){this._setIndentInput(e)}}e("MatTreeNodePadding",C),C.\u0275fac=function(){let e;return function(t){return(e||(e=c.\u0275\u0275getInheritedFactory(C)))(t||C)}}(),C.\u0275dir=c.\u0275\u0275defineDirective({type:C,selectors:[["","matTreeNodePadding",""]],inputs:{level:["matTreeNodePadding","level"],indent:["matTreeNodePaddingIndent","indent"]},features:[c.\u0275\u0275ProvidersFeature([{provide:s,useExisting:C}]),c.\u0275\u0275InheritDefinitionFeature]});class y{constructor(e,t){this.viewContainer=e,this._node=t}}e("MatTreeNodeOutlet",y),y.\u0275fac=function(e){return new(e||y)(c.\u0275\u0275directiveInject(c.ViewContainerRef),c.\u0275\u0275directiveInject(a,8))},y.\u0275dir=c.\u0275\u0275defineDirective({type:y,selectors:[["","matTreeNodeOutlet",""]],features:[c.\u0275\u0275ProvidersFeature([{provide:d,useExisting:y}])]});class F extends o{}e("MatTree",F),F.\u0275fac=function(){let e;return function(t){return(e||(e=c.\u0275\u0275getInheritedFactory(F)))(t||F)}}(),F.\u0275cmp=c.\u0275\u0275defineComponent({type:F,selectors:[["mat-tree"]],viewQuery:function(e,t){if(1&e&&c.\u0275\u0275viewQuery(y,7),2&e){let e;c.\u0275\u0275queryRefresh(e=c.\u0275\u0275loadQuery())&&(t._nodeOutlet=e.first)}},hostAttrs:["role","tree",1,"mat-tree"],exportAs:["matTree"],features:[c.\u0275\u0275ProvidersFeature([{provide:o,useExisting:F}]),c.\u0275\u0275InheritDefinitionFeature],decls:1,vars:0,consts:[["matTreeNodeOutlet",""]],template:function(e,t){1&e&&c.\u0275\u0275elementContainer(0,0)},dependencies:[y],styles:[".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}"],encapsulation:2});class E extends u{}e("MatTreeNodeToggle",E),E.\u0275fac=function(){let e;return function(t){return(e||(e=c.\u0275\u0275getInheritedFactory(E)))(t||E)}}(),E.\u0275dir=c.\u0275\u0275defineDirective({type:E,selectors:[["","matTreeNodeToggle",""]],inputs:{recursive:["matTreeNodeToggleRecursive","recursive"]},features:[c.\u0275\u0275ProvidersFeature([{provide:u,useExisting:E}]),c.\u0275\u0275InheritDefinitionFeature]});class w{}e("MatTreeModule",w),w.\u0275fac=function(e){return new(e||w)},w.\u0275mod=c.\u0275\u0275defineNgModule({type:w}),w.\u0275inj=c.\u0275\u0275defineInjector({imports:[l,p,p]});e("MatTreeFlattener",class{constructor(e,t,n,r){this.transformFunction=e,this.getLevel=t,this.isExpandable=n,this.getChildren=r}_flattenNode(e,t,n,r){const i=this.transformFunction(e,t);if(n.push(i),this.isExpandable(i)){const i=this.getChildren(e);i&&(Array.isArray(i)?this._flattenChildren(i,t,n,r):i.pipe(N(1)).subscribe((e=>{this._flattenChildren(e,t,n,r)})))}return n}_flattenChildren(e,t,n,r){e.forEach(((i,a)=>{let s=r.slice();s.push(a!=e.length-1),this._flattenNode(i,t+1,n,s)}))}flattenNodes(e){let t=[];return e.forEach((e=>this._flattenNode(e,0,t,[]))),t}expandFlattenedNodes(e,t){let n=[],r=[];return r[0]=!0,e.forEach((e=>{let i=!0;for(let t=0;t<=this.getLevel(e);t++)i=i&&r[t];i&&n.push(e),this.isExpandable(e)&&(r[this.getLevel(e)+1]=t.isExpanded(e))})),n}});e("MatTreeFlatDataSource",class extends v{constructor(e,t,n){super(),this._treeControl=e,this._treeFlattener=t,this._flattenedData=new x([]),this._expandedData=new x([]),this._data=new x([]),n&&(this.data=n)}get data(){return this._data.value}set data(e){this._data.next(e),this._flattenedData.next(this._treeFlattener.flattenNodes(this.data)),this._treeControl.dataNodes=this._flattenedData.value}connect(e){return m(e.viewChange,this._treeControl.expansionModel.changed,this._flattenedData).pipe(T((()=>(this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value,this._treeControl)),this._expandedData.value))))}disconnect(){}});e("MatTreeNestedDataSource",class extends v{constructor(){super(...arguments),this._data=new x([])}get data(){return this._data.value}set data(e){this._data.next(e)}connect(e){return m(e.viewChange,this._data).pipe(T((()=>this.data)))}disconnect(){}})}}}));
