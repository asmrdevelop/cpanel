//~~GENERATED~~
//-------------------------------------------------------------
// Source:    /usr/local/cpanel/base/sharedjs/zone_editor/directives/naptr_validators.js
// Generated: /usr/local/cpanel/base/sharedjs/zone_editor/directives/naptr_validators-pt_br.js
// Module:    legacy_shared/zone_editor/directives/naptr_validators-pt_br
// Locale:    pt_br
// This file is generated by the cpanel localization system
// using the bin/_build_translated_js_hash_files.pl script.
//-------------------------------------------------------------
// !!! Do not hand edit this file !!!
//-------------------------------------------------------------
(function() {
    // The raw lexicon.
    var newLex = {"Each “rs” value (the value after ‘+’ symbols) must contain only case insensitive letters a-z, digits 0-9, ‘-’s and ‘+’s. It must not exceed 32 characters.":"Cada valor “rs” (o valor após os símbolos ‘+’) deve conter apenas letras maiúsculas e minúsculas a-z, dígitos 0-9, ‘-’s e ‘+’s. Não deve exceder 32 caracteres.","Service must start with a letter.":"Serviço deve iniciar com uma letra.","To separate regular and replacement expressions, you must enter the delimiter before, between, and after the expressions. For example, delim-char regex delim-char replacement delim-char.":"Para separar expressões regulares e de substituição, você deve inserir o delimitador antes, entre e depois das expressões. Por exemplo, delim-char regex delim-char substituição delim-char.","You can not use a digit or the flag character ‘i’ as your delimiter.":"Você não pode usar um dígito ou o caractere de sinalização [output,apos]i[output,apos] como seu delimitador.","“Protocol”, the first part of the service field must contain only case insensitive letters a-z, digits 0-9, ‘-’s and ‘+’s. It must not exceed 32 characters.":"“Protocolo”, a primeira parte do campo de serviço deve conter apenas letras maiúsculas e minúsculas a-z, dígitos 0-9, ‘-’s e ‘+’s. Não deve exceder 32 caracteres."};

    if (!this.LEXICON) {
        this.LEXICON = {};
    }

    for(var item in newLex) {
        if(newLex.hasOwnProperty(item)) {
            var value = newLex[item];
            if (typeof(value) === "string" && value !== "") {
                // Only add it if there is a value.
                this.LEXICON[item] = value;
            }
        }
    }
})();
//~~END-GENERATED~~
