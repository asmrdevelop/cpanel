System.register(["@angular/cdk/coercion","@angular/cdk/platform","@angular/cdk/scrolling","@angular/common","@angular/core","@angular/material/core","@angular/platform-browser/animations","rxjs"],(function(e){"use strict";var t,r,o,s,n,a,i,d,m,f,c,h,g;return{setters:[function(e){t=e.coerceNumberProperty},function(e){r=e,o=e._getShadowRoot},function(e){s=e},function(e){n=e.DOCUMENT,a=e,i=e.CommonModule},function(e){d=e.InjectionToken,m=e,e.Component,e.ChangeDetectionStrategy,e.ViewEncapsulation,e.Optional,e.Inject,e.Input,e.NgModule},function(e){f=e.mixinColor,c=e.MatCommonModule},function(e){h=e.ANIMATION_MODULE_TYPE},function(e){g=e.Subscription}],execute:function(){function p(e,t){if(1&e&&(m.\u0275\u0275namespaceSVG(),m.\u0275\u0275element(0,"circle",4)),2&e){const e=m.\u0275\u0275nextContext(),t=m.\u0275\u0275reference(1);m.\u0275\u0275styleProp("animation-name","mat-progress-spinner-stroke-rotate-"+e._spinnerAnimationLabel)("stroke-dashoffset",e._getStrokeDashOffset(),"px")("stroke-dasharray",e._getStrokeCircumference(),"px")("stroke-width",e._getCircleStrokeWidth(),"%")("transform-origin",e._getCircleTransformOrigin(t)),m.\u0275\u0275attribute("r",e._getCircleRadius())}}function l(e,t){if(1&e&&(m.\u0275\u0275namespaceSVG(),m.\u0275\u0275element(0,"circle",4)),2&e){const e=m.\u0275\u0275nextContext(),t=m.\u0275\u0275reference(1);m.\u0275\u0275styleProp("stroke-dashoffset",e._getStrokeDashOffset(),"px")("stroke-dasharray",e._getStrokeCircumference(),"px")("stroke-width",e._getCircleStrokeWidth(),"%")("transform-origin",e._getCircleTransformOrigin(t)),m.\u0275\u0275attribute("r",e._getCircleRadius())}}e("MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY",S);const u=100,_=f(class{constructor(e){this._elementRef=e}},"primary"),k=e("MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS",new d("mat-progress-spinner-default-options",{providedIn:"root",factory:S}));function S(){return{diameter:u}}const A="\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n";class x extends _{constructor(e,t,r,o,s,n,a,i){super(e),this._document=r,this._diameter=u,this._value=0,this._resizeSubscription=g.EMPTY,this.mode="determinate";const d=x._diameters;this._spinnerAnimationLabel=this._getSpinnerAnimationLabel(),d.has(r.head)||d.set(r.head,new Set([u])),this._noopAnimations="NoopAnimations"===o&&!!s&&!s._forceAnimations,"mat-spinner"===e.nativeElement.nodeName.toLowerCase()&&(this.mode="indeterminate"),s&&(s.color&&(this.color=this.defaultColor=s.color),s.diameter&&(this.diameter=s.diameter),s.strokeWidth&&(this.strokeWidth=s.strokeWidth)),t.isBrowser&&t.SAFARI&&a&&n&&i&&(this._resizeSubscription=a.change(150).subscribe((()=>{"indeterminate"===this.mode&&i.run((()=>n.markForCheck()))})))}get diameter(){return this._diameter}set diameter(e){this._diameter=t(e),this._spinnerAnimationLabel=this._getSpinnerAnimationLabel(),this._styleRoot&&this._attachStyleNode()}get strokeWidth(){return this._strokeWidth||this.diameter/10}set strokeWidth(e){this._strokeWidth=t(e)}get value(){return"determinate"===this.mode?this._value:0}set value(e){this._value=Math.max(0,Math.min(100,t(e)))}ngOnInit(){const e=this._elementRef.nativeElement;this._styleRoot=o(e)||this._document.head,this._attachStyleNode(),e.classList.add("mat-progress-spinner-indeterminate-animation")}ngOnDestroy(){this._resizeSubscription.unsubscribe()}_getCircleRadius(){return(this.diameter-10)/2}_getViewBox(){const e=2*this._getCircleRadius()+this.strokeWidth;return`0 0 ${e} ${e}`}_getStrokeCircumference(){return 2*Math.PI*this._getCircleRadius()}_getStrokeDashOffset(){return"determinate"===this.mode?this._getStrokeCircumference()*(100-this._value)/100:null}_getCircleStrokeWidth(){return this.strokeWidth/this.diameter*100}_getCircleTransformOrigin(e){const t=50*(e.currentScale??1);return`${t}% ${t}%`}_attachStyleNode(){const e=this._styleRoot,t=this._diameter,r=x._diameters;let o=r.get(e);if(!o||!o.has(t)){const s=this._document.createElement("style");s.setAttribute("mat-spinner-animation",this._spinnerAnimationLabel),s.textContent=this._getAnimationText(),e.appendChild(s),o||(o=new Set,r.set(e,o)),o.add(t)}}_getAnimationText(){const e=this._getStrokeCircumference();return A.replace(/START_VALUE/g,""+.95*e).replace(/END_VALUE/g,""+.2*e).replace(/DIAMETER/g,`${this._spinnerAnimationLabel}`)}_getSpinnerAnimationLabel(){return this.diameter.toString().replace(".","_")}}e("MatProgressSpinner",x),x._diameters=new WeakMap,x.\u0275fac=function(e){return new(e||x)(m.\u0275\u0275directiveInject(m.ElementRef),m.\u0275\u0275directiveInject(r.Platform),m.\u0275\u0275directiveInject(n,8),m.\u0275\u0275directiveInject(h,8),m.\u0275\u0275directiveInject(k),m.\u0275\u0275directiveInject(m.ChangeDetectorRef),m.\u0275\u0275directiveInject(s.ViewportRuler),m.\u0275\u0275directiveInject(m.NgZone))},x.\u0275cmp=m.\u0275\u0275defineComponent({type:x,selectors:[["mat-progress-spinner"],["mat-spinner"]],hostAttrs:["role","progressbar","tabindex","-1",1,"mat-progress-spinner","mat-spinner"],hostVars:10,hostBindings:function(e,t){2&e&&(m.\u0275\u0275attribute("aria-valuemin","determinate"===t.mode?0:null)("aria-valuemax","determinate"===t.mode?100:null)("aria-valuenow","determinate"===t.mode?t.value:null)("mode",t.mode),m.\u0275\u0275styleProp("width",t.diameter,"px")("height",t.diameter,"px"),m.\u0275\u0275classProp("_mat-animation-noopable",t._noopAnimations))},inputs:{color:"color",diameter:"diameter",strokeWidth:"strokeWidth",mode:"mode",value:"value"},exportAs:["matProgressSpinner"],features:[m.\u0275\u0275InheritDefinitionFeature],decls:4,vars:8,consts:[["preserveAspectRatio","xMidYMid meet","focusable","false","aria-hidden","true",3,"ngSwitch"],["svg",""],["cx","50%","cy","50%",3,"animation-name","stroke-dashoffset","stroke-dasharray","stroke-width","transform-origin",4,"ngSwitchCase"],["cx","50%","cy","50%",3,"stroke-dashoffset","stroke-dasharray","stroke-width","transform-origin",4,"ngSwitchCase"],["cx","50%","cy","50%"]],template:function(e,t){1&e&&(m.\u0275\u0275namespaceSVG(),m.\u0275\u0275elementStart(0,"svg",0,1),m.\u0275\u0275template(2,p,1,11,"circle",2),m.\u0275\u0275template(3,l,1,9,"circle",3),m.\u0275\u0275elementEnd()),2&e&&(m.\u0275\u0275styleProp("width",t.diameter,"px")("height",t.diameter,"px"),m.\u0275\u0275property("ngSwitch","indeterminate"===t.mode),m.\u0275\u0275attribute("viewBox",t._getViewBox()),m.\u0275\u0275advance(2),m.\u0275\u0275property("ngSwitchCase",!0),m.\u0275\u0275advance(1),m.\u0275\u0275property("ngSwitchCase",!1))},dependencies:[a.NgSwitch,a.NgSwitchCase],styles:[".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}"],encapsulation:2,changeDetection:0});class E{}e("MatProgressSpinnerModule",E),E.\u0275fac=function(e){return new(e||E)},E.\u0275mod=m.\u0275\u0275defineNgModule({type:E}),E.\u0275inj=m.\u0275\u0275defineInjector({imports:[c,i,c]});e("MatSpinner",x)}}}));
