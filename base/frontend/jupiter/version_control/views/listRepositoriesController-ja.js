//~~GENERATED~~
//-------------------------------------------------------------
// Source:    /usr/local/cpanel/base/frontend/jupiter/version_control/views/listRepositoriesController.js
// Generated: /usr/local/cpanel/base/frontend/jupiter/version_control/views/listRepositoriesController-ja.js
// Module:    /jupiter/version_control/views/listRepositoriesController-ja
// Locale:    ja
// This file is generated by the cpanel localization system
// using the bin/_build_translated_js_hash_files.pl script.
//-------------------------------------------------------------
// !!! Do not hand edit this file !!!
//-------------------------------------------------------------
(function() {
    // The raw lexicon.
    var newLex = {"Are you sure that you want to remove the “[_1]” repository from the list of [asis,cPanel]-managed repositories?":"[asis,cPanel] で管理されているリポジトリのリストから「[_1]」リポジトリを削除しますか？","Error occurred while cloning repository “[_1]”.":"リポジトリ「[_1]」の複製中にエラーが発生しました。","The system could not remove the “[_1]” repository in the “[_2]” directory.":"システムが「[_2]」ディレクトリの「[_1]」レポジトリを削除できませんでした。","The system successfully copied the “[_1]” clone [output,acronym,URL,Uniform Resource Locator] to the clipboard.":"システムは、クリップボードに「[_1]」クローン[output,acronym,URL,Uniform Resource Locator]を正常にコピーしました。","The system successfully removed the “[_1]” repository from the list of [asis,cPanel]-managed repositories.":"システムは、[asis,cPanel]で管理されているリポジトリのリストから「[_1]」リポジトリを正常に削除しました。","The system successfully removed the “[_1]” repository from the list of [asis,cPanel]-managed repositories. You can use the [output,url,_2,File Manager,target,_3] interface to delete the repository contents.":"The system successfully removed the “[_1]” repository from the list of [asis,cPanel]-managed repositories. You can use the [output,url,_2,File Manager,target,_3] interface to delete the repository contents.","Unable to find repository web url":"リポジトリウェブリンクを特定できません。","Unable to redirect to File Manager interface":"ファイルマネージャーインターフェースにリダイレクトできません。"};

    if (!this.LEXICON) {
        this.LEXICON = {};
    }

    for(var item in newLex) {
        if(newLex.hasOwnProperty(item)) {
            var value = newLex[item];
            if (typeof(value) === "string" && value !== "") {
                // Only add it if there is a value.
                this.LEXICON[item] = value;
            }
        }
    }
})();
//~~END-GENERATED~~
